<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/01/15/MyBatis%20%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <url>/2022/01/15/MyBatis%20%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大家好，我是连边。</p><p>本周给大家带来Mybatis面试系列，开篇先给大家来一个汇总的，大家可以根据这些问题查漏补缺。</p><hr><p>本文作者：a745233700 </p><p>原文地址：<a href="http://j.mp/2NS38An">http://j.mp/2NS38An</a></p><h2 id="什么是Mybatis？"><a href="#什么是Mybatis？" class="headerlink" title="什么是Mybatis？"></a>什么是Mybatis？</h2><p>1、Mybatis是一个半ORM（对象关系映射）框架，它内部封装了JDBC，开发时只需要关注SQL语句本身，不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程。程序员直接编写原生态sql，可以严格控制sql执行性能，灵活度高。</p><p>2、MyBatis 可以使用 XML 或注解来配置和映射原生信息，将 POJO映射成数据库中的记录，避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。</p><p>3、通过xml 文件或注解的方式将要执行的各种 statement 配置起来，并通过java对象和 statement中sql的动态参数进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射为java对象并返回。（从执行sql到返回result的过程）。</p><h2 id="Mybaits的优点："><a href="#Mybaits的优点：" class="headerlink" title="Mybaits的优点："></a>Mybaits的优点：</h2><p>1、基于SQL语句编程，相当灵活，不会对应用程序或者数据库的现有设计造成任何影响，SQL写在XML里，解除sql与程序代码的耦合，便于统一管理；提供XML标签，支持编写动态SQL语句，并可重用。</p><p>2、与JDBC相比，减少了50%以上的代码量，消除了JDBC大量冗余的代码，不需要手动开关连接；</p><p>3、很好的与各种数据库兼容（因为MyBatis使用JDBC来连接数据库，所以只要JDBC支持的数据库MyBatis都支持）。</p><p>4、能够与Spring很好的集成；</p><p>5、提供映射标签，支持对象与数据库的ORM字段关系映射；提供对象关系映射标签，支持对象关系组件维护。</p><h2 id="MyBatis框架的缺点："><a href="#MyBatis框架的缺点：" class="headerlink" title="MyBatis框架的缺点："></a>MyBatis框架的缺点：</h2><p>1、SQL语句的编写工作量较大，尤其当字段多、关联表多时，对开发人员编写SQL语句的功底有一定要求。</p><p>2、SQL语句依赖于数据库，导致数据库移植性差，不能随意更换数据库。</p><h2 id="MyBatis框架适用场合："><a href="#MyBatis框架适用场合：" class="headerlink" title="MyBatis框架适用场合："></a>MyBatis框架适用场合：</h2><p>1、MyBatis专注于SQL本身，是一个足够灵活的DAO层解决方案。</p><p>2、对性能的要求很高，或者需求变化较多的项目，如互联网项目，MyBatis将是不错的选择。</p><h2 id="MyBatis与Hibernate有哪些不同？"><a href="#MyBatis与Hibernate有哪些不同？" class="headerlink" title="MyBatis与Hibernate有哪些不同？"></a>MyBatis与Hibernate有哪些不同？</h2><p>1、Mybatis和hibernate不同，它不完全是一个ORM框架，因为MyBatis需要程序员自己编写Sql语句。</p><p>2、Mybatis直接编写原生态sql，可以严格控制sql执行性能，灵活度高，非常适合对关系数据模型要求不高的软件开发，因为这类软件需求变化频繁，一但需求变化要求迅速输出成果。但是灵活的前提是mybatis无法做到数据库无关性，如果需要实现支持多种数据库的软件，则需要自定义多套sql映射文件，工作量大。</p><p>3、Hibernate对象/关系映射能力强，数据库无关性好，对于关系模型要求高的软件，如果用hibernate开发可以节省很多代码，提高效率。</p><h2 id="和-的区别是什么？"><a href="#和-的区别是什么？" class="headerlink" title="#{}和${}的区别是什么？"></a>#{}和${}的区别是什么？</h2><p><code>#&#123;&#125;</code>是预编译处理，${}是字符串替换。</p><p>Mybatis在处理#{}时，会将sql中的#{}替换为?号，调用PreparedStatement的set方法来赋值；</p><p>Mybatis在处理${}时，就是把${}替换成变量的值。</p><p>使用#{}可以有效的防止SQL注入，提高系统安全性。</p><h2 id="当实体类中的属性名和表中的字段名不一样-，怎么办-？"><a href="#当实体类中的属性名和表中的字段名不一样-，怎么办-？" class="headerlink" title="当实体类中的属性名和表中的字段名不一样 ，怎么办 ？"></a>当实体类中的属性名和表中的字段名不一样 ，怎么办 ？</h2><p>第1种：通过在查询的sql语句中定义字段名的别名，让字段名的别名和实体类的属性名一致。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”selectorder”</span> <span class="token attr-name">parametertype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”int”</span> <span class="token attr-name">resultetype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”me.gacl.domain.order”</span><span class="token punctuation">></span></span>  select order_id id, order_no orderno ,order_price price form orders where order_id=#&#123;id&#125;;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第2种：通过 <code>&lt;resultMap&gt;</code>来映射字段名和实体类属性名的一一对应的关系。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getOrder<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderresultmap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select * from orders where order_id=#&#123;id&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”me.gacl.domain.order”</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”orderresultmap”</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!–用id属性来映射主键字段–</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”id”</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”order_id”</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!–用result属性来映射非主键字段，property为实体类属性名，column为数据表中的属性–</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> “orderno”</span> <span class="token attr-name">column</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span>”order_no”/</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”price”</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”order_price”</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>reslutMap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模糊查询like语句该怎么写"><a href="#模糊查询like语句该怎么写" class="headerlink" title="模糊查询like语句该怎么写?"></a>模糊查询like语句该怎么写?</h2><p>第1种：在Java代码中添加sql通配符。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”insertname”</span> <span class="token attr-name">usegeneratedkeys</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”true”</span> <span class="token attr-name">keyproperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”id”</span><span class="token punctuation">></span></span>     insert into names (name) values (#&#123;name&#125;)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第2种：在sql语句中拼接通配符，会引起sql注入</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">string wildcardname = “smi”;list<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span> names = mapper.selectlike(wildcardname);<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”selectlike”</span><span class="token punctuation">></span></span>select * from foo where bar like "%"$&#123;value&#125;"%"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="通常一个Xml映射文件，都会写一个Dao接口与之对应，请问，这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能重载吗？"><a href="#通常一个Xml映射文件，都会写一个Dao接口与之对应，请问，这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能重载吗？" class="headerlink" title="通常一个Xml映射文件，都会写一个Dao接口与之对应，请问，这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能重载吗？"></a>通常一个Xml映射文件，都会写一个Dao接口与之对应，请问，这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能重载吗？</h2><p>Dao接口即Mapper接口。接口的全限名，就是映射文件中的namespace的值；接口的方法名，就是映射文件中Mapper的Statement的id值；接口方法内的参数，就是传递给sql的参数。</p><p>Mapper接口是没有实现类的，当调用接口方法时，接口全限名+方法名拼接字符串作为key值，可唯一定位一个MapperStatement。在Mybatis中，每一个 <code>&lt;select&gt;、&lt;insert&gt;、&lt;update&gt;、&lt;delete&gt;</code>标签，都会被解析为一个MapperStatement对象。</p><p>举例：<code>com.mybatis3.mappers.StudentDao.findStudentById</code>，可以唯一找到namespace为 <code>com.mybatis3.mappers.StudentDao</code>下面 id 为 findStudentById 的 MapperStatement。</p><p>Mapper接口里的方法，是不能重载的，因为是使用 全限名+方法名 的保存和寻找策略。Mapper 接口的工作原理是JDK动态代理，Mybatis运行时会使用JDK动态代理为Mapper接口生成代理对象proxy，代理对象会拦截接口方法，转而执行MapperStatement所代表的sql，然后将sql执行结果返回。</p><h2 id="Mybatis是如何进行分页的？分页插件的原理是什么？"><a href="#Mybatis是如何进行分页的？分页插件的原理是什么？" class="headerlink" title="Mybatis是如何进行分页的？分页插件的原理是什么？"></a>Mybatis是如何进行分页的？分页插件的原理是什么？</h2><p>Mybatis使用RowBounds对象进行分页，它是针对ResultSet结果集执行的内存分页，而非物理分页。可以在sql内直接书写带有物理分页的参数来完成物理分页功能，也可以使用分页插件来完成物理分页。</p><p>分页插件的基本原理是使用Mybatis提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的sql，然后重写sql，根据dialect方言，添加对应的物理分页语句和物理分页参数。</p><h2 id="Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？"><a href="#Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？" class="headerlink" title="Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？"></a>Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？</h2><p>第一种是使用 <code>&lt;resultMap&gt;</code>标签，逐一定义数据库列名和对象属性名之间的映射关系。</p><p>第二种是使用sql列的别名功能，将列的别名书写为对象属性名。</p><p>有了列名与属性名的映射关系后，Mybatis通过反射创建对象，同时使用反射给对象的属性逐一赋值并返回，那些找不到映射关系的属性，是无法完成赋值的。</p><h2 id="如何获取自动生成的-主-键值"><a href="#如何获取自动生成的-主-键值" class="headerlink" title="如何获取自动生成的(主)键值?"></a>如何获取自动生成的(主)键值?</h2><p>insert 方法总是返回一个int值 ，这个值代表的是插入的行数。</p><p>如果采用自增长策略，自动生成的键值在 insert 方法执行完后可以被设置到传入的参数对象中。</p><p>示例：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”insertname”</span> <span class="token attr-name">usegeneratedkeys</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”true”</span> <span class="token attr-name">keyproperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”id”</span><span class="token punctuation">></span></span>     insert into names (name) values (#&#123;name&#125;)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="在mapper中如何传递多个参数"><a href="#在mapper中如何传递多个参数" class="headerlink" title="在mapper中如何传递多个参数?"></a>在mapper中如何传递多个参数?</h2><p>1、第一种：</p><p>DAO层的函数</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">//DAO层的函数Public UserselectUser(String name,String area);  //对应的xml,#&#123;0&#125;代表接收的是dao层中的第一个参数，#&#123;1&#125;代表dao层中第二参数，更多参数一致往后加即可。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectUser<span class="token punctuation">"</span></span><span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select *  fromuser_user_t   whereuser_name = #&#123;0&#125; anduser_area=#&#123;1&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、第二种：使用 @param 注解:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> usermapper <span class="token punctuation">&#123;</span>   user <span class="token function">selectuser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@param</span><span class="token punctuation">(</span>“username”<span class="token punctuation">)</span> string username<span class="token punctuation">,</span><span class="token annotation punctuation">@param</span><span class="token punctuation">(</span>“hashedpassword”<span class="token punctuation">)</span> string hashedpassword<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后,就可以在xml像下面这样使用(推荐封装为一个map,作为单个参数传递给mapper):</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”selectuser”</span> <span class="token attr-name">resulttype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”user”</span><span class="token punctuation">></span></span>         select id, username, hashedpassword         from some_table         where username = #&#123;username&#125;         and hashedpassword = #&#123;hashedpassword&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、第三种：多个参数封装成map</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token comment">//映射文件的命名空间.SQL片段的ID，就可以调用对应的映射文件中的SQL</span><span class="token comment">//由于我们的参数超过了两个，而方法中只有一个Object参数收集，因此我们使用Map集合来装载我们的参数</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>     map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">"StudentID.pagination"</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     sqlSession<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> e<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">finally</span><span class="token punctuation">&#123;</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">closeSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Mybatis动态sql有什么用？执行原理？有哪些动态sql？"><a href="#Mybatis动态sql有什么用？执行原理？有哪些动态sql？" class="headerlink" title="Mybatis动态sql有什么用？执行原理？有哪些动态sql？"></a>Mybatis动态sql有什么用？执行原理？有哪些动态sql？</h2><p>Mybatis动态sql可以在Xml映射文件内，以标签的形式编写动态sql，执行原理是根据表达式的值 完成逻辑判断并动态拼接sql的功能。</p><p>Mybatis提供了9种动态sql标签：<code>trim|where|set|foreach|if|choose|when|otherwise|bind</code>。</p><h2 id="Xml映射文件中，除了常见的select-insert-updae-delete标签之外，还有哪些标签？"><a href="#Xml映射文件中，除了常见的select-insert-updae-delete标签之外，还有哪些标签？" class="headerlink" title="Xml映射文件中，除了常见的select|insert|updae|delete标签之外，还有哪些标签？"></a>Xml映射文件中，除了常见的select|insert|updae|delete标签之外，还有哪些标签？</h2><p>答：<code>&lt;resultMap&gt;、&lt;parameterMap&gt;、&lt;sql&gt;、&lt;include&gt;、&lt;selectKey&gt;</code>，加上动态sql的9个标签，其中 <code>&lt;sql&gt;</code>为sql片段标签，通过 <code>&lt;include&gt;</code>标签引入sql片段， <code>&lt;selectKey&gt;</code>为不支持自增的主键生成策略标签。</p><p>17、Mybatis的Xml映射文件中，不同的Xml映射文件，id是否可以重复？</p><p>不同的Xml映射文件，如果配置了namespace，那么id可以重复；如果没有配置namespace，那么id不能重复；</p><p>原因就是namespace+id是作为Map <code>&lt;String,MapperStatement&gt;</code>的key使用的，如果没有namespace，就剩下id，那么，id重复会导致数据互相覆盖。有了namespace，自然id就可以重复，namespace不同，namespace+id自然也就不同。</p><h2 id="为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？"><a href="#为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？" class="headerlink" title="为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？"></a>为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？</h2><p>Hibernate属于全自动ORM映射工具，使用Hibernate查询关联对象或者关联集合对象时，可以根据对象关系模型直接获取，所以它是全自动的。而Mybatis在查询关联对象或关联集合对象时，需要手动编写sql来完成，所以，称之为半自动ORM映射工具。</p><h2 id="一对一、一对多的关联查询-？"><a href="#一对一、一对多的关联查询-？" class="headerlink" title="一对一、一对多的关联查询 ？"></a>一对一、一对多的关联查询 ？</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lcb.mapping.userMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--association  一对一关联查询 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getClass<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ClassesResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          select * from class c,teacher t where c.teacher_id=t.t_id and c.c_id=#&#123;id&#125;      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lcb.user.Classes<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ClassesResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token comment">&lt;!-- 实体类的字段名和数据表的字段名映射 --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c_id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c_name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lcb.user.Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t_id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t_name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--collection  一对多关联查询 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getClass2<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ClassesResultMap2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          select * from class c,teacher t,student s where c.teacher_id=t.t_id and c.c_id=s.class_id and c.c_id=#&#123;id&#125;      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lcb.user.Classes<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ClassesResultMap2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c_id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c_name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lcb.user.Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t_id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t_name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lcb.user.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s_id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s_name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MyBatis实现一对一有几种方式-具体怎么操作的？"><a href="#MyBatis实现一对一有几种方式-具体怎么操作的？" class="headerlink" title="MyBatis实现一对一有几种方式?具体怎么操作的？"></a>MyBatis实现一对一有几种方式?具体怎么操作的？</h2><p>有联合查询和嵌套查询,联合查询是几个表联合查询,只查询一次, 通过在resultMap里面配置association节点配置一对一的类就可以完成；</p><p>嵌套查询是先查一个表，根据这个表里面的结果的 外键id，去再另外一个表里面查询数据,也是通过association配置，但另外一个表的查询通过select属性配置。</p><h2 id="MyBatis实现一对多有几种方式-怎么操作的？"><a href="#MyBatis实现一对多有几种方式-怎么操作的？" class="headerlink" title="MyBatis实现一对多有几种方式,怎么操作的？"></a>MyBatis实现一对多有几种方式,怎么操作的？</h2><p>有联合查询和嵌套查询。联合查询是几个表联合查询,只查询一次,通过在resultMap里面的collection节点配置一对多的类就可以完成；嵌套查询是先查一个表,根据这个表里面的 结果的外键id,去再另外一个表里面查询数据,也是通过配置collection,但另外一个表的查询通过select节点配置。</p><h2 id="Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？"><a href="#Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？" class="headerlink" title="Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？"></a>Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？</h2><p>答：Mybatis仅支持association关联对象和collection关联集合对象的延迟加载，association指的就是一对一，collection指的就是一对多查询。在Mybatis配置文件中，可以配置是否启用延迟加载lazyLoadingEnabled=true|false。</p><p>它的原理是，使用CGLIB创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用a.getB().getName()，拦截器invoke()方法发现a.getB()是null值，那么就会单独发送事先保存好的查询关联B对象的sql，把B查询上来，然后调用a.setB(b)，于是a的对象b属性就有值了，接着完成a.getB().getName()方法的调用。这就是延迟加载的基本原理。</p><p>当然了，不光是Mybatis，几乎所有的包括Hibernate，支持延迟加载的原理都是一样的。</p><h2 id="Mybatis的一级、二级缓存"><a href="#Mybatis的一级、二级缓存" class="headerlink" title="Mybatis的一级、二级缓存:"></a>Mybatis的一级、二级缓存:</h2><p>1）一级缓存: 基于 PerpetualCache 的 HashMap 本地缓存，其存储作用域为 Session，当 Session flush 或 close 之后，该 Session 中的所有 Cache 就将清空，默认打开一级缓存。</p><p>2）二级缓存与一级缓存其机制相同，默认也是采用 PerpetualCache，HashMap 存储，不同在于其存储作用域为 Mapper(Namespace)，并且可自定义存储源，如 Ehcache。默认不打开二级缓存，要开启二级缓存，使用二级缓存属性类需要实现Serializable序列化接口(可用来保存对象的状态),可在它的映射文件中配置 <code>&lt;cache/&gt;</code> ；</p><p>3）对于缓存数据更新机制，当某一个作用域(一级缓存 Session/二级缓存Namespaces)的进行了C/U/D 操作后，默认该作用域下所有 select 中的缓存将被 clear。</p><h2 id="什么是MyBatis的接口绑定？有哪些实现方式？"><a href="#什么是MyBatis的接口绑定？有哪些实现方式？" class="headerlink" title="什么是MyBatis的接口绑定？有哪些实现方式？"></a>什么是MyBatis的接口绑定？有哪些实现方式？</h2><p>接口绑定，就是在MyBatis中任意定义接口,然后把接口里面的方法和SQL语句绑定, 我们直接调用接口方法就可以,这样比起原来了SqlSession提供的方法我们可以有更加灵活的选择和设置。</p><p>接口绑定有两种实现方式,一种是通过注解绑定，就是在接口的方法上面加上 @Select、@Update等注解，里面包含Sql语句来绑定；另外一种就是通过xml里面写SQL来绑定, 在这种情况下,要指定xml映射文件里面的namespace必须为接口的全路径名。当Sql语句比较简单时候,用注解绑定, 当SQL语句比较复杂时候,用xml绑定,一般用xml绑定的比较多。</p><h2 id="使用MyBatis的mapper接口调用时有哪些要求？"><a href="#使用MyBatis的mapper接口调用时有哪些要求？" class="headerlink" title="使用MyBatis的mapper接口调用时有哪些要求？"></a>使用MyBatis的mapper接口调用时有哪些要求？</h2><p>1、Mapper接口方法名和mapper.xml中定义的每个sql的id相同；2、Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql 的parameterType的类型相同；3、Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同；4、Mapper.xml文件中的namespace即是mapper接口的类路径。</p><h2 id="Mapper编写有哪几种方式？"><a href="#Mapper编写有哪几种方式？" class="headerlink" title="Mapper编写有哪几种方式？"></a>Mapper编写有哪几种方式？</h2><p>第一种：接口实现类继承SqlSessionDaoSupport：使用此种方法需要编写mapper接口，mapper接口实现类、mapper.xml文件。</p><p>1、在sqlMapConfig.xml中配置mapper.xml的位置</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapper.xml 文件的地址<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapper.xml 文件的地址<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、定义mapper接口</p><p>3、实现类集成SqlSessionDaoSupportmapper方法中可以this.getSqlSession()进行数据增删改查。</p><p>4、spring 配置</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>对象ID<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapper 接口的实现<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第二种：使用 <code>org.mybatis.spring.mapper.MapperFactoryBean</code>：</p><p>1、在sqlMapConfig.xml中配置mapper.xml的位置，如果mapper.xml和mappre接口的名称相同且在同一个目录，这里可以不用配置</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapper.xml 文件的地址<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapper.xml 文件的地址<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、定义mapper接口：</p><p>1、mapper.xml中的namespace为mapper接口的地址</p><p>2、mapper接口中的方法名和mapper.xml中的定义的statement的id保持一致</p><p>3、Spring中定义</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapperInterface<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapper 接口地址<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第三种：使用mapper扫描器：</p><p>1、mapper.xml文件编写：</p><p>mapper.xml中的namespace为mapper接口的地址；mapper接口中的方法名和mapper.xml中的定义的statement的id保持一致；如果将mapper.xml和mapper接口的名称保持一致则不用在sqlMapConfig.xml中进行配置。</p><p>2、定义mapper接口：</p><p>注意mapper.xml的文件名和mapper的接口名称保持一致，且放在同一个目录</p><p>3、配置mapper扫描器：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapper接口包地址<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactoryBeanName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4、使用扫描器后从spring容器中获取mapper的实现对象。</p><h2 id="简述Mybatis的插件运行原理，以及如何编写一个插件。"><a href="#简述Mybatis的插件运行原理，以及如何编写一个插件。" class="headerlink" title="简述Mybatis的插件运行原理，以及如何编写一个插件。"></a>简述Mybatis的插件运行原理，以及如何编写一个插件。</h2><p>答：Mybatis仅可以编写针对ParameterHandler、ResultSetHandler、StatementHandler、Executor这4种接口的插件，Mybatis使用JDK的动态代理，为需要拦截的接口生成代理对象以实现接口方法拦截功能，每当执行这4种接口对象的方法时，就会进入拦截方法，具体就是InvocationHandler的invoke()方法，当然，只会拦截那些你指定需要拦截的方法。</p><p>编写插件：实现Mybatis的Interceptor接口并复写intercept()方法，然后在给插件编写注解，指定要拦截哪一个接口的哪些方法即可，记住，别忘了在配置文件中配置你编写的插件。</p><hr><p>我是连边，专注于Java和架构领域，坚持撰写有原理，有实战，有体系的技术文章。</p><p>最近在整理#面试精选#，如果你正在准备面试，可以点击下边名片关注我，点击订阅号#面试精选#获取常见高频面试题。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/01/05/Spring%E4%B8%AD%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E4%BA%8B%E5%8A%A1%E7%9A%84/"/>
      <url>/2022/01/05/Spring%E4%B8%AD%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E4%BA%8B%E5%8A%A1%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<p>很好做标题：</p><p><a href="https://bbs.csdn.net/topics/390632361">https://bbs.csdn.net/topics/390632361</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/12/31/%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
      <url>/2021/12/31/%E5%85%AC%E4%BC%97%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="公众号内容"><a href="#公众号内容" class="headerlink" title="公众号内容"></a>公众号内容</h2><p>公众号@连边</p><p>我是连边，专注于Java和架构领域，坚持撰写有原理，有实战，有体系的技术文章。</p><p>公众号内会不定期的举行送技术书籍、送极客时间专栏、送优酷会员系列活动，赶快扫码关注吧～</p><p><img src="http://mkstatic.lianbian.net/202112310714427.png" alt="连边"></p><h2 id="全面推送"><a href="#全面推送" class="headerlink" title="全面推送"></a>全面推送</h2><p>连边博客</p><p><a href="https://www.lianbian.net/">https://www.lianbian.net</a></p><p>掘金</p><p><a href="https://juejin.cn/user/4424866079457037">https://juejin.cn/user/4424866079457037</a></p><p>csdn</p><p><a href="https://blog.csdn.net/binbinwan51a">https://blog.csdn.net/binbinwan51a</a></p><p>博客园</p><p><a href="https://www.cnblogs.com/lianbian/">https://www.cnblogs.com/lianbian/</a></p><p>知乎</p><p><a href="https://www.zhihu.com/people/ilianbian">https://www.zhihu.com/people/ilianbian</a></p><p>infoq</p><p><a href="https://xie.infoq.cn/">https://xie.infoq.cn/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/12/29/%E4%BD%BF%E7%94%A8%E4%BA%91%E6%89%98%E7%AE%A1%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/12/29/%E4%BD%BF%E7%94%A8%E4%BA%91%E6%89%98%E7%AE%A1%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<ol><li>官网：<a href="https://cloud.weixin.qq.com/cloudrun/service">https://cloud.weixin.qq.com/cloudrun/service</a></li><li><a href="https://github.com/lianbian/lianbian.github.io/blob/main/.github/workflows/build.yml">https://github.com/lianbian/lianbian.github.io/blob/main/.github/workflows/build.yml</a></li><li><a href="https://cloudbase.net/community/guides/hosting-handbook/hexo.html">https://cloudbase.net/community/guides/hosting-handbook/hexo.html</a></li><li><a href="https://cloud.tencent.com/document/product/1243">https://cloud.tencent.com/document/product/1243</a></li><li><a href="https://cloud.tencent.com/document/product/1210/43365">https://cloud.tencent.com/document/product/1210/43365</a></li></ol><p>终极整理</p><ol><li>npm i -g @cloudbase/cli</li><li>上传文件</li><li>自定义域名</li><li>CI</li></ol><p>// 环境ID</p><p>ENV_ID: lianbian-0g96vi0je4b9c81b</p><p>SecretId: AKIDMXS8XgY9UYLq53kAKDqCHAm8D2ZqpY1D </p><p>SecretKey: xd3B3ey1QYPzIK5ZmiNlsiHZaKnzvbz6</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cloudbase hosting deploy public -e lianbian-0g96vi0je4b9c81b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>// 腾讯云</p><p><a href="https://console.cloud.tencent.com/tcb/hosting/index?envId=lianbian-0g96vi0je4b9c81b&amp;rid=1&amp;tabId=file">https://console.cloud.tencent.com/tcb/hosting/index?envId=lianbian-0g96vi0je4b9c81b&amp;rid=1&amp;tabId=file</a></p><p>// 部署博客</p><p><a href="https://cloud.tencent.com/document/product/876/47006">https://cloud.tencent.com/document/product/876/47006</a></p><p><a href="https://docs.cloudbase.net/framework/config">https://docs.cloudbase.net/framework/config</a></p><p><a href="https://rimson.top/tencent-cloudbase-hexo/">https://rimson.top/tencent-cloudbase-hexo/</a></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">on: [push]jobs:  deploy:    runs-on: ubuntu-latest    name: Tencent Cloudbase Github Action    steps:      - name: Checkout        uses: actions&#x2F;checkout@v2      - name: Setup Node        uses: actions&#x2F;setup-node@v2        with:          node-version: &#39;14&#39;      - name: NPM install        run: npm install      - name: Hexo Clean        run: .&#x2F;node_modules&#x2F;.bin&#x2F;hexo clean      - name: Hexo Generate        run: .&#x2F;node_modules&#x2F;.bin&#x2F;hexo generate      - name: Deploy to Tencent CloudBase        uses: TencentCloudBase&#x2F;cloudbase-action@v2        with:          secretId: $&#123;&#123;secrets.secret_Id&#125;&#125;          secretKey: $&#123;&#123;secrets.secret_Key&#125;&#125;          envId: $&#123;&#123;secrets.env_Id&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>blog_token: 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</p><p><strong>你的私人令牌GITEE_ACCESS_TOKEN已生成</strong>: 1164c228a0620bbd3849e7270cedc66b</p><pre class="line-numbers language-none"><code class="language-none">git push --force --quiet https:&#x2F;&#x2F;lianbian:8b0c0aeb264ffc394f9094dff6d32175@gitee.com&#x2F;lianbian&#x2F;lianbian.git  gh-pages:gh-pages<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">git push --force --quiet https:&#x2F;&#x2F;lianbian:1164c228a0620bbd3849e7270cedc66b@gitee.com&#x2F;lianbian&#x2F;lianbian.git  main:main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">git push --force --quiet https:&#x2F;&#x2F;码云用户名:勾选projects的私人令牌@gitee.com&#x2F;码云用户名&#x2F;代码仓库名.git  master:master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当前的三个问题：</p><ol><li>每次都是hexo全量编译；</li><li>推送到腾讯云托管也是全量推送；</li><li>gitee暂未部署；</li><li>云托管不行，因为他是根据版本号来手动控制发布的；</li><li>可以考虑自己编写一个sh文件来发布；<ol><li>缺点：需要在本地安装环境</li></ol></li></ol><p><img src="http://mkstatic.lianbian.net/202201072101055.png" alt="image-20220107210108859"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">- name: Deploy hexo blog    env:      # Github 仓库      GITHUB_REPO: github.com&#x2F;lianbian&#x2F;lianbian.github.io    # 将编译后的博客文件推送到指定分支    run: |      cd .&#x2F;public &amp;&amp; git init -b gh-pages &amp;&amp; git add .      git config user.name &quot;lianbian&quot;      git config user.email &quot;ilianbian@163.com&quot;      git add .      git commit -m &quot;Builder at $(date +&#39;%Y-%m-%d %H:%M:%S&#39;)&quot;      git push --force --quiet &quot;https:&#x2F;&#x2F;$&#123;&#123; secrets.BLOG_ACCESS_TOKEN &#125;&#125;@$GITHUB_REPO&quot; gh-pages:gh-pages<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/12/29/%E6%AF%8F%E4%B8%80%E6%AC%A1%E6%8A%89%E6%8B%A9%E9%83%BD%E6%9C%9F%E5%BE%85%E4%B8%80%E5%9C%BA%E8%8B%A6%E5%B0%BD%E7%94%98%E6%9D%A5/"/>
      <url>/2021/12/29/%E6%AF%8F%E4%B8%80%E6%AC%A1%E6%8A%89%E6%8B%A9%E9%83%BD%E6%9C%9F%E5%BE%85%E4%B8%80%E5%9C%BA%E8%8B%A6%E5%B0%BD%E7%94%98%E6%9D%A5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>无论大小，每一次抉择，都是一次主动求变，都期待一场苦尽甘来。</p><p>正如每一棵破土的新芽，都带着穿透时光的倔强。</p><p>落子无悔，抉择本身就是向前。</p></blockquote><p>以<strong>南方周末 2022新年献词</strong>来总结我的2021再合适不过。</p><p><strong>2021年，30岁。</strong></p><p><strong>这一年，哭过、笑过、看开过，做了太多的抉择，有对的，也有错的。</strong></p><h2 id="连边"><a href="#连边" class="headerlink" title="连边"></a>连边</h2><p>“连边”一岁了。</p><p><img src="http://mkstatic.lianbian.net/202201042214004.png" alt="名称记录"></p><p>为什么使用这个<strong>昵称</strong>呢？</p><p>我特别喜欢的两个订阅号：连岳 + 九边</p><p>在这里也给你们推荐一下：</p><p>我就各取了他们中的一个字，并且给他赋予了特别的含义。<a href="https://mp.weixin.qq.com/s/o0XBK8sNEnEqMVSE5P6XoQ">点击查看《连边》</a></p><blockquote><p>连接角色边界，过好平凡生活。</p><p>@连边</p></blockquote><h2 id="500粉丝"><a href="#500粉丝" class="headerlink" title="500粉丝"></a>500粉丝</h2><p>在2021年中，我通过写技术文章，获得了500+的订阅号粉丝。</p><p><strong>感谢500+粉丝的认可，感谢500+粉丝的不取关。</strong></p><p>也感谢<strong>田螺、苏三、悟空、程序员库森</strong> 等等等转载我的文章；</p><p>同时感谢<strong>悟空、飞哥、东哥、灰原</strong>五卷王一路上的支持与建议。</p><p><strong>支付宝口令红包：“连边500粉丝专属”</strong></p><h2 id="内容计划"><a href="#内容计划" class="headerlink" title="内容计划"></a>内容计划</h2><p>当前我在<a href="http://mp.weixin.qq.com/mp/homepage?__biz=MzA4MjUzODc0OQ==&hid=2&sn=2004fd1d3f6bca21c4cd4783a6be7fb2&scene=18#wechat_redirect">#整理面试精选#</a></p><p>接下来会整理 …</p><p>我们工作当中，怎么都离不开<strong>Spring</strong>，现在工作当中也用到<strong>Netty</strong>自定义udp协议，由于数据量大，用<strong>Kafka</strong>做消息队列，数据存储直接用的<strong>Elasticsearch</strong>。</p><p>所以在2022年写原创内容，会围绕Spring、Netty、Kafka、ElastaticSearch四块内容以专题形式而展开。</p><p>在每一个专题的开篇，都会有相对应的脉络图来总览，这也符合我的每一篇文章的<strong>文章导读</strong>，类似<strong>专题目录</strong>。</p><h2 id="2022关键词"><a href="#2022关键词" class="headerlink" title="2022关键词"></a>2022关键词</h2><ol><li><strong>全网铺开：</strong>目标很明确，大家百度、谷歌搜索“连边”的时候，搜索到“连边”；</li><li><strong>丰富传递内容形式：</strong>视频是传递内容趋势，看视频学知识是不是一件很愉悦的事情？错，学习从来不是愉悦的事情，和具体的传递内容的方式没有关系，所以我会丰富传递内容形式，那会是什么呢？敬请期待；</li><li><strong>系统化：</strong>原创输出内容会慢慢的专题化，如我现在正在做的#面试精选#，后续的四个专题（Spring、Netty、Kafka、ElastaticSearch）。</li></ol><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>祝大家在2022年，身体健康，万事无bug，遇bug也很笃定。</p><p><strong>记得支付宝口令红包：“连边500粉丝专属”</strong></p><p>我是连边，专注于Java和架构领域，坚持撰写有原理，有实战，有体系的技术文章。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/12/29/idea%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/"/>
      <url>/2021/12/29/idea%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p><a href="https://baijiahao.baidu.com/s?id=1652053359691866831&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1652053359691866831&amp;wfr=spider&amp;for=pc</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/12/29/session%E5%BB%B6%E9%95%BF%E4%BA%86%E6%9C%89%E6%95%88%E6%9C%9F%EF%BC%8C%E5%AF%BC%E8%87%B4%E6%95%B4%E4%B8%AA%E7%B3%BB%E7%BB%9F%E5%87%A0%E4%B9%8E%E7%98%AB%E7%97%AA%E3%80%82/"/>
      <url>/2021/12/29/session%E5%BB%B6%E9%95%BF%E4%BA%86%E6%9C%89%E6%95%88%E6%9C%9F%EF%BC%8C%E5%AF%BC%E8%87%B4%E6%95%B4%E4%B8%AA%E7%B3%BB%E7%BB%9F%E5%87%A0%E4%B9%8E%E7%98%AB%E7%97%AA%E3%80%82/</url>
      
        <content type="html"><![CDATA[<p>需求：</p><p>同事在写日报的时候，长时间无操作，会出现登录过期，导致日报白写了。</p><p>延长session有效期，让其不退出登录；</p><ol><li>修改session的过期时间从原来的30分钟改为12小时；</li><li>session存放在单机redis里边，两个Java应用通过redis共享session；</li><li>在高峰期用的时候（200+用户），系统响应时间平均为4-5秒；</li><li>把session过期时间改回1800秒，重启Java应用，访问速度恢复正常；</li></ol><h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><ol><li>spring:session 出现20000+的key；</li><li></li></ol><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>spring boot session redis</p><p><a href="https://cloud.tencent.com/developer/article/1051364">https://cloud.tencent.com/developer/article/1051364</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/12/23/%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9A%E5%9C%A8SpringBoot%E4%B8%AD%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E5%A1%AB%E5%85%A5pom%E4%BE%9D%E8%B5%96%E5%90%8E%EF%BC%8C%E6%88%91%E4%BB%AC%E5%B0%B1%E8%83%BD%E4%BD%BF%E7%94%A8%E5%85%B6%E7%B1%BB%E5%AF%B9%E8%B1%A1/"/>
      <url>/2021/12/23/%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9A%E5%9C%A8SpringBoot%E4%B8%AD%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E5%A1%AB%E5%85%A5pom%E4%BE%9D%E8%B5%96%E5%90%8E%EF%BC%8C%E6%88%91%E4%BB%AC%E5%B0%B1%E8%83%BD%E4%BD%BF%E7%94%A8%E5%85%B6%E7%B1%BB%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p>大家好，我是连边，这是我的第<code>33</code>篇原创文章。</p><p>今天给大家一个腾讯的真实面试题。</p><p>面试官：“在SpringBoot中开发，为什么我们在填入pom依赖以后，就能使用其对象？”</p><p>今天这篇文章呢，我就来给大家分析这个问题。</p><h2 id="文章导读"><a href="#文章导读" class="headerlink" title="文章导读"></a>文章导读</h2><p><img src="http://mkstatic.lianbian.net/202112282331074.png" alt="自动配置"></p><h2 id="引用流程"><a href="#引用流程" class="headerlink" title="引用流程"></a>引用流程</h2><p>当我们在<code>pom.xml</code>文件中填写引入一个依赖以后，我们的包控制器（maven、gradle）会从<code>settings.xml</code>配置的镜像地址拉取<code>jar</code>到我们本地（idea中下边的刷新按钮执行拉取），这个时候我们看到的现象就是<code>jar</code>拉取到本地不用实例化就能直接拿来用了。</p><p><img src="http://mkstatic.lianbian.net/202112282135069.png" alt="刷新引用"></p><p>面试官就是问这一点，<strong>对象我们没有注入到Spring容器中，怎么就能用了？</strong></p><h2 id="正常的逻辑"><a href="#正常的逻辑" class="headerlink" title="正常的逻辑"></a>正常的逻辑</h2><p>先抛开这个问题，想想我们平常是怎样把一个<code>bean</code>对象（创建）交给Spring容器管理的？</p><p>很容易想到两种方式对不对？通过<code>xml配置</code>或者通过<code>@Configuration注解</code>。</p><p><strong>xml配置创建bean</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>first.Apple<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注解创建bean</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">createRestApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那我们就来想一想，是不是在SpringBoot启动的时候，帮我们把这个事情自动给做了？</p><p>这里也可以想到我们Spring常说到的一句话，<strong>约定大于配置</strong>。</p><p>那我们去找找看看SpringBoot有没有帮我们做这件事情吧～</p><h2 id="从启动过程分析"><a href="#从启动过程分析" class="headerlink" title="从启动过程分析"></a>从启动过程分析</h2><p>如果你还不熟悉SpringBoot启动做了什么，可以看一看我的上一篇文章 - <a href="https://mp.weixin.qq.com/s/RqB_A8_yCRhFA1Vz8W47oA">SpringBoot启动都做了什么？看完就懂了！</a></p><p>我们上篇分析了<code>@SpringBootApplication</code>是一个合成注解，分为</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootConfiguration</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@ComponentScan</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里我们着重来看<code>@EnableAutoConfiguration</code>具体做了什么事情。</p><p>依次点击注解：<code>@SpringBootApplication</code> -&gt; <code>@EnableAutoConfiguration</code> -&gt; <code>@Import(&#123;AutoConfigurationImportSelector.class&#125;)</code></p><p>点击 <code>AutoConfigurationImportSelector.class</code></p><p>这里我用文字来详细描述该过程：</p><ol><li>利用getAutoConfigurationEntry(annotationMetadata);给容器中批量导入一些组件；</li><li>调用List<String> configurations = getCandidateConfigurations(annotationMetadata, attributes)获取到所有需要导入到容器中的配置类；</li><li>利用工厂加载 Map&lt;String, List<String>&gt; loadSpringFactories(@Nullable ClassLoader classLoader)；得到所有的组件；</li><li>从META-INF/spring.factories位置来加载一个文件。默认扫描我们当前系统里面所有META-INF/spring.factories位置的文件，spring-boot-autoconfigure-2.5.6.RELEASE.jar包里面也有META-INF/spring.factories</li></ol><p>虽然我们127个场景的所有自动配置启动的时候默认全部加载。xxxxAutoConfiguration<br>按照条件装配规则（<code>@Conditional</code>），最终会<strong>按需配置</strong>。</p><h2 id="mybatis实例讲解"><a href="#mybatis实例讲解" class="headerlink" title="mybatis实例讲解"></a>mybatis实例讲解</h2><p><img src="http://mkstatic.lianbian.net/202112282323390.png" alt="mybatis-spring-boot-autoconfigure"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token comment">// 按需加载：找得到 SqlSessionFactory.class SqlSessionFactoryBean.class类，我这个自动配置才生效。</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">SqlSessionFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnSingleCandidate</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">MybatisProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">MybatisLanguageDriverAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisAutoConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">sqlSessionFactory</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="autoconfigure从哪里引入的？"><a href="#autoconfigure从哪里引入的？" class="headerlink" title="autoconfigure从哪里引入的？"></a>autoconfigure从哪里引入的？</h2><p>我在整个过程中，就是引入了这个依赖。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- SpringBoot Web容器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>starter</code>的题外话：</strong>可以把<code>starter</code>看作是<code>dependency</code>的套娃。</p><p>spring-boot-starter-web包含的<code>dependency</code>：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>里边还能循环嵌套～，通过一层一层的点击，找到<strong>spring-boot-autoconfigure</strong> 是自动配置</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-autoconfigure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>回到开始面试题的答案，其实有个专业名词，就是<strong>自动配置</strong>。</p><p><strong>由于我们springboot引入了<code>spring-boot-autoconfigure</code>的jar包，而在SpringBoot启动的时候自动配置注解会扫描jar包META-INF/spring.factories位置的文件，然后按需加载（通过注解实现）<code>xxxxxAutoConfiguration</code>，从而通过自动加载来实现我们看到的效果。</strong></p><p>最后在这里特别推荐<strong>尚硅谷雷神</strong>的讲SpringBoot2的视频，讲得很全面也很细致，非常推荐，有时间的朋友，可以系统的，认真的卷一下。</p><p>视频地址：<a href="https://www.bilibili.com/video/BV19K4y1L7MT">https://www.bilibili.com/video/BV19K4y1L7MT</a></p><p>对应的笔记地址：<a href="https://www.yuque.com/atguigu/springboot/qb7hy2">https://www.yuque.com/atguigu/springboot/qb7hy2</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/12/22/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%B8%BA%E4%BB%80%E4%B9%88%E5%96%9C%E6%AC%A2%E5%81%9A%E8%80%81%E5%A5%BD%E4%BA%BA/"/>
      <url>/2021/12/22/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%B8%BA%E4%BB%80%E4%B9%88%E5%96%9C%E6%AC%A2%E5%81%9A%E8%80%81%E5%A5%BD%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/12/20/%E7%88%AC%E5%9D%91%E7%9A%84%E9%AD%84%E5%8A%9B%E6%9D%A5%E8%87%AA%E5%AF%B9%E9%97%AE%E9%A2%98%E6%9C%89%E6%B8%85%E6%99%B0%E7%9A%84%E8%AE%A4%E8%AF%86/"/>
      <url>/2021/12/20/%E7%88%AC%E5%9D%91%E7%9A%84%E9%AD%84%E5%8A%9B%E6%9D%A5%E8%87%AA%E5%AF%B9%E9%97%AE%E9%A2%98%E6%9C%89%E6%B8%85%E6%99%B0%E7%9A%84%E8%AE%A4%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>大家好，我是连边，这是我的第<code>32</code>篇原创文章。</p><p>在<a href="https://mp.weixin.qq.com/s/wf49JCh2oRXYmXRnWl_FuQ">找工作的一些心得</a>发出后，对一些读者还是有帮助的，如果你也正在找工作，可以去看看，也会有收获的。</p><p>在这其中呢，有一个读者加我微信好友，问了一些关于找工作的一些问题来问我，我想着很多人都会遇到类似的问题，特把他抽离出来，写成一篇文章。</p><p>老哥，你好：</p><p>我是在你前两期公众号文章下留言的粉丝（面试心态被打崩的那个），也是秦老师近卫军团群里一员：这次跟老哥打招呼，主要是想请教一些学习和应对面试的问题，真的困扰了我许久，希望老哥能指点一二。</p><p>（连边备注：非计算机专业的本科生，现在已经工作五年。）</p><p>我是从今年3月份正式开始准备的（面试），先是跟着秦老师的进阶课学，期间因为工作和生活的意外，学习进度总被打断，有些部分没学完整，作业没有全部完成；大概是基础太差，课程听下来就觉得信息量很大，最后只能记住知识的脉络，很多细节搞不清；</p><p>时间到了9月份，课程结束了，当时心里就觉得发虚，自觉准备也不行，就又自己重新开始学，一个知识块一个知识块地学。当时也挺心急的，一来想尽快跳槽成功，二来想着好歹学了小半年，基础应该好了很多；结果就想着一周就搞定一个知识块，状态大概就是：<strong>信誓旦旦地定下计划，然后早早地到公司，早上学1个小时，中午学1个小时，晚上下了班又从7点学到10点才回家。</strong></p><p>上述大概就是我这<strong>大半年的日常</strong>，我发觉问题挺多：</p><ol><li>坚持不了多久，一周里总是头几天打满鸡血一样的拼命。后面几天又因为疲惫，不由自主地放慢脚步，但是心里却愈发着急，因为完不成目标；到了周末也不敢好好休息，直到身体受不了，学不动了就颓废一天；然后又开始下一周的循环；</li><li>效果不好，我看似一直在学，但是记不住多少，或者过一个星期就忘记得差不多了；我有做笔记，但是一写起来就容易事无巨细都写上，然后在单个知识点上无限延伸，耗去了很多时间和精力；</li><li>分不清主次，总想眉毛胡子一把抓，知识点在我眼里都是重点，都要掌握，但是，掌握这个词没个标准，到底什么程度才算掌握？</li></ol><p>上周逼着自己出去面试，结果<strong>心态完全被打崩</strong>了，发现自己的<strong>知识体系</strong>不够完整，一面大多问的<strong>八股文</strong>，但我只能答出每个知识块的一半；而且因为不自信，即使能够答出来的题，也因为紧张而磕磕绊绊；过程里心态一直往下掉，最后坠入谷底了，深深地责备自己，牺牲了这么多时间和精力，都花在哪儿去了？</p><p>一不小心说了这么，希望老哥不要嫌我话痨，确实是被面试深深的打击到了。</p><p>我能察觉到自己身上的问题，但是不知道该怎么改正，希望老哥能分享下你的准备过程，我真的希望向你们这些跳槽成功的人学习下经验。</p><p>你的订阅号粉丝 <strong>Gyro</strong></p><p>华丽的分割线——-</p><p>Gyro：</p><p>看你的来信，我仿佛看到了最开始准备面试的自己。</p><blockquote><p>我的经历：</p><p>每天5:30起来学习，晚上1点睡觉。</p><p>我那时候学习什么呢？</p><p>系统的学习Spring，系统的学习JVM；</p><p>想想自己应该可以出去面试了，出去试了试，发现我学习的东西，对面试没啥实质性的作用。</p></blockquote><p><strong>一、 承认问题</strong></p><p>系统学习的东西，真的对面试没用吗？</p><p><strong>不是的，是因为我们学习得不够牢靠，面试的时候要么答出个半吊子，要么就是完全忘记了。</strong></p><p>对看到的、发生的问题，要勇于承认，是什么问题，就内心很直接的承认，如上所述，就是我们<strong>学习得不够牢靠</strong>，不要模棱两可，不要怀疑是因为什么事情打断你了，是学习的方式方法不对，这些都是问题的<strong>客观方面</strong>。只有承认了问题，才能解决问题，不然会陷入无休止的自我怀疑状态；而承认了问题，我们就只需要去解决承认的问题，这里我们就是要解决<strong>怎么样让自己学习牢靠</strong>的问题（后边内容详细说）。</p><p><strong>二、找出最赤裸的动机</strong></p><p>我们去做一件事情，去行动的做一件事情，一定要清晰的知道自己最真实的目标是什么，比如学习秦老师的进阶训练营的动机是什么？</p><p><strong>是让技术能够更上一个层级？还是为了找一份（高薪）好工作？</strong></p><p>有时候，你会觉得这两个动机是一样的，好技术就代表着好工作，其实从<strong>动机</strong>来说，他们是有本质的区别的。</p><p>让技术更上一层楼，是以自我成就感为首要条件，能够很悠闲，很从容淡定的学习技术，而找一份（高薪）好工作，具有更强的功利心。我们很多技术人员不愿意承认自己的功利心，觉得为了功利心高薪“可耻”，故意在外边加上一层是为了追求技术外衣。</p><p>其实为了追求高薪并不可耻，我们学习技术就应该要有一些<strong>“功利心“</strong>，特别是对自己的内心，要勇于承认动机。要让自己对一个<strong>行动的动机有清晰的认识</strong>。</p><p><strong>为了找一份（高薪）好工作</strong>这个动机就非常赤裸，而且也足够有诱惑力。</p><p>接下来一切的行动，我们都应该围绕这个<strong>动机</strong>。</p><p><strong>三、从头再来只是一种自欺欺人</strong></p><p>碰到难点，碰到不懂的地方，就选择从头再来一个一个知识点重新啃？这是一种非常错误的学习方式，我们的大脑都有<strong>惰性</strong>，总喜欢重复简单的内容，不要被这些简单知识点带来的成就感给欺骗了。</p><p>碰到一些难点需要思考的难点，总会有几个错觉：</p><ol><li>自己基础不行（内心OS：不是科班生，之前也没有用到过）；</li><li>自己学习方式不对（内心OS：去找本讲学习方式的书看看，我的学习方式不对）；</li><li>从头再来，可能这个问题我就会理解了（内心OS：第一遍看，看不懂，要不重头看一遍吧）；</li></ol><p>当你有这些想法的时候，要立即清醒过来，不要让这些错觉的想法发酵，来影响你的全盘计划，因为你的动机是找一份（高薪）好工作，有一个潜在的时间要素摆在那里，我们应该直面当前的难点，通过网络搜索，通过问朋友，把他理解透彻，而不是想着打退堂鼓。打退堂鼓的表现包括上边的1、2、3点，特别警惕<strong>从头再来式学习</strong>。</p><p>举几个我在面试过程中碰到的难点：</p><ol><li>java8 hashmap原理懂不？</li><li>redis 跳跃表了解吗？</li><li>了解过MySQL索引原理吗？</li></ol><p>发现了没，其实很多时候，我们遇到的难点都是同一类型的，我这里遇到的就是<strong>数据结构</strong>方面的，我难道短时间内把所有的数据结构和算法全部去重新学习一遍？那是不现实的，只有把这些高频的<strong>针对性</strong>的了解透彻，待将来有时间的时候，再去系统的学习。</p><p><strong>四、立即行动</strong></p><p>时刻记得目标，碰到问题，解决问题，不要把问题发散了，先拿一些不那么重要的面试机会练手，复盘的解决问题，通过几次面试，你会找到信心的，不要想太多，我们行动的动机是解决刚需，是找工作，不是在短时间内成为技术全能王，不要奢望觉得自学把所有的知识都能学牢靠，学到所谓的<strong>准备好</strong>的状态再出去面试。</p><p>我们学习也好，找工作也罢，都是一路上在解决问题，一定要清晰的认识问题，不要有<strong>模棱两可</strong>的界限出现。</p><p>出去面试，被问了盲区，其实就是我们不知道的点，切记不要对自己的付出进行<strong>全盘否定</strong>。</p><p>连边</p><p>祝早日找到满意的工作</p><p>我是连边，专注于Java和架构领域，坚持撰写有原理，有实战，有体系的技术文章。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/12/16/%E5%81%9A%E4%B8%80%E4%BB%B6%E6%9C%89%E6%84%8F%E4%B9%89%E7%9A%84%E4%BA%8B%E6%83%85/"/>
      <url>/2021/12/16/%E5%81%9A%E4%B8%80%E4%BB%B6%E6%9C%89%E6%84%8F%E4%B9%89%E7%9A%84%E4%BA%8B%E6%83%85/</url>
      
        <content type="html"><![CDATA[<p>前一篇写了 <a href="https://mp.weixin.qq.com/s/wf49JCh2oRXYmXRnWl_FuQ">找工作的一些心得</a>，错过的小伙伴可以点进去看看，对于找工作的伙伴来说，是很有帮助的。</p><p>年底和年初，是换工作的高峰期，我想着，能不能通过自己整理一个系列的高频面试题？</p><h2 id="这件事情有意义吗？"><a href="#这件事情有意义吗？" class="headerlink" title="这件事情有意义吗？"></a>这件事情有意义吗？</h2><p>现在互联网的世界，从来不缺面试资料，不管是朋友圈，还是b站大学，都有系列的面试题，面经。难道我推送的面试题有什么特别的？</p><p>思索了<code>5分钟</code>，觉得这个事情，还是有一定的意义的。</p><h3 id="需求的存在"><a href="#需求的存在" class="headerlink" title="需求的存在"></a>需求的存在</h3><p>年底和年初，是找工作的<code>高峰期</code>，确实就有这个需要的存在，如果某个压中了某个面试题，而让某个小伙伴谋求了一份满意的工作，这不就是一件很有意义的事情嘛？</p><p><strong>想想考试的时候考了你前一天复习的题目的那种感觉。</strong></p><h3 id="话题聚焦"><a href="#话题聚焦" class="headerlink" title="话题聚焦"></a>话题聚焦</h3><p>其实这个事情，之前一直在做，包括自己找工作的复盘，也包括转载<code>田螺</code>、<code>苏三</code>的一些常见的面试题，自己也会写一些关于<code>Redis跳跃表</code>的文章。现在想着那些文章都太零散了，没有成体系，也没有很大的<code>“目的性”</code>（只为面试。）。</p><h2 id="执行计划"><a href="#执行计划" class="headerlink" title="执行计划"></a>执行计划</h2><h3 id="推送时间"><a href="#推送时间" class="headerlink" title="推送时间"></a>推送时间</h3><p>每周一、周三、周五早上7点定时推送。</p><h3 id="推送内容"><a href="#推送内容" class="headerlink" title="推送内容"></a>推送内容</h3><p>内容不一定是原创，但是一定还是围绕我们的那个中心，那就是<strong>高频面试题</strong>，文章的质量首先是我自己觉得不错，然后也经过互联网读者的阅读量的肯定。</p><h3 id="聚焦入口"><a href="#聚焦入口" class="headerlink" title="聚焦入口"></a>聚焦入口</h3><p><strong>订阅话题</strong></p><p><strong>菜单入口</strong></p><p><img src="http://mkstatic.lianbian.net/202112170021227.png" alt="菜单入口"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整理成一个系列，定期更新给小伙伴们。</p><p>欢迎你们订阅话题。</p><p>我是连边，专注于Java和架构领域，坚持撰写有原理，有实战，有体系的技术文章。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/12/16/Kafka/"/>
      <url>/2021/12/16/Kafka/</url>
      
        <content type="html"><![CDATA[<h2 id="流派"><a href="#流派" class="headerlink" title="流派"></a>流派</h2><ul><li>有Broker</li></ul><p>重topic、轻topic</p><ul><li>无Broker</li><li></li></ul><h2 id="Kafka-Connect"><a href="#Kafka-Connect" class="headerlink" title="Kafka Connect"></a>Kafka Connect</h2><p><a href="https://blog.csdn.net/laoyang360/article/details/78868806">https://blog.csdn.net/laoyang360/article/details/78868806</a></p><p><a href="https://cloud.tencent.com/developer/article/1362324">https://cloud.tencent.com/developer/article/1362324</a></p><p><a href="https://docs.confluent.io/3.3.0/quickstart.html">https://docs.confluent.io/3.3.0/quickstart.html</a></p><p><a href="https://github.com/confluentinc/kafka-connect-elasticsearch/wiki/FAQ">https://github.com/confluentinc/kafka-connect-elasticsearch/wiki/FAQ</a></p><h2 id="Kafka-Streams"><a href="#Kafka-Streams" class="headerlink" title="Kafka Streams"></a>Kafka Streams</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>找工作的一些心得</title>
      <link href="/2021/12/14/%E6%89%BE%E5%B7%A5%E4%BD%9C%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BF%83%E5%BE%97/"/>
      <url>/2021/12/14/%E6%89%BE%E5%B7%A5%E4%BD%9C%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<p>大家好，我是连边，这是我的第<code>30</code>篇原创文章。</p><p>2021年接近尾声了，回想2021年，一个字：挺<strong>惨</strong>的；</p><p>年中<code>5月份</code>的时候，换了一次工作，公司是做旅游行业的，因受疫情影响，一直拖欠工资，最后没得办法，<code>10月中旬</code>，开始筹备找工作的事情，陆陆续续找了一个月的时间，有种2021年都用来找工作了的错觉。</p><p>找工作其实挺锻炼人的，不管是心态上，还是技术能力上，所以呢，就想着写一篇来回顾下找工作的历程，希望给找工作的小伙伴一些帮助。</p><h2 id="文章导读"><a href="#文章导读" class="headerlink" title="文章导读"></a>文章导读</h2><p><img src="http://mkstatic.lianbian.net/202112150033605.png" alt="找工作的一些心得"></p><h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><p>换工作的动机有很多，我把它抽象为<strong>短期动机</strong>和<strong>长期动机</strong></p><p>短期的动机就很具体，就是工资不高，跳槽一下，工资能有直线性的上升；长期的动机可以包含当前公司前景不大，自己的能力得不到提升，久呆有种浪费时间的感觉。</p><p><strong>我的观点：</strong>年轻的时候，不应该过多的考虑<strong>短期动机</strong>，因为工资与收入都是暂时的，更重要的是要关注能力的提升，程序员这行的很多技术成长，只有在项目中的实战才能锻炼出来的。所以换工作的动机要多多思考长期动机，短期动机，不要过多的考虑。</p><h2 id="心态与目标"><a href="#心态与目标" class="headerlink" title="心态与目标"></a>心态与目标</h2><p>分析了动机之后，再来说一说我们的心态与目标，大家都说找工作难，并不是自己能力不行，而是最开始找工作的时候，<strong>没有把心态建立好，没有设立明确的目标。</strong></p><p>很多时候，我们找工作流程是这样子的：投简历试一试，接了面试电话，约面试时间，进行面试，然后等着通知；同时也应接不暇的面试着多家公司。</p><p>如果在这个过程中，面试上了满意的公司，其实还好，心态不会崩，但是更多的情况是，面得不想面试了，因为面试被虐了，心态也崩了，最后越面越被动，好的情况可能就是从<strong>offer</strong>中矮个子中挑高个子，没有拿到<strong>offer</strong>的就一直耗着，徘徊着。</p><p>其实事情不能这么干，我们在找工作之初，就应该把心理防线构建好，做好打<strong>持久战</strong>的心理准备，然后结合能力各个方面，树立好目标，这里的目标应该是很明确、很具体的，那就是<strong>心仪公司的心仪岗位（内含了薪资）</strong>。多选择一些这种目标，把这些目标拆分优先级，然后去追逐，在最开始面试的时候，找级别最低的目标去练习，找到面试的感觉，然后<strong>复盘</strong>、<strong>往复</strong>。</p><h2 id="时机"><a href="#时机" class="headerlink" title="时机"></a>时机</h2><p>金三银四，金九银十，相信大家都听过。到底什么时候是换工作的好<strong>时机</strong>？</p><p>可以把它分析到具体上，就是<strong>时间</strong> + <strong>机会</strong>。</p><p><strong>我的观点：</strong>金三银四、金九银十是市场的大行情，是正确的，但是找工作应该要做得更具体，比如关注心仪公司的岗位需求，可以通过boss直聘，通过人脉关系来实时<code>监听</code>。然后根据心仪岗位JD，做针对性的项目与技术积累，这就是你的<strong>时机</strong>，<strong>利用有限的时间，做针对性的准备，这就是机会。</strong></p><h2 id="写简历"><a href="#写简历" class="headerlink" title="写简历"></a>写简历</h2><p>分析了以上这些理论，也做好了心理准备，然后才是<strong>开始写简历</strong>。</p><p>简历怎么写，简历的重点是什么？</p><p>简历的重点与本质是<strong>知识点</strong>，知识点分为又分为两个点：<strong>八股文知识点</strong> + <strong>项目知识点</strong>。</p><p><strong>八股文知识点</strong>，就是我们常见的那些面试题，如：HashMap底层原理知道不？MySQL索引为什么能够增加查询速度？了解Redis跳跃表吗？他是一个什么结构？</p><p>面试官一般会根据简历上项目的<strong>知识点</strong>来提<strong>项目知识点</strong>，如：看你简历上做了商城系统，你们商品的库存是怎么控制超卖的？你们在实际开发中，遇到过什么问题吗？</p><p>诸如此类 …</p><p><strong>八股文知识点一定要背，要理解；</strong></p><p><strong>八股文知识点一定要背，要理解；</strong></p><p><strong>八股文知识点一定要背，要理解；</strong></p><p>在简历中<strong>知识点</strong>不要写长篇大论，技术官过简历也没有那么多时间去看你们的文字，长篇大论等实际面试的时候再去和面试官深入讲解，简历上把<strong>知识点</strong>写具体，写清楚就行，让技术官看一眼你的简历，就知道你精通什么技术栈，使用什么技术栈，了解什么技术栈，那么你的简历，就是一份合格的简历，它把要表达的知识点表达出来了，我们要把更多的精力来填充我们的<strong>知识点</strong>，不要清一色的都是<code>Spring Boot</code>、<code>MySQL</code>、<code>...</code>，如果觉得自己的项目没有<strong>亮点</strong>，可以去找一些相关的项目源码学习来填充自己的<strong>知识点</strong>。</p><p>针对特别心仪的岗位，可以单独制作简历，根据岗位需求侧重点描述<strong>知识点</strong>。</p><h2 id="投简历"><a href="#投简历" class="headerlink" title="投简历"></a>投简历</h2><p><strong>不要海投</strong></p><p><strong>不要海投</strong></p><p><strong>不要海投</strong></p><p>投简历的优先级应该是这样子的（我自己总结的，不保证正确，具体情况，具体分析）</p><p><strong>内推 &gt; 甄选目标公司 &gt;  猎头</strong></p><h2 id="面试流程"><a href="#面试流程" class="headerlink" title="面试流程"></a>面试流程</h2><h3 id="HR了解基本情况"><a href="#HR了解基本情况" class="headerlink" title="HR了解基本情况"></a>HR了解基本情况</h3><p>HR电话是会先来了解基本情况的，会问题一些常见的问题。</p><p>为什么离职？</p><p>可以说一些自己的职业发展之类的，切记一点，<strong>任何时候都不要说公司的坏话</strong>，包括被公司拖欠工资什么的，你也要能体会公司的难处。</p><p>期望薪资是多少？</p><p>这一点要在设立目标的时候就想好，在回答的时候，不要扭扭捏捏，清晰自信的说出自己的期望薪资。</p><p><strong>要预留给HR砍价的空间，毕竟人事也要实现其价值。</strong></p><p><strong>要预留给HR砍价的空间，毕竟人事也要实现其价值。</strong></p><p><strong>要预留给HR砍价的空间，毕竟人事也要实现其价值。</strong></p><p>现在薪资多少？</p><p>大多数情况，如实说就行，记得把所有的福利待遇都说出来。</p><p>怎么样谈工资？这里放一个军哥的视频吧，讲得挺好的。</p><h3 id="技术面试"><a href="#技术面试" class="headerlink" title="技术面试"></a>技术面试</h3><p>如果看了简历那小节，针对简历上的知识点做了准备，其实面试通过不难的。</p><p>记得每次面试之后要</p><p><strong>记得复盘</strong></p><p><strong>记得复盘</strong></p><p><strong>记得复盘</strong></p><p>哪些问题答得好，哪些问题需要加强，哪些问题是知识盲区。</p><h2 id="offer怎么选"><a href="#offer怎么选" class="headerlink" title="offer怎么选"></a>offer怎么选</h2><p>一个哥们儿跟说了句话，<strong>去那家薪资高的公司，做好2年不涨工资的心态去选择。</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇文章到这里就写完了，整体的总结，就是我文章中<strong>写了三遍的重点</strong>，说是血与泪的经历也不为过。</p><p>也欢迎加我微信跟我交流，最后呢，希望每个伙伴都能找到好工作。</p><p>我是连边，专注于Java和架构领域，坚持撰写有原理，有实战，有体系的技术文章。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/12/08/ElasticSearch%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95/"/>
      <url>/2021/12/08/ElasticSearch%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>4000条数据每秒的存储系统，怎么设计？</title>
      <link href="/2021/12/06/4000%E6%9D%A1%E6%95%B0%E6%8D%AE%E6%AF%8F%E7%A7%92%E7%9A%84%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F%EF%BC%8C%E6%80%8E%E4%B9%88%E8%AE%BE%E8%AE%A1%EF%BC%9F/"/>
      <url>/2021/12/06/4000%E6%9D%A1%E6%95%B0%E6%8D%AE%E6%AF%8F%E7%A7%92%E7%9A%84%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F%EF%BC%8C%E6%80%8E%E4%B9%88%E8%AE%BE%E8%AE%A1%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<ol><li>数据怎么来？</li><li>经过哪些路径？<ol><li>nginx</li><li>Java</li><li>kafka</li><li>mongo or es</li></ol></li><li>数据特点<ol><li>查询多？修改多？</li></ol></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win部署多个MySQL数据库</title>
      <link href="/2021/12/06/Win%E4%B8%8B%E9%83%A8%E7%BD%B2%E5%A4%9A%E4%B8%AAMySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E4%BE%8B/"/>
      <url>/2021/12/06/Win%E4%B8%8B%E9%83%A8%E7%BD%B2%E5%A4%9A%E4%B8%AAMySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>大家好，我是连边，这是我的第<code>29</code>篇原创文章。</p><p>当你们考虑项目并发的时候，我在部署环境，当你们在纠结使用<code>ArrayList</code>还是<code>LinkedArrayList</code>的时候，我还是在部署环境。所以啊，<strong>技术不止境，我在部环境。</strong></p><p>今天这篇文章缕一下在同一台服务器上部署多个<code>MySQL</code>实例的操作过程，就是一篇工作手记，没有高深的内容，希望需要用到的朋友，按照这篇文章操作，能够<strong>不踩坑</strong>的把实例部署好。</p><h2 id="文章导读"><a href="#文章导读" class="headerlink" title="文章导读"></a>文章导读</h2><p><img src="http://mkstatic.lianbian.net/202112062123673.png" alt="Win下部署多个MySQL数据库实例"></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>我这里以安装<code>5.7.17</code>版本，可以到官网下载对应的版本。</p><p><strong>如果配置了<code>mysql</code>相关的环境变量，请删除原来的环境变量，再进行安装。</strong></p><h2 id="解压-amp-amp-目录"><a href="#解压-amp-amp-目录" class="headerlink" title="解压&amp;&amp;目录"></a>解压&amp;&amp;目录</h2><p>解压之后，目录如下：</p><p><img src="http://mkstatic.lianbian.net/202112061915202.png" alt="MySQL目录"></p><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><h3 id="重命名解压文件夹"><a href="#重命名解压文件夹" class="headerlink" title="重命名解压文件夹"></a>重命名解压文件夹</h3><p>把<code>mysql5.7.17-winx64</code>重命名成<code>mysql5.7.17-3308</code></p><h3 id="配置端口"><a href="#配置端口" class="headerlink" title="配置端口"></a>配置端口</h3><p><strong>切换到解压文件夹</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd softs&#x2F;mysql5.7.17-3308<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到<code>my-default.ini</code>并重命名配置文件：<code>my-default.ini -&gt; my.ini</code></p><p>配置端口节点：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># prot &#x3D; .....prot &#x3D; 3306<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="http://mkstatic.lianbian.net/202112061946359.png" alt="修改端口"></p><h3 id="以管理员方式运行命令行窗口"><a href="#以管理员方式运行命令行窗口" class="headerlink" title="以管理员方式运行命令行窗口"></a>以<strong>管理员</strong>方式运行命令行窗口</h3><p><strong>如果配置了<code>mysql</code>相关的环境变量，请删除原来的环境变量，再进行安装。</strong></p><p>也可以使用快捷键，<code>Win + R</code>，！！注意要以<strong>管理员的身份运行命令行窗口</strong></p><p><strong>进入到 bin 目录</strong></p><p><code>cd bin</code></p><p><strong>初始化 | 会在数据库的根目录上创建 data 文件夹</strong></p><p><code>mysqld --initialize --console</code></p><p><strong>查看默认密码</strong></p><p><img src="http://mkstatic.lianbian.net/202112061950528.png" alt="默认密码"></p><p><strong>安装服务 | mysqld –install 服务名称</strong></p><p><code>mysqld --install MySQL5.7-3308</code></p><p><strong>启动服务</strong></p><p><code>net start MySQL5.7-3308</code></p><p><img src="http://mkstatic.lianbian.net/202112061958557.png" alt="注册&amp;启动服务"></p><p>至此，如果一切正常，其实就是这三步，就安装好了一个MySQL数据库实例。</p><p><strong>查看服务</strong></p><p>命令行执行：<code>services.msc</code></p><p><img src="http://mkstatic.lianbian.net/202112062015514.png" alt="查看服务"></p><p>我们接着测试该数据库的其可用性。</p><h3 id="测试链接"><a href="#测试链接" class="headerlink" title="测试链接"></a>测试链接</h3><p>命令行窗口和客户端工具连接都可以。</p><p><code>mysql -uroot -P3308 -p</code></p><p>密码输入在<code>mysqld --initialize --console</code>步骤生成的密码。</p><p><img src="http://mkstatic.lianbian.net/202112062117241.png" alt="默认密码"></p><p>如果用客户端连接这个时候会有一个警告：<code>Your password has expired. To log in you must  change it using a client that supports expired passwords.</code></p><p>翻译过来大概意思就是：“您的密码已过期。要登录，您必须使用支持过期密码的客户端更改它”</p><p>解决办法：root权限登录mysql：<code>mysql -uroot -p</code></p><p>登录成功后修改密码：<code>set password=password(&#39;root&#39;);</code></p><h3 id="安装第二个数据库"><a href="#安装第二个数据库" class="headerlink" title="安装第二个数据库"></a>安装第二个数据库</h3><p>重复以上的步骤，保证端口不被占用，不重复就可以了。</p><p>这里不再赘述，有问题的可以欢迎加我微信交流。</p><h3 id="一些常用的其他命令"><a href="#一些常用的其他命令" class="headerlink" title="一些常用的其他命令"></a>一些常用的其他命令</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">## 根据端口号找PIDnetstat -aon|findstr &quot;3308&quot;## 查看指定PIDtasklist|findstr &quot;9088&quot;## 停止服务net stop MySQL5.7-3306## 卸载服务（只有在服务停止的时候才能卸载）mysqld remove MySQL5.7-3306<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一篇手记，没有啥好总结的，就是希望大家伙少踩坑。</p><p>我是连边，专注于Java和架构领域，坚持撰写有原理，有实战，有体系的技术文章。</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不重启服务进行功能开发，热部署</title>
      <link href="/2021/12/03/%E4%B8%8D%E9%87%8D%E5%90%AF%E6%9C%8D%E5%8A%A1%E8%BF%9B%E8%A1%8C%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91/"/>
      <url>/2021/12/03/%E4%B8%8D%E9%87%8D%E5%90%AF%E6%9C%8D%E5%8A%A1%E8%BF%9B%E8%A1%8C%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>大家好，我是连边，这是我的第<code>28</code>篇原创文章。</p><p>之前在写<a href="https://mp.weixin.qq.com/s/Lw9kQZEl5eTMsKxNSNMVww">不重启JVM替换掉已经加载的类</a>，有读者朋友要我写一篇关于开发环境不重启服务也能进行功能开发的文章，我呢，最近接手了一个项目，启动项目服务需要<code>10分钟</code>，在项目启动速度无法优化的前提下，为了节约时间摸鱼，为了能敲更多的<code>bug</code>，为了能掉更多的头发，所以呢，机缘巧合，开整。</p><h2 id="文章导读"><a href="#文章导读" class="headerlink" title="文章导读"></a>文章导读</h2><p><img src="http://mkstatic.lianbian.net/202112012347413.png" alt="不重启服务进行功能开发"></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p><code>Spring Boot 2.3.2 RELEASE</code> +<code>Mybatis-plus 3.2.2</code></p><p>不要看着这个环境不适合就跑了，不要怕，是通用的，只是我是在这种环境下写的<code>JavaHotDevbugTool</code>这个工具demo。</p><h2 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h2><p>我们在日常开发过程中，改得最多的无非是<code>控制器</code>、<code>接口层</code>，还是就是<code>mapper xml</code>；不管我们修改一个字母，还是更细微的改动，都需要重启服务，这个重启是重启整个<code>Spring</code>容器，粒度相当大，当我们应用包含了较多的<code>bean</code>的时候，重启的时候还是挺久的，像我现在接手的这个项目，就是<code>10分钟</code>，在开发调试阶段，这个时间是无法接受的，自然的就想着从两方面下手，一种方式是缩短启动时间，还有一种就是热部署（在不重启服务的前提下进行开发）。我选择了后者，因为前者需要对业务太大入侵性太大。</p><p><strong>而热部署就很容易想到能不能增量部署，即没有变更的文件，我们就不去重新加载，只加载有变更的文件。</strong></p><p>想想我们日常开发当中，改得最多的就是java文件和mybatis的xml文件，所以这篇文章就是要解决两个问题，<strong>java文件和xml文件的热更新问题</strong>。</p><h2 id="Java文件热更新"><a href="#Java文件热更新" class="headerlink" title="Java文件热更新"></a>Java文件热更新</h2><h3 id="DevTools介绍"><a href="#DevTools介绍" class="headerlink" title="DevTools介绍"></a>DevTools介绍</h3><p>spring为开发者提供了一个名为<code>spring-boot-devtools</code>的模块来使Spring Boot应用支持热部署，提高开发者的开发效率，无需手动重启Spring Boot应用。原理是使用了两个<code>ClassLoader</code>，一个<code>Classloader</code>加载那些不会改变的类（第三方Jar包），另一个<code>ClassLoader</code>加载会更改的类，称为<code>restart ClassLoader</code>,这样在有代码更改的时候，原来的<code>restart ClassLoader</code> 被丢弃，重新创建一个<code>restart ClassLoader</code>，由于需要加载的类相比较少，所以实现了较快的重启时间。</p><h3 id="引用包"><a href="#引用包" class="headerlink" title="引用包"></a>引用包</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://mkstatic.lianbian.net/202111251943777.png" alt="配置pom并引用"></p><h3 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h3><p><img src="http://mkstatic.lianbian.net/202111251949436.png" alt="重启服务"></p><h3 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h3><p><strong>手动编译</strong>快捷键编译（ctrl + f9），网络上有很多帖子，说<code>idea</code>有一个保存的时候，自动编译功能，我几番设置没有成功，后来选择了手动编译，一个字：稳。</p><p><strong>编译的本质</strong>可以简单的理解为是重新生成我们target文件下边的.class文件。</p><p><img src="http://mkstatic.lianbian.net/202111251940342.png" alt="编译进度条"></p><p>如果有类热更新了，会有相应的提示，如下图：</p><p><img src="http://mkstatic.lianbian.net/202111251950958.png" alt="热更新代码"></p><p><img src="http://mkstatic.lianbian.net/202111251951055.png" alt="reload成功提示"></p><p>可以更深入的进行打断点进行调试，都是有效果的，这里需要注意的一点：</p><p><strong>不是java文件的所有地方都有效果，像新增文件、修改注解参数之类的是无效果的，和他的加载方式有关系，新增控制器什么的，只能重启服务。</strong></p><p>解决了Java文件的热更新，我们继续看另外一个高频更改的<code>mapper xml</code>文件的热更新。</p><h2 id="Mapper-XML文件热更新"><a href="#Mapper-XML文件热更新" class="headerlink" title="Mapper XML文件热更新"></a>Mapper XML文件热更新</h2><p>在<code>Mybatis</code>在<code>3.0</code>以前的版本，有一个<code>MybatisMapperRefresh</code>类，但是在<code>3.0</code>的版本移除改功能了，这也是为什么下边的配置无效的原因。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">mybatis-plus:  global-config:    #刷新mapper 调试神器    refresh-mapper: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我使用的<code>3.3.2</code>版本，因为我是在<code>spring boot</code>环境中使用，所以加上如下引用：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><ol><li>找到所有的<code>mapper xml</code>路径；</li><li>启动线程监听；</li><li>重新加载<code>xml</code>文件；</li></ol><h3 id="XmlMapperReload类"><a href="#XmlMapperReload类" class="headerlink" title="XmlMapperReload类"></a>XmlMapperReload类</h3><p><strong>定义</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// XmlMapperReload 类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XmlMapperReload</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>构造方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// XmlMapperReload 构造方法</span><span class="token comment">// mapperLocations：mapper xml 路径</span><span class="token comment">// checkSeconds 多久检测一次</span><span class="token comment">// enabled 是否开启</span><span class="token keyword">public</span> <span class="token class-name">XmlMapperReload</span><span class="token punctuation">(</span><span class="token class-name">Resource</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mapperLocations<span class="token punctuation">,</span> <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory<span class="token punctuation">,</span><span class="token keyword">int</span> checkSeconds<span class="token punctuation">,</span> <span class="token keyword">boolean</span> enabled<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>开启监听</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="XmlMapperReload-Bean-Config"><a href="#XmlMapperReload-Bean-Config" class="headerlink" title="XmlMapperReload Bean Config"></a>XmlMapperReload Bean Config</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XmlMapperReloadConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">XmlMapperReload</span> <span class="token function">xmlMapperReload</span><span class="token punctuation">(</span><span class="token class-name">SqlSessionFactory</span> sqlSessionFactory<span class="token punctuation">,</span> <span class="token class-name">MybatisPlusProperties</span> mybatisPlusProperties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">XmlMapperReload</span><span class="token punctuation">(</span>mybatisPlusProperties<span class="token punctuation">.</span><span class="token function">resolveMapperLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sqlSessionFactory<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>完整的源码，放在github上边了，可以拿来直接跑起来的项目，连接地址：</strong></p><p><a href="https://github.com/lianbian/JavaHotDevbugTool">https://github.com/lianbian/JavaHotDevbugTool</a></p><h3 id="重启服务-1"><a href="#重启服务-1" class="headerlink" title="重启服务"></a>重启服务</h3><p><img src="http://mkstatic.lianbian.net/202112012325135.png" alt="重启服务"></p><h3 id="测试效果-1"><a href="#测试效果-1" class="headerlink" title="测试效果"></a>测试效果</h3><p><img src="http://mkstatic.lianbian.net/202112012325174.png" alt="开始1条记录"></p><p><img src="http://mkstatic.lianbian.net/202112012326934.png" alt="删除limit 1"></p><p><img src="http://mkstatic.lianbian.net/202112012327419.png" alt="手动编译"></p><p><img src="http://mkstatic.lianbian.net/202112012327652.png" alt="5条记录全部显示"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇文章写到这里就完成了，几个注意点：</p><ol><li>很多时候是因为idea自动编译没生效导致热部署失败，采用<strong>手动编译</strong>方式，也挺好的；</li><li>完整的简洁的项目代码放在了github上边（<a href="https://github.com/lianbian/JavaHotDevbugTool%EF%BC%89%EF%BC%8C%E9%9C%80%E8%A6%81%E7%9A%84%E8%87%AA%E5%8F%96%EF%BC%8C%E6%8B%BF%E7%9D%80%E5%B0%B1%E8%83%BD%E8%B7%91%E8%B5%B7%E6%9D%A5%E7%9A%84%E9%A1%B9%E7%9B%AE%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E6%96%87%E6%9C%AB%E7%9A%84%E6%9F%A5%E7%9C%8B%E5%8E%9F%E6%96%87%EF%BC%9B">https://github.com/lianbian/JavaHotDevbugTool），需要的自取，拿着就能跑起来的项目，也可以文末的查看原文；</a></li><li>最后，就是<strong>注意细节</strong>。</li></ol><p>衷心感谢每一位认真读文章的人，我是连边，专注于Java和架构领域，坚持撰写有原理，有实战，有体系的技术文章。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/12/01/windows%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E8%A2%AB%E9%81%97%E5%BF%98/"/>
      <url>/2021/12/01/windows%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E8%A2%AB%E9%81%97%E5%BF%98/</url>
      
        <content type="html"><![CDATA[<ol><li>部署本地的git服务<ol><li>git config  –global user.name “xx”</li><li>git config –global user.email <a href="mailto:&#120;&#x78;&#x78;&#x40;&#x31;&#54;&#x33;&#x2e;&#x63;&#x6f;&#x6d;">&#120;&#x78;&#x78;&#x40;&#x31;&#54;&#x33;&#x2e;&#x63;&#x6f;&#x6d;</a></li></ol></li><li>优化屎山的最好方式</li><li>禅道apache项目</li><li>工程机械的架子</li><li>从哪几个方面考虑<ol><li>成本</li><li>应用（适用）</li></ol></li><li>简单</li><li>windows下常用的命令行</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>从数据存储角度分析Redis为何这么快？</title>
      <link href="/2021/11/12/Redis/%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E8%A7%92%E5%BA%A6%E5%88%86%E6%9E%90Redis%E4%B8%BA%E4%BD%95%E8%BF%99%E4%B9%88%E5%BF%AB%EF%BC%9F/"/>
      <url>/2021/11/12/Redis/%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E8%A7%92%E5%BA%A6%E5%88%86%E6%9E%90Redis%E4%B8%BA%E4%BD%95%E8%BF%99%E4%B9%88%E5%BF%AB%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p>大家好，我是连边。</p><p>推荐一篇Redis相关的硬核文章，文章来自码甲虫，文章结构和排版连边略有修改。</p><p>和之前推荐的田螺的文章<a href="https://mp.weixin.qq.com/s/msGfc_gCiG-yzx0-Ex8Ojw">田螺Redis为什么这么快？</a>区别在于田螺从各个角度说明快的原因，而这篇文章是从数据存储（数据结构）的角度来分析Redis为何这么快的原因。</p><p>以下是原文：</p><h2 id="文章导读"><a href="#文章导读" class="headerlink" title="文章导读"></a>文章导读</h2><p><img src="http://mkstatic.lianbian.net/202111122049909.png" alt="文章导读"></p><h2 id="简介和应用"><a href="#简介和应用" class="headerlink" title="简介和应用"></a>简介和应用</h2><p>Redis是一个由ANSI C语言编写，性能优秀、支持网络、可持久化的K-K内存数据库<strong>，</strong>并提供多种语言的API。</p><p>它常用的类型主要是 <code>String、List、Hash、Set、ZSet</code> 这5种。</p><p> <img src="http://mkstatic.lianbian.net/202111122022196.png" alt="Redis常见的数据类型"></p><p>Redis在互联网公司一般有以下应用：</p><ul><li>String：缓存、限流、计数器、分布式锁、分布式Session</li><li>Hash：存储用户信息、用户主页访问量、组合查询</li><li>List：微博关注人时间轴列表、简单队列</li><li>Set：赞、踩、标签、好友关系</li><li>Zset：排行榜</li></ul><p>再比如电商在大促销时，会用一些特殊的设计来保证系统稳定，扣减库存可以考虑如下设计：               <img src="http://mkstatic.lianbian.net/202111122022195.png" alt="img"></p><p>上图中，直接在Redis中扣减库存，记录日志后通过Worker同步到数据库，在设计同步Worker时需要考虑并发处理和重复处理的问题。</p><p>通过上面的应用场景可以看出Redis是非常高效和稳定的，那Redis底层是如何实现的呢？</p><h2 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h2><h3 id="redisObject"><a href="#redisObject" class="headerlink" title="redisObject"></a>redisObject</h3><p>Redis的对象<code>redisObject</code></p><p>当我们执行<code>set hello world</code>命令时，会有以下数据模型：</p><p>​             <img src="http://mkstatic.lianbian.net/202111122022207.png" alt="img"></p><ul><li>dictEntry：Redis给每个key-value键值对分配一个dictEntry，里面有着key和val的指针，next指向下一个dictEntry形成链表，这个指针可以将多个哈希值相同的键值对链接在一起，由此来解决哈希冲突问题(链地址法)。</li><li>sds：键key“hello”是以<code>SDS（简单动态字符串）</code>存储，后面详细介绍。</li><li>redisObject：值val “world” 存储在redisObject中。实际上，redis常用5中类型都是以redisObject来存储的；而redisObject中的type字段指明了Value对象的类型，ptr字段则指向对象所在的地址。</li></ul><p>redisObject对象非常重要，Redis对象的类型、内部编码、内存回收、共享对象等功能，都需要redisObject支持。这样设计的好处是：<strong>可以针对不同的使用场景，对5种常用类型设置多种不同的数据结构实现，从而优化对象在不同场景下的使用效率。</strong></p><p>无论是dictEntry对象，还是redisObject、SDS对象，都需要<strong>内存分配器（如jemalloc）</strong>分配内存进行存储。jemalloc作为Redis的默认内存分配器，在减小内存碎片方面做的相对比较好。</p><p>比如jemalloc在64位系统中，将内存空间划分为小、大、巨大三个范围；每个范围内又划分了许多小的内存块单位；当Redis存储数据时，会选择大小最合适的内存块进行存储。</p><p>前面说过，Redis每个对象由一个redisObject结构表示，它的ptr指针指向底层实现的数据结构，而数据结构由encoding属性决定。比如我们执行以下命令得到存储“hello”对应的编码：</p><p><img src="http://mkstatic.lianbian.net/202111122022223.png" alt="img"></p><p>redis所有的数据结构类型如下（重要，后面会用到）：</p><p><img src="http://mkstatic.lianbian.net/202111122022436.png" alt="redis所有的数据结构类型"></p><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>字符串对象的底层实现可以是int、raw、embstr（上面的表对应有名称介绍）。embstr编码是通过调用一次内存分配函数来分配一块连续的空间，而raw需要调用两次<strong>。</strong></p><p><img src="http://mkstatic.lianbian.net/202111122022489.png" alt="raw调用次数"></p><p><strong>int &amp; raw &amp; SDS</strong>：</p><p>int编码字符串对象和embstr编码字符串对象在一定条件下会转化为raw编码字符串对象。embstr：&lt;=39字节的字符串。int：8个字节的长整型。raw：大于39个字节的字符串。</p><p>简单动态字符串（SDS），这种结构更像C++的String或者Java的ArrayList<Character>，长度动态可变：</p><pre class="line-numbers language-none"><code class="language-none">struct sdshdr &#123;    &#x2F;&#x2F; buf 中已占用空间的长度    int len;    &#x2F;&#x2F; buf 中剩余可用空间的长度    int free;    &#x2F;&#x2F; 数据空间    char buf[]; &#x2F;&#x2F; ’\0’空字符结尾&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>get：sdsrange—O(n)</li><li>set：sdscpy—O(n)</li><li>create：sdsnew—O(1)</li><li>len：sdslen—O(1)</li></ul><p><strong>常数复杂度获取字符串长度</strong>：因为SDS在len属性中记录了长度，所以获取一个SDS长度时间复杂度仅为O(1)。</p><p><strong>预空间分配</strong>：如果对一个SDS进行修改，分为一下两种情况：</p><ul><li>SDS长度（len的值）小于1MB，那么程序将分配和len属性同样大小的未使用空间，这时free和len属性值相同。举个例子，SDS的len将变成15字节，则程序也会分配15字节的未使用空间，SDS的buf数组的实际长度变成15+15+1=31字节（额外一个字节用户保存空字符）。</li><li>SDS长度（len的值）大于等于1MB，程序会分配1MB的未使用空间。比如进行修改之后，SDS的len变成30MB，那么它的实际长度是30MB+1MB+1byte。</li></ul><p><strong>惰性释放空间</strong>：当执行sdstrim（截取字符串）之后，SDS不会立马释放多出来的空间，如果下次再进行拼接字符串操作，且拼接的没有刚才释放的空间大，则那些未使用的空间就会排上用场。通过惰性释放空间避免了特定情况下操作字符串的内存重新分配操作。</p><p><strong>杜绝缓冲区溢出</strong>：使用C字符串的操作时，如果字符串长度增加（如strcat操作）而忘记重新分配内存，很容易造成缓冲区的溢出；而SDS由于记录了长度，相应的操作在可能造成缓冲区溢出时会自动重新分配内存，杜绝了缓冲区溢出。</p><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>List对象的底层实现是quicklist（快速列表，是ziplist 压缩列表 和linkedlist 双端链表 的组合）。Redis中的列表支持两端插入和弹出，并可以获得指定位置（或范围）的元素，可以充当数组、队列、栈等。</p><pre class="line-numbers language-none"><code class="language-none">typedef struct listNode &#123;     &#x2F;&#x2F; 前置节点    struct listNode *prev;    &#x2F;&#x2F; 后置节点    struct listNode *next;    &#x2F;&#x2F; 节点的值    void *value; &#125; listNode; typedef struct list &#123;     &#x2F;&#x2F; 表头节点    listNode *head;    &#x2F;&#x2F; 表尾节点    listNode *tail;    &#x2F;&#x2F; 节点值复制函数    void *(*dup)(void *ptr);    &#x2F;&#x2F; 节点值释放函数    void (*free)(void *ptr);     &#x2F;&#x2F; 节点值对比函数    int (*match)(void *ptr, void *key);     &#x2F;&#x2F; 链表所包含的节点数量    unsigned long len; &#125; list;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>rpush: listAddNodeHead —O(1)</li><li>lpush: listAddNodeTail —O(1)</li><li>push:listInsertNode —O(1)</li><li>index : listIndex —O(N)</li><li>pop:ListFirst/listLast —O(1)</li><li>llen:listLength —O(N)</li></ul><h4 id="linkedlist（双端链表）"><a href="#linkedlist（双端链表）" class="headerlink" title="linkedlist（双端链表）"></a>linkedlist（双端链表）</h4><p> 此结构比较像Java的LinkedList，有兴趣可以阅读一下源码。</p><p>   <img src="http://mkstatic.lianbian.net/202111122022493.png" alt="双端链表"></p><p>从图中可以看出Redis的linkedlist双端链表有以下特性：节点带有prev、next指针、head指针和tail指针，获取前置节点、后置节点、表头节点和表尾节点的复杂度都是O（1）。len属性获取节点数量也为O（1）。</p><p>与双端链表相比，压缩列表可以节省内存空间，但是进行修改或增删操作时，复杂度较高；因此当节点数量较少时，可以使用压缩列表；但是节点数量多时，还是使用双端链表划算。</p><h4 id="ziplist（压缩列表）"><a href="#ziplist（压缩列表）" class="headerlink" title="ziplist（压缩列表）"></a>ziplist（压缩列表）</h4><p>当一个列表键只包含少量列表项，且是小整数值或长度比较短的字符串时，那么redis就使用ziplist（压缩列表）来做列表键的底层实现。</p><p>​       <img src="http://mkstatic.lianbian.net/202111122022595.png" alt="老版本列表键"></p><p>ziplist是Redis为了节约内存而开发的，是由一系列特殊编码的连续内存块（而不是像双端链表一样每个节点是指针）组成的顺序型数据结构；具体结构相对比较复杂，有兴趣读者可以看 Redis 哈希结构内存模型剖析。在新版本中list链表使用 quicklist 代替了 ziplist和 linkedlist：</p><p><img src="http://mkstatic.lianbian.net/202111122022689.png" alt="quicklist 代替了 ziplist和 linkedlist"></p><p>quickList 是 zipList 和 linkedList 的混合体。它将 linkedList 按段切分，每一段使用 zipList 来紧凑存储，多个 zipList 之间使用双向指针串接起来。因为链表的附加空间相对太高，prev 和 next 指针就要占去 16 个字节 (64bit 系统的指针是 8 个字节)，另外每个节点的内存都是单独分配，会加剧内存的碎片化，影响内存管理效率。</p><p><img src="http://mkstatic.lianbian.net/202111122022709.png" alt="quickList"></p><p>quicklist 默认的压缩深度是 0，也就是不压缩。为了支持快速的 push/pop 操作，quicklist 的首尾两个 ziplist 不压缩，此时深度就是 1。为了进一步节约空间，Redis 还会对 ziplist 进行压缩存储，使用 LZF 算法压缩。</p><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><p>Hash对象的底层实现可以是ziplist（压缩列表）或者hashtable（字典或者也叫哈希表）。</p><p><img src="http://mkstatic.lianbian.net/202111122022786.png" alt="Hash"></p><p>Hash对象只有同时满足下面两个条件时，才会使用ziplist（压缩列表）：1.哈希中元素数量小于512个；2.哈希中所有键值对的键和值字符串长度都小于64字节。</p><p>hashtable哈希表可以实现O(1)复杂度的读写操作，因此效率很高。源码如下：</p><pre class="line-numbers language-none"><code class="language-none">typedef struct dict &#123;    &#x2F;&#x2F; 类型特定函数    dictType *type;     &#x2F;&#x2F; 私有数据    void *privdata;     &#x2F;&#x2F; 哈希表    dictht ht[2];    &#x2F;&#x2F; rehash 索引    &#x2F;&#x2F; 当 rehash 不在进行时，值为 -1    int rehashidx; &#x2F;* rehashing not in progress if rehashidx &#x3D;&#x3D; -1 *&#x2F;     &#x2F;&#x2F; 目前正在运行的安全迭代器的数量    int iterators; &#x2F;* number of iterators currently running *&#x2F; &#125; dict; typedef struct dictht &#123;    &#x2F;&#x2F; 哈希表数组    dictEntry **table;     &#x2F;&#x2F; 哈希表大小    unsigned long size;    &#x2F;&#x2F; 哈希表大小掩码，用于计算索引值    &#x2F;&#x2F; 总是等于 size - 1    unsigned long sizemask;    &#x2F;&#x2F; 该哈希表已有节点的数量    unsigned long used;&#125; dictht;typedef struct dictEntry &#123;    void *key;    union &#123;void *val;uint64_t u64;int64_t s64;&#125; v;    &#x2F;&#x2F; 指向下个哈希表节点，形成链表    struct dictEntry *next; &#125; dictEntry; typedef struct dictType &#123;     &#x2F;&#x2F; 计算哈希值的函数    unsigned int (*hashFunction)(const void *key);     &#x2F;&#x2F; 复制键的函数    void *(*keyDup)(void *privdata, const void *key);     &#x2F;&#x2F; 复制值的函数    void *(*valDup)(void *privdata, const void *obj);     &#x2F;&#x2F; 对比键的函数    int (*keyCompare)(void *privdata, const void *key1, const void *key2);    &#x2F;&#x2F; 销毁键的函数    void (*keyDestructor)(void *privdata, void *key);    &#x2F;&#x2F; 销毁值的函数    void (*valDestructor)(void *privdata, void *obj);&#125; dictType;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面源码可以简化成如下结构：               </p><p><img src="http://mkstatic.lianbian.net/202111122022865.png" alt="hashtable简图"></p><p>这个结构类似于JDK7以前的HashMap&lt;String,Object&gt;，当有两个或以上的键被分配到哈希数组的同一个索引上时，会产生哈希冲突。Redis也使用链地址法来解决键冲突。即每个哈希表节点都有一个next指针，多个哈希表节点用next指针构成一个单项链表，链地址法就是将相同hash值的对象组织成一个链表放在hash值对应的槽位。</p><p>Redis中的字典使用hashtable作为底层实现的话，每个字典会带有两个哈希表，一个平时使用，另一个仅在rehash（重新散列）时使用。随着对哈希表的操作，键会逐渐增多或减少。为了让哈希表的负载因子维持在一个合理范围内，Redis会对哈希表的大小进行扩展或收缩（rehash），也就是将ht【0】里面所有的键值对分多次、渐进式的rehash到ht【1】里。</p><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>Set集合对象的底层实现可以是intset（整数集合）或者hashtable（字典或者也叫哈希表）。</p><p><img src="http://mkstatic.lianbian.net/202111122022882.png" alt="Set命令行"></p><p>intset（整数集合）当一个集合只含有整数，并且元素不多时会使用intset（整数集合）作为Set集合对象的底层实现。</p><pre class="line-numbers language-none"><code class="language-none">typedef struct intset &#123;    &#x2F;&#x2F; 编码方式    uint32_t encoding;    &#x2F;&#x2F; 集合包含的元素数量    uint32_t length;    &#x2F;&#x2F; 保存元素的数组    int8_t contents[];&#125; intset;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>sadd:intsetAdd—O(1)</li><li>smembers:intsetGetO(1)—O(N)</li><li>srem:intsetRemove—O(N)</li><li>slen:intsetlen —O(1)</li></ul><p>intset底层实现为有序，无重复数组保存集合元素。intset这个结构里的整数数组的类型可以是16位的，32位的，64位的。如果数组里所有的整数都是16位长度的，如果新加入一个32位的整数，那么整个16的数组将升级成一个32位的数组。升级可以提升intset的灵活性，又可以节约内存，但不可逆。</p><h3 id="ZSet"><a href="#ZSet" class="headerlink" title="ZSet"></a>ZSet</h3><p>ZSet有序集合对象底层实现可以是ziplist（压缩列表）或者skiplist（跳跃表）。</p><p><img src="http://mkstatic.lianbian.net/202111122022953.png" alt="ZSet命令行"></p><p>当一个有序集合的元素数量比较多或者成员是比较长的字符串时，Redis就使用skiplist（跳跃表）作为ZSet对象的底层实现。</p><pre class="line-numbers language-none"><code class="language-none">typedef struct zskiplist &#123;     &#x2F;&#x2F; 表头节点和表尾节点    struct zskiplistNode *header, *tail;    &#x2F;&#x2F; 表中节点的数量    unsigned long length;    &#x2F;&#x2F; 表中层数最大的节点的层数    int level; &#125; zskiplist;typedef struct zskiplistNode &#123;    &#x2F;&#x2F; 成员对象    robj *obj;    &#x2F;&#x2F; 分值    double score;     &#x2F;&#x2F; 后退指针    struct zskiplistNode *backward;    &#x2F;&#x2F; 层    struct zskiplistLevel &#123;        &#x2F;&#x2F; 前进指针        struct zskiplistNode *forward;         &#x2F;&#x2F; 跨度---前进指针所指向节点与当前节点的距离        unsigned int span;    &#125; level[];&#125; zskiplistNode;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　zadd—zslinsert—平均O(logN), 最坏O(N)</p><p>　　zrem—zsldelete—平均O(logN), 最坏O(N)</p><p>　　zrank–zslGetRank—平均O(logN), 最坏O(N)</p><p>  <img src="http://mkstatic.lianbian.net/202111122022988.png" alt="跳跃表"></p><p>skiplist的查找时间复杂度是LogN，可以和平衡二叉树相当，但实现起来又比它简单。跳跃表（skiplist）是一种有序数据结构，它通过在某个节点中维持多个指向其他节点的指针，从而达到快速访问节点的目的。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>文章整体以源码加图示的方式从数据结构层面剖析了Redis为什么这么快原因。</p><p>如果对文章有什么疑问，欢迎留言或者加我微信好友与我讨论。</p><p>我是连边，专注于Java和架构领域，坚持撰写有原理，有实战，有体系的技术文章。</p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红黑树基础篇</title>
      <link href="/2021/11/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/2021/11/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>大家好，我是连边，这是我的第<code>28</code>篇原创文章。</p><p>红黑树是<code>HashMap</code>树化之后的数据结构，它具体是一个什么样的结构，为什么要使用该数据结构呢？</p><p>我准备用《红黑树基础篇》和《红黑树进阶篇》两篇文章来讲清楚。</p><p>本篇是基础篇，在基础篇中，我们由一个具体的例子出发，理清楚二分法、二叉搜索树、<code>平衡</code>二叉搜索树、23树之间的关系，推理出为什么会存在这些数据结构。</p><p>文章的内容比较偏理论，有一些概念定义的内容，需要记忆。</p><h2 id="文章导读"><a href="#文章导读" class="headerlink" title="文章导读"></a>文章导读</h2><h2 id="找出最大数"><a href="#找出最大数" class="headerlink" title="找出最大数"></a>找出最大数</h2><p>先举一个具体的例子，该例子来自，<a href="https://mp.weixin.qq.com/s/XUAHG9XvgaThdzjR9sxvOg">小林coding索引为什么能提高查询性能</a>。</p><p><img src="http://mkstatic.lianbian.net/202111152052299.jpg" alt="找鹦鹉"></p><p>有上图中的鹦鹉，现在我们要找出<strong>最高</strong>、<strong>最矮</strong>、<strong>中等高</strong>的鹦鹉呢？以及<strong>指定高度</strong>的那只呢？</p><p>你能想到的方法有哪些？遍历 or 二分法？</p><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>一个一个依次测量，完毕后所有的问题都迎刃而解。</p><p>这种一个一个依次全部测量的方法叫做扫描，他的缺点很明显，最高和最矮，需要全部测量完毕才能知晓。</p><p>而对于指定高度，最好的情况是第一次就找到；最坏的情况是最后一次才找到，时间复杂度为 n，也就是说从 13 个鹦鹉中找到指定身高的那只，最坏的情况是查 13 次。</p><h3 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h3><p>13 个鹦鹉全部听令，按从矮到高列队，向左看齐，报数。</p><p>报数字 1 的就是最矮的，报数字 13 的就是最高的，报数字 7 的就是中等身高的那只。</p><p>最好和最坏的情况都是一次找到。而查询性能一下子提高 13 倍，我的个乖乖，无论多个只鹦鹉，时间复杂度都是 1，好可怕。</p><blockquote><p>问题：我不服，你这是偷换概念，有本事对比一个查找指定高度鹦鹉的性能</p></blockquote><p>因为鹦鹉们已经按高矮排好了队，所以指定高度的鹦鹉，要么是站中间那个，要么就是在它的左边或右边的那群里。</p><p>如果是中间那个，一次就找到，如果不是只需要从中间左边或右边那一半中找，再在这一半中找中间那只，对比身高。</p><p>以此类推，每次都把查询的范围减半，时间复杂度<code>log2(n)</code>。</p><p>那么 log2(13) 就是 4，最坏的情况也才 4 次，时间复杂度确实不是 1 了，但好像也不糟，简化如下：</p><p><img src="http://mkstatic.lianbian.net/202111152105442.jpg" alt="二分法示意图"></p><blockquote><p>问题：如果按高矮排队，仍然需要一个一个比较，跟扫描有什么区别，那还不如直接扫描呢？</p></blockquote><p>事实确实如此,单纯的一次查询，先排序，再二分查找，不见得比扫描快，甚至还不如。</p><p>但是，在数据的世界，大部分数据一生会被查询无数次，如果只在数据降生的时候排一次序，往后余生，是不是就可以直接用二分查找，这似乎就是传说的读多写少，以及对应的复用。</p><p><strong>优点：</strong></p><ul><li>查找快</li></ul><p><strong>缺点：</strong></p><ul><li>必须有序，需要提前排序</li><li>每次查找都需要不断计算中间位置</li></ul><h2 id="二叉搜索树（BST）"><a href="#二叉搜索树（BST）" class="headerlink" title="二叉搜索树（BST）"></a>二叉搜索树（BST）</h2><p>如果一组数据不会或不常变更，那么他们的位置也基本不变。可是每次查询都需要重新计算中间位置是一种浪费，而浪费可耻。</p><p>我们能不能把所有中间节点组织起来，每次使用时，直接取中间节点?</p><p>请看下图，找到所有单次二分查找的中间节点，把他们连起来，并用手提起最中间的那个节点，就是一棵二分查找树。</p><p><img src="http://mkstatic.lianbian.net/202111152114958.gif" alt="二叉搜索树动图"></p><p><strong>优点：</strong></p><p>二叉搜索树就是通过数据结构的方式实现了二分查找算法，通过存储中间节点的数据，弥补了二分查找每次都要计算中间位置的缺点。</p><p>这里要记住二叉搜索树的<strong>一个特点：</strong></p><p><strong>左边的比根小，右边比根大。</strong>如：2节点的左边1比它小，2节点的右边3比它大。</p><h2 id="平衡二叉搜索树（AVL）"><a href="#平衡二叉搜索树（AVL）" class="headerlink" title="平衡二叉搜索树（AVL）"></a>平衡二叉搜索树（AVL）</h2><h3 id="平衡的定义"><a href="#平衡的定义" class="headerlink" title="平衡的定义"></a>平衡的定义</h3><h3 id="维持平衡"><a href="#维持平衡" class="headerlink" title="维持平衡"></a>维持平衡</h3><p>在我们增加或者删除节点的时候，会破坏树的平衡。</p><p>xx</p><p>xx</p><p>xx</p><p>那么，有什么办法能树再次平衡吗？</p><p>xx</p><p>xx</p><h2 id="23树"><a href="#23树" class="headerlink" title="23树"></a>23树</h2><p>节点变化太快，效率不高，老是需要频繁维持树的平衡，那么有没有一种结构，能够减少树的平衡计算（旋转）呢？像我们开始说的二分法和二叉搜索树一样，从数据结构层面（空间换时间）来优化这种计算呢？</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们从最开始的一个例子，从遍历 -&gt; 二分法 -&gt; 二叉搜索树 -&gt; 平衡二叉搜索树 -&gt; 23树的演进，xxxxxxxxxxxx</p><p>那么，我们<code>HashMap</code>的红黑树，又是一个什么样子的结构呢？和我们现在说的这些树又是什么关系呢？</p><p>敬请期待《红黑树进阶篇》。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LRU完整代码</title>
      <link href="/2021/10/29/Redis/LRU%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81/"/>
      <url>/2021/10/29/Redis/LRU%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">net<span class="token punctuation">.</span>lianbian<span class="token punctuation">.</span>tpc<span class="token punctuation">.</span>customer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LRUDemo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> cacheSize<span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> map<span class="token punctuation">;</span>    <span class="token class-name">DoubleLinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> doubleLinkedList<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">LRUDemo</span><span class="token punctuation">(</span><span class="token keyword">int</span> cacheSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cacheSize <span class="token operator">=</span> cacheSize<span class="token punctuation">;</span>        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        doubleLinkedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoubleLinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refreshNode</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        doubleLinkedList<span class="token punctuation">.</span><span class="token function">removeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        doubleLinkedList<span class="token punctuation">.</span><span class="token function">addHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> node <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">refreshNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> node <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            node<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">refreshNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> cacheSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Node</span> lastNode <span class="token operator">=</span> doubleLinkedList<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>lastNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                doubleLinkedList<span class="token punctuation">.</span><span class="token function">removeNode</span><span class="token punctuation">(</span>lastNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            doubleLinkedList<span class="token punctuation">.</span><span class="token function">addHead</span><span class="token punctuation">(</span>newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">K</span> key<span class="token punctuation">;</span>        <span class="token class-name">V</span> value<span class="token punctuation">;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> prev<span class="token punctuation">;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> next<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">DoubleLinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> head<span class="token punctuation">;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> tail<span class="token punctuation">;</span>        <span class="token comment">// 构造方法</span>        <span class="token keyword">public</span> <span class="token class-name">DoubleLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            head<span class="token punctuation">.</span>next <span class="token operator">=</span> tail<span class="token punctuation">;</span>            tail<span class="token punctuation">.</span>prev <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addHead</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            node<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> head<span class="token punctuation">;</span>            head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> node<span class="token punctuation">;</span>            head<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> node<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>            node<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            node<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> tail<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">LRUDemo</span> lruDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LRUDemo</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lruDemo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"美团"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lruDemo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"微信"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lruDemo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"抖音"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lruDemo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"微博"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lruDemo<span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lruDemo<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>手写Redis的LRU淘汰策略</title>
      <link href="/2021/10/29/Redis/%E6%89%8B%E5%86%99Redis%E7%9A%84LRU%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5/"/>
      <url>/2021/10/29/Redis/%E6%89%8B%E5%86%99Redis%E7%9A%84LRU%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<p>大家好，我是连边，这是我的第<code>27</code>篇原创文章。</p><p>今天我们这篇文章的目的只有一个，那就是<code>搞懂LRU淘汰策略</code>以及<code>实现一个LRU算法</code>。</p><p>文章会结合图解循序渐进的讲解，跟着我的思路慢慢来就能看懂，我们开始吧。</p><h2 id="文章导读"><a href="#文章导读" class="headerlink" title="文章导读"></a>文章导读</h2><p><img src="http://mkstatic.lianbian.net/202110291439151.png" alt="LRU"></p><h2 id="Redis的淘汰策略"><a href="#Redis的淘汰策略" class="headerlink" title="Redis的淘汰策略"></a>Redis的淘汰策略</h2><p>为什么要有淘汰策略呢？</p><p><strong>因为存储内存的空间是有限的，所以需要有淘汰的策略。</strong></p><p>Redis的清理内存淘汰策略有哪些呢？</p><p><img src="http://mkstatic.lianbian.net/202110291452127.png" alt="Redis内存淘汰策略"></p><h2 id="LRU算法简介"><a href="#LRU算法简介" class="headerlink" title="LRU算法简介"></a>LRU算法简介</h2><p>LRU是<code>Least Recently Used</code>的缩写，即<code>最近最少使用</code>，是一种常见的页面置换算法。</p><p>我们手机的后台窗口（苹果手机双击Home的效果），他总是会把最近常用的窗口放在最前边，而最不常用的应用窗口，就排列在后边了，如果再加上只能放置N个应用窗口的限制，淘汰最不常用的最近最少用的应用窗口，那就是一个活生生的<code>LRU</code>。</p><p><img src="http://mkstatic.lianbian.net/202110290847476.png" alt="手机后台应用窗口"></p><h2 id="实现思想推导"><a href="#实现思想推导" class="headerlink" title="实现思想推导"></a>实现思想推导</h2><p><img src="http://mkstatic.lianbian.net/202110290919765.png" alt="手机应用案例"></p><p>从上边的示意图，我们可以分析出这么几个点：</p><ol><li>有序；</li><li>如果应用开满3个了，要淘汰最不常用的应用，每次新访问应用，需要把数据插入队头（按照业务可以设定左右哪一边是队头）；</li><li>O(1)复杂度是我们查找数据的追求，我们什么结构能够实现快速的O(1)查找呢？</li></ol><p><img src="http://mkstatic.lianbian.net/202110291228385.png" alt="推导图"></p><p><strong>通过上边的推导，我们就能得出，<code>LRU</code>算法核心是<code>HashMap + DoubleLinkedList</code>。</strong></p><p>思想搞明白了，我们接下来编码实现。</p><h2 id="巧用LinkedHashMap"><a href="#巧用LinkedHashMap" class="headerlink" title="巧用LinkedHashMap"></a>巧用LinkedHashMap</h2><p>我们查看Java的<code>LinkedHashMap</code>使用说明。</p><p><img src="http://mkstatic.lianbian.net/202110291019095.png" alt="LinkedHashMap使用说明"></p><p><strong>翻译：这种Map结构很适合构建LRU缓存。</strong></p><p>继承<code>LinkedHashMap</code>实现<code>LRU</code>算法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LRUDemo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">LRUDemo</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> <span class="token number">0.75F</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">removeEldestEntry</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> eldest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> capacity<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">LRUDemo</span> lruDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LRUDemo</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lruDemo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lruDemo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lruDemo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lruDemo<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lruDemo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lruDemo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lruDemo<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>重点讲解：</strong></p><ol><li><p>构造方法：<code>super(capacity, 0.75F, true)</code>，主要看第三个参数：</p><ol><li><p><img src="http://mkstatic.lianbian.net/202110291025402.png" alt="order参数"></p></li><li><p><code>true -&gt; access-order // false -&gt; insertion-order</code>即按照访问时间排序，还是按照插入的时间来排序</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 构造方法改成false</span><span class="token keyword">super</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> <span class="token number">0.75F</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用示例</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">LRUDemo</span> lruDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LRUDemo</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  lruDemo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  lruDemo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  lruDemo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lruDemo<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  lruDemo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"y"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 构造方法order=true，输出：[2,3,1]，</span>  <span class="token comment">// 构造方法order=false，输出：[1,2,3]，</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lruDemo<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p><code>removeEldestEntry</code>方法：什么时候移除最年长的元素。</p></li></ol><p>通过上面，相信大家对<code>LRU</code>算法有所理解了，接下来我们不依赖JDK的<code>LinkedHashMap</code>，通过我们自己的理解，动手实现一个<code>LRU</code>算法，让我们的<code>LRU</code>算法刻入我们的大脑。</p><h2 id="手写LRU"><a href="#手写LRU" class="headerlink" title="手写LRU"></a>手写LRU</h2><p>上边的推导图中可以看出，我们用<code>HashMap</code>来做具体的数据储存，但是我们还需要构造一个<code>DoubleLinkedList</code>对象（结构体）来储存<code>HashMap</code>的具体<code>key</code>顺序关系。</p><h3 id="第一步：构建DoubleLinkedList对象"><a href="#第一步：构建DoubleLinkedList对象" class="headerlink" title="第一步：构建DoubleLinkedList对象"></a>第一步：构建DoubleLinkedList对象</h3><ol><li>所以我们现在<strong>第一步</strong>，就是构建一个<code>DoubleLinkedList</code>对象：</li></ol><p><img src="http://mkstatic.lianbian.net/202110291249801.png" alt="DoubleLinkedList示意图"></p><p>我们可以从<code>HashMap</code>源码中找一些灵感，他们都是使用一个<code>Node</code>静态内部类来储存节点的值。</p><h3 id="第二步：构建节点"><a href="#第二步：构建节点" class="headerlink" title="第二步：构建节点"></a>第二步：构建节点</h3><p>通过上边的示意图，我们可以得知<strong>节点</strong>应该要储存的内容：</p><ol><li>key</li><li>value</li><li>prev节点</li><li>next节点</li></ol><p>翻译成代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">K</span> key<span class="token punctuation">;</span>    <span class="token class-name">V</span> value<span class="token punctuation">;</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> prev<span class="token punctuation">;</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> next<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三步：初始化DoubleLinkedList对象"><a href="#第三步：初始化DoubleLinkedList对象" class="headerlink" title="第三步：初始化DoubleLinkedList对象"></a>第三步：初始化DoubleLinkedList对象</h3><p><img src="http://mkstatic.lianbian.net/202110291312430.png" alt="DoubleLinkedList初始化示意图"></p><p>还是通过上边的示意图，我们可以得知<strong>DoubleLinkedList对象</strong>应该要储存的内容：</p><ol><li>头节点</li><li>尾节点</li></ol><p>翻译成代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">DoubleLinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> head<span class="token punctuation">;</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> tail<span class="token punctuation">;</span>    <span class="token comment">// 构造方法</span>    <span class="token keyword">public</span> <span class="token class-name">DoubleLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> tail<span class="token punctuation">;</span>        tail<span class="token punctuation">.</span>prev <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="从头添加节点"><a href="#从头添加节点" class="headerlink" title="从头添加节点"></a>从头添加节点</h4><p><img src="http://mkstatic.lianbian.net/202110291329584.png" alt="从头添加节点"></p><p>翻译成代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addHead</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    node<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    node<span class="token punctuation">.</span>prev <span class="token operator">=</span> head<span class="token punctuation">;</span>    head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> node<span class="token punctuation">;</span>    head<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><p><img src="http://mkstatic.lianbian.net/202110291341404.png" alt="删除节点"></p><p>翻译成代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> node<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>    node<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    node<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    node<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取最后一个节点"><a href="#获取最后一个节点" class="headerlink" title="获取最后一个节点"></a>获取最后一个节点</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> tail<span class="token punctuation">.</span>prev<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="第四步：LRU对象属性"><a href="#第四步：LRU对象属性" class="headerlink" title="第四步：LRU对象属性"></a>第四步：LRU对象属性</h3><h4 id="cacheSize"><a href="#cacheSize" class="headerlink" title="cacheSize"></a>cacheSize</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> cacheSize<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> map<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="doubleLinkedList"><a href="#doubleLinkedList" class="headerlink" title="doubleLinkedList"></a>doubleLinkedList</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DoubleLinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> doubleLinkedList<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第五步：LRU对象的方法"><a href="#第五步：LRU对象的方法" class="headerlink" title="第五步：LRU对象的方法"></a>第五步：LRU对象的方法</h3><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">LRUDemo</span><span class="token punctuation">(</span><span class="token keyword">int</span> cacheSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cacheSize <span class="token operator">=</span> cacheSize<span class="token punctuation">;</span>    map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    doubleLinkedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoubleLinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="refreshNode刷新节点"><a href="#refreshNode刷新节点" class="headerlink" title="refreshNode刷新节点"></a>refreshNode刷新节点</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refreshNode</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    doubleLinkedList<span class="token punctuation">.</span><span class="token function">removeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    doubleLinkedList<span class="token punctuation">.</span><span class="token function">addHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="get节点"><a href="#get节点" class="headerlink" title="get节点"></a>get节点</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> node <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">refreshNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="put节点"><a href="#put节点" class="headerlink" title="put节点"></a>put节点</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> node <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">refreshNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> cacheSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> lastNode <span class="token operator">=</span> doubleLinkedList<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>lastNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            doubleLinkedList<span class="token punctuation">.</span><span class="token function">removeNode</span><span class="token punctuation">(</span>lastNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        doubleLinkedList<span class="token punctuation">.</span><span class="token function">addHead</span><span class="token punctuation">(</span>newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第六步：测试"><a href="#第六步：测试" class="headerlink" title="第六步：测试"></a>第六步：测试</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">LRUDemo</span> lruDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LRUDemo</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    lruDemo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"美团"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    lruDemo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"微信"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    lruDemo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"抖音"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    lruDemo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"微博"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lruDemo<span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lruDemo<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>LRU</code>算法到这里就写完啦，<a href="https://www.lianbian.net/2021/10/29/Redis/LRU%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81/">完整的代码</a>可以从阅读原文的链接地址获取。</p><p>希望看完这篇文章之后，彻底弄懂LRU算法。</p><p>衷心感谢每一位认真读文章的人，我是连边，专注于Java和架构领域，坚持撰写有原理，有实战，有体系的技术文章。</p><p>参考资料：</p><p><a href="https://www.bilibili.com/video/BV1Hy4y1B78T?p=64">https://www.bilibili.com/video/BV1Hy4y1B78T?p=64</a></p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搞懂Redis的跳跃表结构</title>
      <link href="/2021/10/28/Redis/%E6%90%9E%E6%87%82Redis%E7%9A%84%E8%B7%B3%E8%B7%83%E8%A1%A8%E7%BB%93%E6%9E%84/"/>
      <url>/2021/10/28/Redis/%E6%90%9E%E6%87%82Redis%E7%9A%84%E8%B7%B3%E8%B7%83%E8%A1%A8%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>大家好，我是连边，这是我的第<code>26</code>篇原创文章。</p><p>昨天转载了田螺的一篇<a href="https://mp.weixin.qq.com/s?__biz=MzA4MjUzODc0OQ==&mid=2652164830&idx=1&sn=2c1ac47a4a660cf4241a2914561caa63&chksm=84644b4cb313c25ae679b7407ff91f55cd61e3d7a8e5e46448d0d2cdf7865a91ef71e891ea81">Redis为什么这么快</a>的文章，从阅读量来衡量的话，内容还是受欢迎的。</p><p>今天更新一篇关于Redis跳表结构相关的文章，希望你能够彻底弄懂Redis跳表结构。</p><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>跳跃表是<code>zset</code>（有序集合）的基础数据结构。跳跃表可以高效的保持元素有序，并且实现相对简单、直观的平衡树。</p><p><img src="http://mkstatic.lianbian.net/202110281509673" alt="redis数据结构"></p><h2 id="B站视频"><a href="#B站视频" class="headerlink" title="B站视频"></a>B站视频</h2><p>友情提示，可以快速跳过抛硬币环节，有群友统计了，抛了<code>22</code>次硬币。</p><p><a href="https://www.bilibili.com/video/BV1tK4y1X7de?from=search&seid=1013717057">Redis Skip List B站视频</a></p><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>看过视频之后，对跳跃表结构怎么进行增删改查的相信大家有了很直观的理解。</p><p>其实跳跃表是受<code>多层链表</code>的想法启发设计得来的。</p><p>如果上一层的链表的节点个数，是下面一层的节点个数的一半，这样查找就非常类似于一个<code>二分查找</code>。</p><p>但是为什么不直接用二分查找的方式去解决问题， 还要用随机的方式（抛硬币）来解决层数的问题呢？</p><p>试想一下，如果我们结构上强制着二分查找，相邻的两层链表上的节点个数严格按照2：1的对应关系，<strong>那么在插入新节点的时候，就会打乱这层对应关系，要维护这层关系，又必须把心插入的节点后边的所有节点重新进行调整，这又让时间复杂度退化为O(N)，删除数据也有同样的问题。</strong></p><p>跳跃表为了避免这一问题，就采用了随机层数的方式来巧妙的解决。</p><p><strong>不要求上下相邻两层链表之间的节点个数有严格的对应关系，而是为每个节点随机出一个层数（level），新插入的节点就会根据自己的层数决定该节点是否在这层的链表上</strong>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今天这篇文章很短，主要的内容就是在那个强烈推荐的视频。</p><p>如果想更深入的了解，也推荐另外一篇文章<a href="https://juejin.cn/post/6901139528422178824">Redis 数据结构之跳跃表（skiplist）</a>。</p><p>衷心感谢每一位认真读文章的人，我是连边，专注于Java和架构领域，坚持撰写有原理，有实战，有体系的技术文章。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>那些常见的面试题</title>
      <link href="/2021/10/27/%E9%9D%A2%E8%AF%95/%E9%82%A3%E4%BA%9B%E5%B8%B8%E8%A7%81%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2021/10/27/%E9%9D%A2%E8%AF%95/%E9%82%A3%E4%BA%9B%E5%B8%B8%E8%A7%81%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p>volatile</p><p>ThreadLocal原理</p><p>ThreadLocal为什么会内存泄漏</p><p>ThreadLocal适合在场景使用</p><p>AQS实现原理</p><p>synchronized</p><p>ReentrantLock和synchronized区别</p><p>公平锁和非公平锁的区别</p><p>悲观锁和乐观锁的区别</p><p>什么是CAS</p><p>CAS存在的问题</p><p>hacode与equals之间的联系</p><p>创建线程有哪几种方式？</p><p>为什么使用线程池？</p><p>线程池的参数有哪些？</p><p>线程的生命周期</p><p>讲一下线程中断</p><p>NIO 和 BIO的区别</p><p>Java1.7和Java1.8的HashMap的实现有什么区别</p><p>HashMap和CurrentHashMap原理与结构</p><h2 id="JUC"><a href="#JUC" class="headerlink" title="JUC"></a>JUC</h2><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><p><a href="https://www.lianbian.net/2021/10/27/2021-09-13-CMS%E5%9B%9E%E6%94%B6%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%81%9C%E9%A1%BF%E4%B8%A4%E6%AC%A1/">cms回收为什么要停顿两次？</a></p><p>OOM怎么办？</p><p>JVM内存模型</p><p>谈谈你对JVM的理解</p><p>Java8虚拟机和之前的变化更新？</p><p>JVM常用调优参数有哪些</p><p>内存快照如何抓取，怎么分析Dump文件？</p><p>谈谈JVM中，类加载你的认识</p><h2 id="Spring-SpringBoot"><a href="#Spring-SpringBoot" class="headerlink" title="Spring/SpringBoot"></a>Spring/SpringBoot</h2><p>Spring用了哪些设计模式？</p><p><a href="https://www.bilibili.com/video/BV19L4y1i7Wd?p=13">Spring bean的生命周期？</a></p><p><a href="https://www.bilibili.com/video/BV19L4y1i7Wd?p=19">Spring AOP底层实现原理</a></p><p><a href="https://www.bilibili.com/video/BV19L4y1i7Wd?p=17">谈谈你的循环依赖的理解？</a></p><p><a href="https://mp.weixin.qq.com/s/GVBrFoJAkD2yW4rCIbEa2g">SpringBoot启动都做了什么</a></p><p><a href="https://www.bilibili.com/video/BV19L4y1i7Wd?p=20">Spring的事物是如何回滚的？</a></p><p><a href="https://www.bilibili.com/video/BV19L4y1i7Wd?p=21">Spring事物传播特性</a></p><p>starter怎么工作的</p><h2 id="MyBatis-Mybatis-plus"><a href="#MyBatis-Mybatis-plus" class="headerlink" title="MyBatis/Mybatis-plus"></a>MyBatis/Mybatis-plus</h2><p>MyBatis 常见面试题总结</p><p>动态代理</p><p>日志原理</p><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><p>MySQL 索引 B+ 树</p><p>谈谈MySQL索引是如何提高查询效率的？</p><p>讲透MVCC</p><p>MySQL ACID怎么实现的</p><p>MySQL都有什么锁，死锁判定原理和具体场景，死锁怎么解决？</p><p>SQL查询语句确定创建哪种类型的索引？如何优化查询？</p><p>分布式事务回滚问题</p><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p><a href="https://mp.weixin.qq.com/s/msGfc_gCiG-yzx0-Ex8Ojw">Redis为什么这么快？</a></p><h3 id="跳跃表"><a href="#跳跃表" class="headerlink" title="跳跃表"></a>跳跃表</h3><ol><li><a href="https://www.bilibili.com/video/BV1tK4y1X7de?from=search&seid=10137170574929545982&spm_id_from=333.337.0.0">Redis Skip List B站视频</a></li><li><a href="https://juejin.cn/post/6901139528422178824">Redis 数据结构之跳跃表（skiplist）</a></li></ol><p><a href="https://www.lianbian.net/2021/10/29/Redis/%E6%89%8B%E5%86%99Redis%E7%9A%84LRU%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5/">Redis LRU淘汰策略</a></p><p><a href="https://mp.weixin.qq.com/s/sM8Pfu3ZhwADJpJNzyhylA">Redis分布式锁</a></p><p>Redis6的新的数据类型</p><p>Redis6的多线程</p><p>bitmap布隆过滤器</p><p>Redis高可用部署</p><p>Redis的事物机制</p><p>Redis持久化机制有哪些？</p><p>在生成RDB期间，Redis可以同时处理写请求吗？</p><p>MySQL和Redis如何保证双写一致性</p><p>Redis底层，使用的什么协议？</p><p>Redis热key问题</p><h2 id="MQ"><a href="#MQ" class="headerlink" title="MQ"></a>MQ</h2><p><a href="https://mp.weixin.qq.com/s/ttlVqrBA7CZ9q-hWPW2bFQ">MQ的5大问题详解</a></p><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>TCP 三次握手、4次挥手</p><p>HTTP、TCP、UDP的区别</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>数组</p><p>链表</p><p>23树</p><p>跳跃表</p><p>红黑树</p><p>堆</p><p>栈</p><h2 id="遇到的线上问题"><a href="#遇到的线上问题" class="headerlink" title="遇到的线上问题"></a>遇到的线上问题</h2><p><a href="https://mp.weixin.qq.com/s/WCeHESrSFz6vdRXKXAmrEA">频繁查询导致线程池爆了</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL的undo log</title>
      <link href="/2021/10/03/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E7%9A%84undo%20log/"/>
      <url>/2021/10/03/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E7%9A%84undo%20log/</url>
      
        <content type="html"><![CDATA[<p>大家好，我是连边，这是我的第<code>25</code>篇原创文章。</p><p>今天这篇文章给大家带来MySQL中另外一个重要的日志 - <code>undo log</code>。</p><h2 id="文章导读"><a href="#文章导读" class="headerlink" title="文章导读"></a>文章导读</h2><p><img src="http://mkstatic.lianbian.net/202110121635854.png" alt="undo log文章导读"></p><h2 id="概念与作用"><a href="#概念与作用" class="headerlink" title="概念与作用"></a>概念与作用</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>一条undo log对应一个事务中的一条读写语句，在修改记录之前，把该记录的原值（before image）先保存起来（undo log）再修改。以便其他的事务<strong>读取</strong>或者修改过程中<strong>出错能够恢复</strong>原值。undo是逻辑日志，只是将数据库逻辑地恢复到原来的样子；所有修改都被逻辑地取消了，但是数据结构和页本身在回滚之后可能不大相同。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol><li><strong>事务回滚 - 原子性：</strong>undo log是为了实现事务的原子性而出现的产物，事务处理的过程中，如果出现了错误或者用户执行<code>ROLLBACK</code>语句，MySQL可以利用undo log中的备份将数据恢复到事务开始之前的状态。</li><li><strong>多个行版本控制（MVCC）- 隔离性：</strong>undo log在MySQL InnoDB储存引擎中用来实现多版本并发控制，事务未提交之前，当读取的某一行被其他事务锁定时，它可以从undo log中分析出该行记录以前的数据是什么，从而提供该行版本信息，让用户实现非锁定一致性读取。</li></ol><h2 id="触发点"><a href="#触发点" class="headerlink" title="触发点"></a>触发点</h2><p>事务中的四种操作会产生<code>undo log</code>：</p><ol><li><code>insert</code>用户定义的表</li><li><code>update</code>或者<code>delete</code>用户定义的表</li><li><code>insert</code>用户定义的临时表</li><li><code>update</code>或者<code>delete</code>用户定义的临时表</li></ol><p><strong>对数据有变动的语句，都会记录到undo log。</strong></p><h2 id="undo-log的储存空间"><a href="#undo-log的储存空间" class="headerlink" title="undo log的储存空间"></a>undo log的储存空间</h2><p>MySQL中的数据存放有对应的表空间，日志的存放也有对应的表空间，一个个表空间对应到磁盘上就是一个个数据文件。undolog也有undolog tablespace的概念，但是undo的表空间在不同的MySQL版本中有一点不一样，接下来分别说明一下。</p><h3 id="MySQL结构简图"><a href="#MySQL结构简图" class="headerlink" title="MySQL结构简图"></a>MySQL结构简图</h3><p>我画了MySQL的结构简图，这里我们只需要关注简图中画<strong>红色方框</strong>和<strong>绿色方框</strong>的模块。</p><p><img src="http://mkstatic.lianbian.net/202110121327568.png" alt="MySQL的结构简图"></p><p>在<code>MySQL5.6.3</code>之前的版本中，这个undo tablespace是和system tablespace系统表空间存放在一起的，如上图<strong>红色框</strong>选的部分，因为系统表空间对应的磁盘上面的数据文件就是<code>ibdata1</code>这个文件，所以在MySQL的相关目录下面，我们看不到任何相关的数据文件 - <strong>和系统表空间存放在一起</strong>；在<code>MySQL5.6.3</code>之后的版本中，MySQL支持将undo log tablespace单独剥离出来，不再和系统空间放在一起，如上图<strong>绿色框</strong>选的部分 - <strong>独立的undo log  tablespace</strong>。</p><h3 id="独立undo-tablespaces的意义"><a href="#独立undo-tablespaces的意义" class="headerlink" title="独立undo tablespaces的意义"></a>独立undo tablespaces的意义</h3><p><strong>我们思考一下：为什么要支持把undolog的tablespace单独剥离出来呢？</strong></p><p>这是从性能的角度来考量的。原先的undolog和系统表空间共享一个表空间，这样在记录undolog的时候，和其他的一些使用系统表空间来存储的操作肯定会存在磁盘I/O的竞争。但是如果我们把undolog的表空间单独拉出来，支持让其自定义目录和表空间的数量，这样我们可以把undolog配置单独的磁盘目录，提高undo log日志的读写性能。</p><h2 id="undo-tablespace创建流程"><a href="#undo-tablespace创建流程" class="headerlink" title="undo tablespace创建流程"></a>undo tablespace创建流程</h2><p>undo tablespace（undo 表空间） 定义了回滚段（Rollback Segments）用来存放undo log，至于什么是回滚段，文章的后边会详细的说，我们先从undo表空间创建流程入手，undo表空间默认的最小数量是2个，在MySQL初始化时创建。</p><h3 id="undo-tablespace初始化"><a href="#undo-tablespace初始化" class="headerlink" title="undo tablespace初始化"></a>undo tablespace初始化</h3><p>undo tablespace的起始 space id 是4294967154, 支持最大的 Undo表空间个数为127个, 所以终止 space id 为4294967280。</p><p>Undo表空间通过<code>srv_undo_tablespace_create()</code>创建，并默认分配<code>UNDO_INITIAL_SIZE_IN_PAGES</code>(16MB) 大小的空间。</p><h3 id="服务启动源码文件路径"><a href="#服务启动源码文件路径" class="headerlink" title="服务启动源码文件路径"></a>服务启动源码文件路径</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mysql-server-mysql-8.0.13&#x2F;storage&#x2F;innobase&#x2F;srv&#x2F;srv0start.cc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建undo表空间图示流程"><a href="#创建undo表空间图示流程" class="headerlink" title="创建undo表空间图示流程"></a>创建undo表空间图示流程</h3><p><img src="http://mkstatic.lianbian.net/202110120957743.png" alt="创建undo表空间图示流程"></p><h3 id="创建undo表空间源码流程"><a href="#创建undo表空间源码流程" class="headerlink" title="创建undo表空间源码流程"></a>创建undo表空间源码流程</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++"> -------------| srv_start() | -------------   |   |    &#x2F;* 初始化 Undo Tablespace *&#x2F;   |    -----------------------------   --&gt; | srv_undo_tablespaces_init() |        -----------------------------         |         |     &#x2F;* 创建默认数量的 Undo Tablespace, 并创建文件 undo_xxx *&#x2F;         |    -------------------------------         --&gt; | srv_undo_tablespaces_create() |         |    -------------------------------         |         |     &#x2F;* 初始化 Undo Tablespace 文件结构 *&#x2F;         |    --------------------------------------         --&gt; |   srv_undo_tablespaces_construct()   |              --------------------------------------                |                |                |    &#x2F;* 初始化 Undo Tablespace 的文件结构 Header *&#x2F;                |    -------------------                --&gt; | fsp_header_init() |                |    -------------------                |                |    &#x2F;* 创建回滚段目录Page *&#x2F;                |    -------------------------                --&gt; | trx_rseg_array_create() |                     -------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="undo表空间结构体"><a href="#undo表空间结构体" class="headerlink" title="undo表空间结构体"></a>undo表空间结构体</h2><h3 id="结构体定义源码文件路径"><a href="#结构体定义源码文件路径" class="headerlink" title="结构体定义源码文件路径"></a>结构体定义源码文件路径</h3><p><code>mysql-server-mysql-8.0.13/storage/innobase/include/trx0purge.h</code></p><h3 id="结构体定义源码"><a href="#结构体定义源码" class="headerlink" title="结构体定义源码"></a>结构体定义源码</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;** An undo::Tablespace object is used to easily convert betweenundo_space_id and undo_space_num and to create the automatic file_nameand space name.  In addition, it is used in undo::Tablespaces to trackthe trx_rseg_t objects in an Rsegs vector. So we do not allocate theRsegs vector for each object, only when requested by the constructor. *&#x2F;struct Tablespace &#123; &#x2F;** ... **&#x2F; private:  &#x2F;** Undo Tablespace ID. *&#x2F;  space_id_t m_id;  &#x2F;** Undo Tablespace number, from 1 to 127. This is the  7-bit number that is used in a rollback pointer.  Use id2num() to get this number from a space_id. *&#x2F;  space_id_t m_num;  &#x2F;** The tablespace name, auto-generated when needed from  the space number. *&#x2F;  char *m_space_name;  &#x2F;** The tablespace file name, auto-generated when needed  from the space number. *&#x2F;  char *m_file_name;  &#x2F;** The tablespace log file name, auto-generated when needed  from the space number. *&#x2F;  char *m_log_file_name;  &#x2F;** List of rollback segments within this tablespace.  This is not always used. Must call init_rsegs to use it. *&#x2F;  Rsegs *m_rsegs;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上边的源码可知，在我们的undo表空间结构体定义里边，有<code>Rsegs</code>的定义，这个就是我们前边说的<code>回滚段（Rollback Segments）</code>，我们继续从源码来深挖<code>回滚段（Rollback Segments）</code>结构体。</p><h2 id="回滚段创建流程"><a href="#回滚段创建流程" class="headerlink" title="回滚段创建流程"></a>回滚段创建流程</h2><p>每个undo表空间中有128个回滚段，每个回滚段用来管理undo log，每个回滚段维护了一个 Rollback Segment Header Page，在默认16KB的情况下，回滚段Header Page划分了1024个undo slots，每个undo slot对应一个undo log segment对象，即事务启动时分配的undo log空间，回滚段的内存数据结构是<code>try_rseg_t</code>，结构体中<code>Rsegs</code>是<code>trx_rseg_t</code>的<code>std::vector</code>封装。在 DB init 阶段初始化undo表空间后依次为每个undo表空间创建128个回滚段。</p><h3 id="创建回滚段图示流程"><a href="#创建回滚段图示流程" class="headerlink" title="创建回滚段图示流程"></a>创建回滚段图示流程</h3><p><img src="http://mkstatic.lianbian.net/202110121107961.png" alt="创建回滚段图示流程"></p><h3 id="创建回滚段源码流程"><a href="#创建回滚段源码流程" class="headerlink" title="创建回滚段源码流程"></a>创建回滚段源码流程</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;* DB init *&#x2F; -------------| srv_start() | -------------  |  |               &#x2F;* 添加回滚段 *&#x2F;  |    -------------------------------------  --&gt; | trx_rseg_adjust_rollback_segments() |       -------------------------------------         |         |         |              &#x2F;* 创建回滚段 *&#x2F;         |    ----------------------------------         --&gt; | trx_rseg_add_rollback_segments() |              ----------------------------------                |                |     &#x2F;* 创建回滚段文件结构 *&#x2F;                |    -------------------------                --&gt; |    trx_rseg_create()    |                |    -------------------------                |       |                |       |                 |       |       &#x2F;* 创建回滚段Header *&#x2F;                |       |    ---------------------------                |       --&gt; |  trx_rseg_header_create() |                |            ---------------------------                |                |     &#x2F;* 创建并初始化trx_rseg_t *&#x2F;                |    -----------------------------                --&gt; |    trx_rseg_mem_create()    |                     -----------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建回滚段文字描述"><a href="#创建回滚段文字描述" class="headerlink" title="创建回滚段文字描述"></a>创建回滚段文字描述</h3><ol><li>为指定的undo表空间创建回滚段，这里的每一个回滚段申请file segment，可以理解为一个回滚段对应一个文件形式的segment</li><li>每个 Undo Tablespace 默认创建128个回滚段, Segment 创建成功后返回的 File Segment Header Page 作为 Rollback Segment Header Page, 并初始化 Rollback Segment Header Page 中的<code>TRX_RSEG_MAX_SIZE</code>,<code>TRX_RSEG_HISTORY_SIZE</code>和文件链表<code>TRX_RSEG_HISTORY</code>. 初始化 Rollback Segment Header 的 Undo Slots 字段为<code>FIL_NULL</code>, 一个回滚段默认1024个 Undo Log Segment.</li><li>获取 Undo Tablespace 的回滚段目录的 Page, Rollback Segment Directory Header Page 固定为 Undo Tablspace 的第 3 (FSP_RSEG_ARRAY_PAGE_NO) 个Page, 页内偏移为<code>RSEG_ARRAY_HEADER</code>. 将创建的 Rollback Segment Header 的 Page No 插入 Undo Tablespace 中的回滚段目录(<code>trx_rsegsf_set_page_no()</code>).</li><li>创建回滚段内存结构<code>trx_rsegs_t</code>并插入 Undo Tablespace 的<code>Rsegs</code>.</li></ol><h2 id="回滚段结构体"><a href="#回滚段结构体" class="headerlink" title="回滚段结构体"></a>回滚段结构体</h2><h3 id="结构体定义源码文件路径-1"><a href="#结构体定义源码文件路径-1" class="headerlink" title="结构体定义源码文件路径"></a>结构体定义源码文件路径</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mysql-server-mysql-8.0.13&#x2F;storage&#x2F;innobase&#x2F;include&#x2F;trx0types.h<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="结构体定义源码-1"><a href="#结构体定义源码-1" class="headerlink" title="结构体定义源码"></a>结构体定义源码</h3><p>结构体中<code>Rsegs</code>是<code>trx_rseg_t</code>的<code>std::vector</code>封装</p><p>每个回滚段维护了一个 Rollback Segment Header Page</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;** The rollback segment memory object *&#x2F;struct trx_rseg_t &#123;  &#x2F;*--------------------------------------------------------*&#x2F;  &#x2F;** rollback segment id &#x3D;&#x3D; the index of its slot in the trx  system file copy *&#x2F;  ulint id;  &#x2F;** mutex protecting the fields in this struct except id,space,page_no  which are constant *&#x2F;  RsegMutex mutex;  &#x2F;** space ID where the rollback segment header is placed *&#x2F;  space_id_t space_id;  &#x2F;** page number of the rollback segment header *&#x2F;  page_no_t page_no;  &#x2F;** page size of the relevant tablespace *&#x2F;  page_size_t page_size;  &#x2F;** maximum allowed size in pages *&#x2F;  ulint max_size;  &#x2F;** current size in pages *&#x2F;  ulint curr_size;  &#x2F;*--------------------------------------------------------*&#x2F;  &#x2F;* Fields for update undo logs *&#x2F;  &#x2F;** List of update undo logs *&#x2F;  UT_LIST_BASE_NODE_T(trx_undo_t) update_undo_list;  &#x2F;** List of update undo log segments cached for fast reuse *&#x2F;  UT_LIST_BASE_NODE_T(trx_undo_t) update_undo_cached;  &#x2F;*--------------------------------------------------------*&#x2F;  &#x2F;* Fields for insert undo logs *&#x2F;  &#x2F;** List of insert undo logs *&#x2F;  UT_LIST_BASE_NODE_T(trx_undo_t) insert_undo_list;  &#x2F;** List of insert undo log segments cached for fast reuse *&#x2F;  UT_LIST_BASE_NODE_T(trx_undo_t) insert_undo_cached;  &#x2F;*--------------------------------------------------------*&#x2F;  &#x2F;** Page number of the last not yet purged log header in the history  list; FIL_NULL if all list purged *&#x2F;  page_no_t last_page_no;  &#x2F;** Byte offset of the last not yet purged log header *&#x2F;  ulint last_offset;  &#x2F;** Transaction number of the last not yet purged log *&#x2F;  trx_id_t last_trx_no;  &#x2F;** TRUE if the last not yet purged log needs purging *&#x2F;  ibool last_del_marks;  &#x2F;** Reference counter to track rseg allocated transactions. *&#x2F;  std::atomic&lt;ulint&gt; trx_ref_count;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上说了这么多篇幅，其实就是为了弄懂<strong>undo表空间的储存结构体</strong>，我在这里再总结一张undo表空间结构图，希望能够帮您巩固。</p><h2 id="undo表空间结构图"><a href="#undo表空间结构图" class="headerlink" title="undo表空间结构图"></a>undo表空间结构图</h2><p><img src="http://mkstatic.lianbian.net/202110121538553.png" alt="undo tablespaces储存示意图"></p><p>如果上边没有弄懂的，建议再看一遍，如果看懂了，可以继续<strong>往下阅读</strong>。</p><p>上边我们详细讲了undo表空间的储存结构体，为了保证事务并发操作时，在写各自的undo log时不产生冲突，InnoDB采用回滚段的方式来维护undo log的并发写入和持久化。</p><p>下面我们接着来讲<strong>事务的执行流程</strong>。</p><h2 id="事务流程"><a href="#事务流程" class="headerlink" title="事务流程"></a>事务流程</h2><h3 id="分配回滚段"><a href="#分配回滚段" class="headerlink" title="分配回滚段"></a>分配回滚段</h3><p>当开启一个读写的事务时候，我们需要为其分配一个回滚段空间，需要注意的是一个回滚段并不是一个事务独占的，回滚段申请流程如下：</p><p><strong>分配回滚段源码流程</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">     &#x2F;* 分配回滚段 *&#x2F; ----------------------------| trx_assign_rseg_durable()  | ----------------------------                          |                          |                          |   ----------------------                          -&gt; | get_next_redo_rseg() |                              ----------------------                                                  |                                                  |                                                     |   -----------------------------------                                                  -&gt; | get_next_redo_rseg_from_trx_sys() |                                                  |   -----------------------------------                                                  |                                                  |   ---------------------------------------                                                  -&gt; | get_next_redo_rseg_from_undo_spaces() |                                                      ---------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分配回滚段文字描述</strong></p><p>通过判断<code>trx_sys-&gt;rsegs</code>是否为空，假如不为空则直接从<code>trx_sys-&gt;rsegs</code>获取(从<code>trx_sys-&gt;rsegs</code>中取模迭代获取)，否则从 Undo Tablespace 中获取(<code>get_next_redo_rseg_from_undo_spaces()</code>):</p><p><strong>迭代方式源码文件路径</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mysql-server-mysql-8.0.13&#x2F;storage&#x2F;innobase&#x2F;trx&#x2F;trx0trx.cc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>采用轮询的方式获取回滚段，迭代方式如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">while (rseg &#x3D;&#x3D; nullptr) &#123;    &#x2F;* Traverse the rsegs like this: (space, rseg_id)    (0,0), (1,0), ... (n,0), (0,1), (1,1), ... (n,1), ... *&#x2F;    ulint window &#x3D;        current % (target_rollback_segments * target_undo_tablespaces);    ulint spaces_slot &#x3D; window % target_undo_tablespaces;    ulint rseg_slot &#x3D; window &#x2F; target_undo_tablespaces;    &#x2F;* 这里省略，篇幅太长了，可以关注「连边」订阅号，发送 mysql0813 获取mysql源码根据源码路径查看*&#x2F;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分配回滚段成功后, 递增<code>rseg-&gt;trx_ref_count</code>，并由<code>trx-&gt;rsegs.m_redo.rseg</code>指向分配的回滚段递增<code>rseg-&gt;trx_ref_count</code></p><h3 id="使用回滚段"><a href="#使用回滚段" class="headerlink" title="使用回滚段"></a>使用回滚段</h3><p>我们以insert操作举例，insert一条记录的流程如下：</p><p><strong>使用回滚段源码流程</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++"> ----------------| ha_write_row() | ----------------   |   |   --------------------------   -&gt; | ha_innobase::write_row() |       --------------------------        |        |   ------------------------        -&gt; | row_insert_for_mysql() |            ------------------------              |              |   ----------------------------------------              -&gt; | row_insert_for_mysql_using_ins_graph() |                  ----------------------------------------                     |                     |   ----------------                     -&gt; | row_ins_step() |                         ----------------                            |                            |   -----------                            -&gt; | row_ins() |                                -----------                                   |                                   |   ----------------------------                                   -&gt; | row_ins_index_entry_step() |                                       ----------------------------                                          |                                          |   -----------------------                                          -&gt; | row_ins_index_entry() |                                              -----------------------                                                 |                                                 |     &#x2F;* 假如插入的 Record 为聚簇索引. *&#x2F;                                                 |     -----------------------------                                                 ---&gt; | row_ins_clust_index_entry() |                                                 |     -----------------------------                                                 |                                                 |     &#x2F;* 假如插入的 Record 非聚簇索引，但为多个value. *&#x2F;                                                 |     ---------------------------------------                                                 ---&gt; | row_ins_sec_index_multi_value_entry() |                                                 |     ---------------------------------------                                                 |                                                 |     &#x2F;* 假如插入的 Record 为二级索引的单个value. *&#x2F;                                                 |     ---------------------------                                                 ---&gt; | row_ins_sec_index_entry() |                                                       ---------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们以插入一条聚簇索引的 Record 为例，<code>row_ins_clust_index_entry()</code>调用<code>row_ins_clust_index_entry_low()</code>实现具体的 Record 插入操作，下面是代码流程：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++"> ---------------------------------| row_ins_clust_index_entry_low() | ---------------------------------    |    |   -----------------------------    -&gt; | btr_cur_optimistic_insert() |        -----------------------------           |           |   -----------------------------           -&gt; | btr_cur_ins_lock_and_undo() |               -----------------------------                  |                  |    &#x2F;* 对DML操作记录Undo Log *&#x2F;                  |   ---------------------------------                  -&gt; | trx_undo_report_row_operation() |                      ---------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>btr_cur_ins_lock_and_undo()</code>检查相关的 lock 并根据事务决定是否记录 Undo Log, 假如需要记录undo log而<code>trx_undo_report_row_operation()</code>根据DML类型例如<code>update</code>, <code>insert</code>或者<code>delete</code>进行写undo log的操作。</p><h3 id="写入undo-log"><a href="#写入undo-log" class="headerlink" title="写入undo log"></a>写入undo log</h3><p>在事务启动时，我们为其分配了回滚段, 在<code>trx_undo_report_row_operation()</code>即真正写入undo log的操作中，我们需要为事务申请 Undo Log(trx_undo_assign_undo())，<strong>对于临时表记录 Undo Log 不需要写 Redo Log</strong></p><h3 id="事务提交"><a href="#事务提交" class="headerlink" title="事务提交"></a>事务提交</h3><p>入口函数: <code>trx_commit() --&gt; trx_commit_low()</code></p><p>在事务 commit 阶段，我们需要对 Undo Log 做一些处理.</p><p>对于 Insert Record 操作，我们可以直接清理 Undo Log, 因为 Insert 操作的记录只是对于本事务可见，所以它们不再需要被访问. 首先判断 Insert Record 操作产生的 Undo Log 是否可以被重用，并设置状态为<code>TRX_UNDO_CACHED</code>或者<code>TRX_UNDO_TO_FREE</code>. 能否被复用的逻辑是该 Undo Log 所使用的 Page 数量为 1，并且所占 Page 的空间不足 3/4 即可被重用。</p><h3 id="事务回滚"><a href="#事务回滚" class="headerlink" title="事务回滚"></a>事务回滚</h3><p>事务在回滚后, 需要对修改过的 Record 做回滚处理, Record 的回滚逻辑是通过获取回滚段上 Undo Log Segment 的 Record 通过row_undo_ins()回滚 Insert 操作、row_undo_mod()回滚 Update 操作。</p><h2 id="浅析MVCC工作原理"><a href="#浅析MVCC工作原理" class="headerlink" title="浅析MVCC工作原理"></a>浅析MVCC工作原理</h2><p><strong>undo log在事务开启之前就产生，当事务提交的时候，不会删除undo log，因为可能需要rollback操作，要执行回滚（rollback）操作时，从缓存中读取数据。InnoDB会将事务对应的日志保存在删除list中，后台通过purge线程进行回收处理。</strong></p><p>以一条sql执行update、select过程来浅析MVCC的工作原理：</p><p>执行update操作，事务A提交时候（事务还没提交），会将数据进行备份，备份到对应的undo buffer，undo log保存了未提交之前的操作日志，User表数据肯定就是持久保存到InnoDB的数据文件IBD，默认情况。</p><p>这时事务B进行查询操作，是直接读undo buffer缓存的，这时事务A还没提交事务，要回滚（rollback），是不读磁盘的，先直接从undo buffer缓存读取。</p><p><img src="http://mkstatic.lianbian.net/202110112132609.png" alt="浅析MVCC工作原理"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>写这篇文章的时候，开始只是准备简单的写一写，但是发现看到一些好的文章资料，还是想着自己去慢慢的把它啃下来，通过自己的理解把图画出来，希望我们一起进步吧，有什么问题，可以加我微信或者留言讨论。</p><p>本篇文章使用的源码是<code>MySQL8.0.13</code>，MySQL是C++编写的，如果有兴趣的，可以直接关注「连边」订阅号，回复<code>mysql8013</code>获取源码包。</p><p>我是直接使用<code>IntelliJ IDEA</code>编辑器，直接解压打开源码的，然后根据文中的关键字搜索文件代码即可。</p><h3 id="巨人的肩膀"><a href="#巨人的肩膀" class="headerlink" title="巨人的肩膀"></a>巨人的肩膀</h3><p><a href="https://www.leviathan.vip/2019/02/14/InnoDB%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%88%86%E6%9E%90-Undo-Log/">https://www.leviathan.vip/2019/02/14/InnoDB%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%88%86%E6%9E%90-Undo-Log/</a></p><p>衷心感谢每一位认真读文章的人，我是连边，专注于Java和架构领域，坚持撰写有原理，有实战，有体系的技术文章。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL的undo日志</title>
      <link href="/2021/10/03/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E7%9A%84undo%E6%97%A5%E5%BF%97/"/>
      <url>/2021/10/03/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E7%9A%84undo%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<p>大家好，我是连边，这是我的第<code>25</code>篇原创文章。</p><p>今天这篇文章给大家带来MySQL中另外一个重要的日志 - <code>undo log</code>。</p><h2 id="文章导读"><a href="#文章导读" class="headerlink" title="文章导读"></a>文章导读</h2><p><img src="http://mkstatic.lianbian.net/202110141040653.png" alt="undo log文章导读"></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><code>undo log</code>是innodb引擎的一种日志，在事务的修改记录之前，会把该记录的原值（before image）先保存起来（undo log）再做修改，以便修改过程中出错能够<strong>恢复原值</strong>或者其他的事务<strong>读取</strong>。</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>从概念的定义不难看出<code>undo log</code>的两个作用：</p><ol><li><strong>事务回滚 - 原子性：</strong> undo log是为了实现事务的原子性而出现的产物，事务处理的过程中，如果出现了错误或者用户执行<code>ROLLBACK</code>语句，MySQL可以利用undo log中的备份将数据恢复到事务开始之前的状态。</li><li><strong>多个行版本控制（MVCC）- 隔离性：</strong> undo log在MySQL InnoDB储存引擎中用来实现多版本并发控制，事务未提交之前，当读取的某一行被其他事务锁定时，它可以从undo log中分析出该行记录以前的数据是什么，从而提供该行版本信息，让用户实现非锁定一致性读取。</li></ol><h2 id="什么时候会生成undo-log"><a href="#什么时候会生成undo-log" class="headerlink" title="什么时候会生成undo log"></a>什么时候会生成undo log</h2><p>在事务中，进行以下四种操作，都会创建<code>undo log</code>：</p><ol><li><code>insert</code>用户定义的表</li><li><code>update</code>或者<code>delete</code>用户定义的表</li><li><code>insert</code>用户定义的临时表</li><li><code>update</code>或者<code>delete</code>用户定义的临时表</li></ol><h2 id="存放在哪里？"><a href="#存放在哪里？" class="headerlink" title="存放在哪里？"></a>存放在哪里？</h2><p>既然是一种日志，<strong>储存在什么目录？</strong> 又是<strong>怎样储存的？</strong></p><h3 id="储存在什么目录？"><a href="#储存在什么目录？" class="headerlink" title="储存在什么目录？"></a>储存在什么目录？</h3><p>这里要需要说明一下，在<code>MySQL5.6.3</code>之前的版本中，这个<code>undo tablespace</code>是和<code>system tablespace</code>系统表空间存放在一起的，也就是没有单独的<code>undo log</code>文件，直接存放在<code>ibdata1</code>文件里边，在<code>MySQL5.6.3</code>之后的版本中，MySQL支持将undo log tablespace单独剥离出来，但这个特性依然很鸡肋：</p><ol><li>要在安装数据库的时候，就指定好独立undo tablespace，在安装完成后不可更改；</li><li>undo tablespace的space id必须从1开始，无法增加或者删除undo tablespace；</li></ol><p>特意安装了<code>MySQL5.6.39</code>验证一波：</p><p><img src="http://mkstatic.lianbian.net/202110131612277.png" alt="undo tablespace表空间设置"></p><p>到了<code>MySQL5.7</code>版本，终于引入期待已久的功能：即在线truncate undo tablespace（解决了第一个鸡肋点，可以在安装数据库之后更改undo tablespace）</p><p>在<code>MySQL8.0</code>中，InnoDB再进一步，对undo log做了进一步的改进：</p><ol><li><strong>从8.0.3版本开始，默认undo tablespace的个数从0调整为2</strong>，也就是在8.0版本中，独立undo tablespace被默认打开。修改该参数为0会报warning并在未来不再支持；</li><li>无需从space_id 1开始创建undo tablespace，这样解决了In-place upgrade或者物理恢复到一个打开了Undo tablespace的实例所产生的space id冲突。不过依然要求undo tablespace的space id是连续分配的；</li></ol><p>根据官方的MySQL结构图，我画了MySQL的结构简图，描述了undo log在数据库磁盘中的位置，只需要关注简图中画<strong>红色方框</strong>和<strong>绿色方框</strong>的模块。</p><p><img src="http://mkstatic.lianbian.net/202110121327568.png" alt="MySQL的结构简图"></p><p>我们会发现，随着MySQL版本的迭代，已经把undo log单独剥离出来了，那我们思考一下：<strong>为什么要支持把undolog的tablespace单独剥离出来呢？</strong></p><p>这是从性能的角度来考量的。原先的undolog和系统表空间共享一个表空间，这样在记录undolog的时候，和其他的一些使用系统表空间来存储的操作肯定会存在磁盘I/O的竞争。但是如果我们把undolog的表空间单独拉出来，支持让其自定义目录和表空间的数量，这样我们可以把undolog配置单独的磁盘目录，提高undo log日志的读写性能，也能方便DBA操作。</p><p>阅读到这里，我们弄清楚了undo log是储存在单独的undo tablespace，接下来我们继续研究undo tablespace是以什么样的结构储存日志内容的。</p><h3 id="undo-tablespace-表空间"><a href="#undo-tablespace-表空间" class="headerlink" title="undo tablespace - 表空间"></a>undo tablespace - 表空间</h3><p>在MySQL中，undo tablespace定义了回滚段 rollback segments 用来存放undo log。</p><p>我们这里来看一下undo tablespace的结构体源码。</p><p>（ps：我们还是要养成看源码的习惯，我们搜索到的知识观点很多，如何甄别观点的对与错，只有从源码层面找到答案，当然这里看MySQL源码只是为了进一步说明undo tablespace表空间定义了多个rollback segments - rseg）</p><p>我的源码版本是<code>8.0.13</code>，可以给订阅号「连边」发送指令<code>mysql8013</code>获取源码包，也可以自己在github上找对应的版本。</p><p><strong>unbo tablespace表空间结构体源码路径</strong></p><p><code>mysql-server-mysql-8.0.13/storage/innobase/include/trx0purge.h</code></p><p><strong>undo tablespace结构体定义</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;** An undo::Tablespace object is used to easily convert betweenundo_space_id and undo_space_num and to create the automatic file_nameand space name.  In addition, it is used in undo::Tablespaces to trackthe trx_rseg_t objects in an Rsegs vector. So we do not allocate theRsegs vector for each object, only when requested by the constructor. *&#x2F;struct Tablespace &#123; &#x2F;** ... **&#x2F; private:  &#x2F;** Undo Tablespace ID. *&#x2F;  space_id_t m_id;  &#x2F;** Undo Tablespace number, from 1 to 127. This is the  7-bit number that is used in a rollback pointer.  Use id2num() to get this number from a space_id. *&#x2F;  space_id_t m_num;  &#x2F;** The tablespace name, auto-generated when needed from  the space number. *&#x2F;  char *m_space_name;  &#x2F;** The tablespace file name, auto-generated when needed  from the space number. *&#x2F;  char *m_file_name;  &#x2F;** The tablespace log file name, auto-generated when needed  from the space number. *&#x2F;  char *m_log_file_name;  &#x2F;** List of rollback segments within this tablespace.  This is not always used. Must call init_rsegs to use it. *&#x2F;  Rsegs *m_rsegs;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上边的源码可知，在我们的undo tablespace表空间结构体定义里边，有<code>Rsegs</code>的定义，这个就是我们前边说的<code>回滚段（Rollback Segments）</code>，我们继续从源码来研究<code>回滚段（Rollback Segments）</code>结构体。</p><h3 id="resg-回滚段"><a href="#resg-回滚段" class="headerlink" title="resg - 回滚段"></a>resg - 回滚段</h3><p><strong>回滚段结构体源码路径</strong></p><p><code>mysql-server-mysql-8.0.13/storage/innobase/include/trx0types.h</code></p><p><strong>回滚段rseg结构体源码</strong></p><p>undo log tablespace结构体中<code>Rsegs</code>是<code>trx_rseg_t</code>的<code>std::vector</code>封装</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;** The rollback segment memory object *&#x2F;struct trx_rseg_t &#123;  &#x2F;*--------------------------------------------------------*&#x2F;  &#x2F;** rollback segment id &#x3D;&#x3D; the index of its slot in the trx  system file copy *&#x2F;  ulint id;  &#x2F;** mutex protecting the fields in this struct except id,space,page_no  which are constant *&#x2F;  RsegMutex mutex;  &#x2F;** space ID where the rollback segment header is placed *&#x2F;  space_id_t space_id;  &#x2F;** page number of the rollback segment header *&#x2F;  page_no_t page_no;  &#x2F;** page size of the relevant tablespace *&#x2F;  page_size_t page_size;  &#x2F;** maximum allowed size in pages *&#x2F;  ulint max_size;  &#x2F;** current size in pages *&#x2F;  ulint curr_size;  &#x2F;*--------------------------------------------------------*&#x2F;  &#x2F;* Fields for update undo logs *&#x2F;  &#x2F;** List of update undo logs *&#x2F;  UT_LIST_BASE_NODE_T(trx_undo_t) update_undo_list;  &#x2F;** List of update undo log segments cached for fast reuse *&#x2F;  UT_LIST_BASE_NODE_T(trx_undo_t) update_undo_cached;  &#x2F;*--------------------------------------------------------*&#x2F;  &#x2F;* Fields for insert undo logs *&#x2F;  &#x2F;** List of insert undo logs *&#x2F;  UT_LIST_BASE_NODE_T(trx_undo_t) insert_undo_list;  &#x2F;** List of insert undo log segments cached for fast reuse *&#x2F;  UT_LIST_BASE_NODE_T(trx_undo_t) insert_undo_cached;  &#x2F;*--------------------------------------------------------*&#x2F;  &#x2F;** Page number of the last not yet purged log header in the history  list; FIL_NULL if all list purged *&#x2F;  page_no_t last_page_no;  &#x2F;** Byte offset of the last not yet purged log header *&#x2F;  ulint last_offset;  &#x2F;** Transaction number of the last not yet purged log *&#x2F;  trx_id_t last_trx_no;  &#x2F;** TRUE if the last not yet purged log needs purging *&#x2F;  ibool last_del_marks;  &#x2F;** Reference counter to track rseg allocated transactions. *&#x2F;  std::atomic&lt;ulint&gt; trx_ref_count;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每个回滚段维护了一个<code>Rollback Segment Header Page</code>，限于篇幅，这里不再深入研究，因为他不影响我们继续阅读，如果感兴趣的读者，可以看我最后贴出来的链接深入了解。</p><h3 id="undo-tablespace-储存结构示意图"><a href="#undo-tablespace-储存结构示意图" class="headerlink" title="undo tablespace 储存结构示意图"></a>undo tablespace 储存结构示意图</h3><p>为了巩固前边说的内容，这里我画了一张undo tablespace表空间结构图，希望能帮您巩固。</p><p><img src="http://mkstatic.lianbian.net/202110140914268.png" alt="undo tablespace表空间结构图"></p><h3 id="undo-log的类型"><a href="#undo-log的类型" class="headerlink" title="undo log的类型"></a>undo log的类型</h3><p>为了更好的处理回滚，undo log和之前说的redo log记录物理日志不一样，它是逻辑日志，<strong>可以认为当delete一条记录时，undo log中会记录一条对应的insert记录，反之亦然，当update一条记录时，它记录一条对应相反的update记录。</strong> 对应着undo log的两种类型，分别是 <code>insert undo log</code>和<code>update undo log</code>。</p><p><strong>insert undo log长啥样</strong></p><p>对于 insert 类型的sql，会在undo log中记录下方才你insert 进来的数据的ID，根据ID完成精准的删除。</p><p>insert 类型的undo log长下面这样：</p><p><img src="http://mkstatic.lianbian.net/202110141001577.png" alt="insert undo log-不是我画的"></p><p>可能你打眼一看上图就能知道各部分都有啥用。<br>但是，不知道你会不会纳闷这样一个问题：不是说对于insert 类型的undo log MySQL记录的是方才插入行ID吗？怎么上图整出来的了这么多Col1、Col2、Col2。<br>其实是MySQL设计的很周到，因为它是针对联合主键设计的。</p><p><strong>update undo log长啥样</strong></p><p>一条update sql对应undolog长如下这样：</p><p><img src="http://mkstatic.lianbian.net/202110141002721.png" alt="update undo log-不是我画的"></p><p>通过上边的基础铺垫，来到我们的实战分析环节。</p><h2 id="场景实战"><a href="#场景实战" class="headerlink" title="场景实战"></a>场景实战</h2><h3 id="事务怎么回滚的？"><a href="#事务怎么回滚的？" class="headerlink" title="事务怎么回滚的？"></a>事务怎么回滚的？</h3><p>举一个举例的案例来说明该过程。</p><p><strong>insert类型的undo log</strong></p><p>对于insert类型的sql，会在undo log中记录下insert 进来的数据的ID，当你想roll back时，根据ID完成精准的删除。<br>对于delete类型的sql，会在undo log中记录方才你删除的数据，当你回滚时会将删除前的数据insert 进去。<br>对于update类型的sql，会在undo log中记录下修改前的数据，回滚时只需要反向update即可。<br>对于select类型的sql，别费心了，select不需要回滚。<br>先看一个简单的insert undo log 链条</p><p><img src="http://mkstatic.lianbian.net/202110141025637.png" alt="insert undo log链条-不是我画的"></p><p>有一个注意点：因为单纯的insert sql不涉及多MVCC的能力。<br>所以一旦事务commit，这条insert undo log就可以直接删除了。</p><p><strong>update类型的undo log</strong></p><p>为了方便画图，重点突出链条的概念我省略了update undo log的部分内容<br>一个事物A开启后插图了一条记录：name = tom，MySQL会记录下这样一条undo log</p><p><img src="http://mkstatic.lianbian.net/202110141049207.png" alt="undo log记录-不是我画的"></p><p>随后先后来了两个事物：<br>事物B，事物ID=61，它执行sql将name 改成jerry。<br>事物C，事物ID=62，它执行sql将name 改成tom。<br>于是MySQL记录下这样一条新的undo log</p><p><img src="http://mkstatic.lianbian.net/202110141031889.png" alt="事务执行逻辑-不是我画的"></p><p>你可以看到，MySQL会将对一行数据的修改undo log通过DATA_ROLL_ID指针连接在一起形成一个undo log链表链条。这样事物C如果想回滚，他会将数据回滚到事物B修改后的状态。而事物B想回滚他会将数据回滚到事物A的状态。</p><h3 id="浅谈MVCC工作原理"><a href="#浅谈MVCC工作原理" class="headerlink" title="浅谈MVCC工作原理"></a>浅谈MVCC工作原理</h3><p><strong>undo log在事务开启之前就产生，当事务提交的时候，不会删除undo log，因为可能需要rollback操作，要执行回滚（rollback）操作时，从缓存中读取数据。InnoDB会将事务对应的日志保存在删除list中，后台通过purge线程进行回收处理。</strong></p><p>还是以一条sql执行update、select过程来浅析MVCC的工作原理：</p><p>执行update操作，事务A提交时候（事务还没提交），会将数据进行备份，备份到对应的undo buffer，undo log保存了未提交之前的操作日志，User表数据肯定就是持久保存到InnoDB的数据文件IBD，默认情况。</p><p>这时事务B进行查询操作，是直接读undo buffer缓存的，这时事务A还没提交事务，要回滚（rollback），是不读磁盘的，先直接从undo buffer缓存读取。</p><p><img src="http://mkstatic.lianbian.net/202110141032350.png" alt="浅析MVCC工作原理-不是我画的"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇文章到这里就写完了，从<code>undo log</code>概念出发，依次介绍了生成undo log、存放在哪里并且以什么方式储存的，最后结合场景实战分析了<code>undo log</code>的变化过程。</p><p>文章中使用的源码是<code>MySQL8.0.13</code>，如果有兴趣的，可以直接关注「连边」订阅号，回复<code>mysql8013</code>获取源码包。Java同学的快捷查看方式：解压源码，使用<code>IntelliJ IDEA</code>编辑器，然后根据文中的文件路径查看代码即可。</p><p>如果对文章有什么疑问或者觉得哪里不对的地方，欢迎留言或者直接加我微信跟我沟通。</p><p>衷心感谢每一位认真读文章的人，我是连边，专注于Java和架构领域，坚持撰写有原理，有实战，有体系的技术文章。</p><p><img src="http://mkstatic.lianbian.net/202110141058630.png" alt="连边的个人微信号"></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p>InnoDB的事务分析-Undo-Log -  <a href="https://www.leviathan.vip/2019/02/14/InnoDB%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%88%86%E6%9E%90-Undo-Log/">https://www.leviathan.vip/2019/02/14/InnoDB%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%88%86%E6%9E%90-Undo-Log/</a></p><p>MySQL · 引擎特性 · InnoDB undo log 漫游 - <a href="http://mysql.taobao.org/monthly/2015/04/01/">http://mysql.taobao.org/monthly/2015/04/01/</a></p><p>简介undo log、truncate、以及undo log如何帮你回滚事物 - <a href="https://juejin.cn/post/6900796508342321166">https://juejin.cn/post/6900796508342321166</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>项目中兴</title>
      <link href="/2021/10/03/%E7%AE%A1%E7%90%86/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%85%B4/"/>
      <url>/2021/10/03/%E7%AE%A1%E7%90%86/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%85%B4/</url>
      
        <content type="html"><![CDATA[<p>大家好，我是连边。</p><p>这是我的第 <code>24</code> 篇原创文章；</p><p>这次不写技术文章，写一篇偏<strong>团队管理</strong>的文章。</p><p>阅读本篇文章大约需要<strong>5分钟</strong>。</p><h2 id="文章导读"><a href="#文章导读" class="headerlink" title="文章导读"></a>文章导读</h2><p>做技术还是做管理，是程序员这个职业的两个发展方向，但是我认为，这两个方向是不冲突的。做为程序员，懂管理能有效的向上管理，在我的职业生涯中，第一次做管理是从半路上接手一个团队（项目），这应该也是大多数程序员的实际过程，一般是由于上一任领导的升迁或者离职，职位空缺出来后从内部提升管理者。</p><p>整篇文章是以一个<strong>中层管理人员</strong>的角色进行，希望这篇文章能给读者带来帮助。</p><p><img src="http://mkstatic.lianbian.net/202110051133670.png" alt="项目中兴"></p><h2 id="分析团队"><a href="#分析团队" class="headerlink" title="分析团队"></a>分析团队</h2><p>在公司技术团队“低迷”的时候接管的团队，举个实际事例来解析低迷，其他部门可以随便甩锅给技术部门，最后不管是不是技术问题，最后技术团队总会把锅“勇敢”的背下来，也不多做争辩，但也不过多的去解决实际生产问题，总存在一种“这个问题技术真的不能解决的”的状态。</p><p>整个团队就没有活力，来了锅就背一背，来了问题就听一听，来了任务做一做，不做过多的沟通，不关心结果。</p><p>最后整个团队的士气与战斗力可想而已。</p><h2 id="培养士气"><a href="#培养士气" class="headerlink" title="培养士气"></a>培养士气</h2><p>不管是团队还是个人，低迷的状态下，战斗力是无从说起的。所以我要着手解决的第一个问题就是，<strong>怎么去提升团队士气</strong>这个问题。</p><p>低迷不是一下就低迷下去的，而是慢慢养成的，要培养士气也不是一朝一夕的。</p><p>我从两方面来解决这个问题：</p><h3 id="重视小事情"><a href="#重视小事情" class="headerlink" title="重视小事情"></a>重视小事情</h3><p>从小的事情里边积累成就感和士气。</p><p>这里的小事情，具体就是客服部门给技术部门提出的BUG和产品优化。要端正态度，对BUG不能不管不问，一定要找到原因，是技术的原因，还是产品设计的原因，能立即解决的，就立即解决；</p><p>同时安排技术轮岗值班，做法也很简单，注册一个专门的值班QQ号，然后每天技术值班人员登录那个账号进行值班，客服人员有技术方面的问题，可以直接对接技术值班，然后由技术值班人员转交到团队内部来解决问题，给出答复。其实这种做法，挺程序员的，设计直接、简单、高效。</p><p>通过执行一段时间，慢慢的也会感受到客服部门同事对技术部门的改观，问题也能慢慢的解决，内部人员的业务能力也慢慢的提升。</p><p><strong>战斗力和士气是在小事情里边积累起来的。</strong></p><h3 id="知耻而后勇"><a href="#知耻而后勇" class="headerlink" title="知耻而后勇"></a>知耻而后勇</h3><p>对一个技术人员来说，技术不能解决问题，让别的团队任意甩锅又不能硬气的顶回去，是很憋屈（耻）的一件事情。是技术上的问题，就大胆的承认，以最积极的行动和态度来解决问题，而不是那种不了了之的状态，想必大家都想呆在<strong>有底气又硬气的团队</strong>（这里请和怼人理智的区分开来）。</p><p><strong>软绵绵的团队谁都不想呆，想呆硬气的团队。</strong></p><h2 id="利益得失"><a href="#利益得失" class="headerlink" title="利益得失"></a>利益得失</h2><p>利益，做为管理者，一定不要避讳这个词。</p><p>因为只有领导拿到好的结果，团队成员拿到好的报酬，才是你这个中层管理者最应该做的事情，也是衡量中层管理者的管理水平的标准。</p><p>利益这个词可以很广，这里我不直接讲解什么是利益，因为直接讲解什么是利益也没有太多的意思，反而感觉很功利化，我从三层（领导、中层、员工）的角色想法来分析。</p><h3 id="领导想什么"><a href="#领导想什么" class="headerlink" title="领导想什么"></a>领导想什么</h3><p>领导想做一个商城，你的第一概念是什么？淘宝？京东？</p><p>你的概念不重要，因为领导有领导层次的出发点，这个时候，你就一定要把握准<strong>领导需要一个什么样子的结果。</strong>然后再去具体的事情，具体沟通，比如：工期、功能、福利 …</p><p><strong>领导利益：拿到一个好的结果（产品）。</strong></p><h3 id="要你做什么"><a href="#要你做什么" class="headerlink" title="要你做什么"></a>要你做什么</h3><p>当领导提出做一个商城的需求的时候，要继续和他沟通。</p><ol><li>具体是要做成什么样子，做这个商城的目的是做什么？</li><li><strong>什么时候要上线？</strong></li><li>理性分析当前团队的情况，<strong>切记不能瞎承诺</strong>；</li><li><strong>做成MVP版本（最小运行版本，一般拿着去试探市场）行不行？</strong></li><li><strong>和团队商量之后，给出时间安排</strong>；</li><li>记得维持平衡，<strong>领导与中层与团队成员的平衡</strong>；</li><li>项目奖金的协商</li><li>…</li></ol><p><strong>中层利益：把握当前的团队到底能做成什么样子的结果（产品），不要让项目后期陷入被动。</strong></p><h3 id="员工想什么"><a href="#员工想什么" class="headerlink" title="员工想什么"></a>员工想什么</h3><p>员工想的什么？<strong>事少钱多离家近。</strong></p><p>就是这几个字，其中最重要的两个字就是<strong>事、钱</strong>。</p><p>做的事情，对于喜欢挑战的同事，能不能带来成长，能不能对以后有帮助；</p><p>工资待遇，值不值得员工心流的付出。</p><p><strong>尽自己的最大能力，给予和你一起并肩作战的兄弟们争取最好的利益（工资、假期、好的项目）</strong></p><p><strong>员工利益：有认同感的付出，不委屈的付出。</strong></p><p>围绕以上三个角色的利益，中层管理者慢慢去消化，最后权衡把“利益”最大化。</p><h2 id="团队目标"><a href="#团队目标" class="headerlink" title="团队目标"></a>团队目标</h2><p>前边是讲我们慢慢的怎么样把一个低迷的团队慢慢的培养起来，接下来我们就是有一支团队准备好了，你作为中层管理人员，怎么样去指挥这个团队来做好我们的项目。</p><h3 id="目标阶段化"><a href="#目标阶段化" class="headerlink" title="目标阶段化"></a>目标阶段化</h3><p>大到一个项目，小到一个需求，如果真是时间紧，任务重的情况，可以使用<strong>目标阶段化</strong>的方式，一个项目分成N个阶段，先把最核心，最紧急的需求与功能、放在第一个阶段里边来完成，因为<strong>精力是有限的</strong>，分段之后，阶段内可以专注于本阶段的目标。</p><h3 id="必须让领导知道团队目标与任务"><a href="#必须让领导知道团队目标与任务" class="headerlink" title="必须让领导知道团队目标与任务"></a>必须让领导知道团队目标与任务</h3><p>不知道大家有没有呆过这种团队，加班、各种忙碌得起飞，但是上边的领导一直团队不满意。</p><p>两个原因：</p><ol><li>短期的话，就是团队的产出不是他想要的；</li><li>长期的话，就是不知道团队在忙啥；</li></ol><p>怎么样让领导知道团队目标与阶段任务，我的建议是 <strong>最终会议领导要到</strong> 并 <strong>邮件说清楚团队现阶段目标</strong>。</p><h3 id="团队成员必须知道自己的目标与任务"><a href="#团队成员必须知道自己的目标与任务" class="headerlink" title="团队成员必须知道自己的目标与任务"></a>团队成员必须知道自己的目标与任务</h3><p>今天要做什么？要完成什么功能？</p><p>那么，明天呢？</p><p>团队成员这点必须要知道这一点，不然整天都是浑浑噩噩的，可以找合适的项目管理软件来协助，我们那时候使用的禅道。然后，在开部门会议的时候，反复强调，如果部门人员少，中层管理应该知道团队成员该阶段是在忙什么。</p><p><strong>有目标才能前进，不管是领导，还是团队成员都要有清晰目标。</strong></p><h2 id="知人善用"><a href="#知人善用" class="headerlink" title="知人善用"></a>知人善用</h2><h3 id="分析团队成员特长"><a href="#分析团队成员特长" class="headerlink" title="分析团队成员特长"></a>分析团队成员特长</h3><p>团队的每个成员都有其特色、特长，有的胆子大，有的心细，有的擅长写SQL，有的擅长利用中间件。</p><p>在项目紧急的时候，一定要找到团队成员熟悉做什么，擅长做什么，这样才能有效提升团队效率。</p><p>而在团队不忙的时候，需要相互学习，相互取经。</p><h3 id="责任到人"><a href="#责任到人" class="headerlink" title="责任到人"></a>责任到人</h3><p>比如重要营销活动的模块，就需要专门的团队或者个人来负责。在当时，我们团队我就专门找了一个细心的人，专门负责月度营销活动功能开发。从产品需求会议到活动的产出，都有该同事整体跟进与负责。</p><h3 id="砍掉老鼠屎"><a href="#砍掉老鼠屎" class="headerlink" title="砍掉老鼠屎"></a>砍掉老鼠屎</h3><p>花成本砍掉那些搞崩心态的员工，给予机会，并加以说明，如果最后还是没有无效果，可以选择优化掉，不要低估一个人对团队的破坏能力。</p><p><strong>事情不是一个人能做好的， 根据团队成员来扬长避短，团队效率才会蹭蹭的上去。</strong></p><h2 id="一起抗"><a href="#一起抗" class="headerlink" title="一起抗"></a>一起抗</h2><p>最后的最后，也是最重要的，遇到事情，一定要和兄弟们一起抗。</p><p>不要领导说什么什么问题，你就很干脆利落的直接甩锅给你的团队成员，我见过不少这样子的中层领导，他只管自己在领导眼中印象，而不管自己兄弟的利益，还是那句话，<strong>中层的能力就是掌握平衡的能力（正确的废话）</strong>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​    这篇文章到这里就写完了，这篇文章中心思想就是<strong>以自己的亲生经历总结的中层管理者的那些心法与做法</strong>，希望对你有帮助，如果觉得哪里不合理的地方，也可以留言告诉我。</p><p>​    衷心感谢每一位认真读文章的人，我是连边，专注于Java和架构领域，坚持撰写有原理，有实战，有体系的技术文章。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cms回收为什么要停顿两次？</title>
      <link href="/2021/10/01/%E5%90%8E%E7%AB%AF/java/jvm/CMS%E5%9B%9E%E6%94%B6%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%81%9C%E9%A1%BF%E4%B8%A4%E6%AC%A1/"/>
      <url>/2021/10/01/%E5%90%8E%E7%AB%AF/java/jvm/CMS%E5%9B%9E%E6%94%B6%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%81%9C%E9%A1%BF%E4%B8%A4%E6%AC%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="cms回收为什么要停顿两次？"><a href="#cms回收为什么要停顿两次？" class="headerlink" title="cms回收为什么要停顿两次？"></a>cms回收为什么要停顿两次？</h2><p><strong>答案：</strong>以最少的STW成本，找出要清理的垃圾。</p><h3 id="什么是STW"><a href="#什么是STW" class="headerlink" title="什么是STW"></a>什么是STW</h3><p>暂停用户线程 - <strong>Stop The World</strong></p><h3 id="为什么要STW"><a href="#为什么要STW" class="headerlink" title="为什么要STW"></a>为什么要STW</h3><p>如果不暂停用户线程，就意味着不断有垃圾的产生，永远也清理不干净；</p><p>其次，因为清理垃圾用的标记清除算法，用户线程的运行必然会导致对象的引用关系发生变化，即标记的变化，，这样就会导致两种情况：漏标和错标。</p><ol><li><strong>漏标：</strong>原来不是垃圾，但是在GC的过程中，用户线程将其引用关系修改，变成了null引用，成为了垃圾，这种情况还好，无非就是产生了一些浮动垃圾，下次GC再清理就好了；</li><li><strong>错标：</strong>与漏标对应的就是错标，一个对象，开始没有引用，但是GC的同时，用户线程又重新引用了它，但是这个时候，我们把它当作垃圾清理掉了，这将会导致程序运行错误。</li></ol><h3 id="三色标记算法"><a href="#三色标记算法" class="headerlink" title="三色标记算法"></a>三色标记算法</h3><p>前边讲了两点，什么是暂停用户线程和为什么要暂停用户线程，现在接着讲cms是怎么样来识别垃圾对象的。</p><p><strong>垃圾对象：</strong>简单的说，就是判断是否有引用，如果某个对象，已经没有任何引用指向它，就把该对象定义为垃圾对象，即我们要清理的对象，这个的核心就是可达性分析算法。</p><p><strong>标记步骤：</strong></p><ol><li>开所有的对象都是白色</li><li>直接关联的对象设置为灰色</li><li>遍历灰色对象的所有引用，灰色对象本身置为黑色，引用置为灰色</li><li>重复步骤3，直到没有灰色对象为止</li><li>结束时，黑色对象存活，白色对象回收</li></ol><p><strong>这个过程正确执行的前提是没有其他线程改变对象间的引用关系。</strong></p><h3 id="cms清理步骤"><a href="#cms清理步骤" class="headerlink" title="cms清理步骤"></a>cms清理步骤</h3><p><img src="http://mkstatic.lianbian.net/20210913155000.png" alt="cms清理步骤"></p><ol><li>初试标记</li></ol><p>初始标记仅仅只是标记一下GC Roots能直接关联到的对象，速度很快。初始标记的过程是需要触发STW的，不过这个过程非常快，而且初试标记的耗时不会因为堆空间的变大而变慢，是可控的，因此可以忽略这个过程导致的短暂停顿。</p><ol start="2"><li>并发标记</li></ol><p>并发标记就是将初始标记的对象进行深度遍历，以这些对象为根，遍历整个对象图，这个过程耗时较长，而且标记的时间会随着堆空间的变大而变长。不过好在这个过程是不会触发STW的，用户线程仍然可以工作，程序依然可以响应，只是程序的性能会受到一点影响。因为GC线程会占用一定的CPU和系统资源，对处理器比较敏感。CMS默认开启的GC线程数是：(CPU核心数+3)/4，当CPU核心数超过4个时，GC线程会占用不到25%的CPU资源，如果CPU数不足4个，GC线程对程序的影响就会非常大，导致程序的性能大幅降低。</p><ol start="3"><li>重新标记</li></ol><p>由于并发标记时，用户线程仍在运行，这意味着并发标记期间，用户线程有可能改变了对象间的引用关系，可能会发生两种情况：一种是原本不能被回收的对象，现在可以被回收了，另一种是原本可以被回收的对象，现在不能被回收了。针对这两种情况，CMS需要暂停用户线程，进行一次重新标记。</p><ol start="4"><li>并发清理</li></ol><p>重新标记完成后，就可以并发清理了。这个过程耗时也比较长，且清理的开销会随着堆空间的变大而变大。不过好在这个过程也是不需要STW的，用户线程依然可以正常运行，程序不会卡顿，不过和并发标记一样，清理时GC线程依然要占用一定的CPU和系统资源，会导致程序的性能降低。</p><h3 id="cms为什么要停顿两次？"><a href="#cms为什么要停顿两次？" class="headerlink" title="cms为什么要停顿两次？"></a>cms为什么要停顿两次？</h3><p>以最少的STW成本，找出要清理的垃圾。</p><p>这里我们可以抽象的理解为<strong>全量垃圾</strong>和<strong>增量垃圾</strong>的两个概念。</p><p>清理的第一步，就是为了找出<strong>产生全量垃圾根对象</strong>，并打上标记为<strong>初始标记（耗时短，STW）</strong>，同时把用户访问线程打开，并让后台线程去执行第二步<strong>并发标记</strong>，这些其实就是找出我们<strong>全量垃圾</strong>。</p><p>然后找出在我们执行<strong>并发标记</strong>这段时间由用户线程产生的<strong>增量垃圾</strong>进行<strong>重新标记（耗时短，STW）</strong>，这个时候的GC标记，就是截止到当前时间，完整的垃圾信息，再执行<strong>并发清理</strong>。</p><h3 id="以下是草稿纸"><a href="#以下是草稿纸" class="headerlink" title="以下是草稿纸"></a>以下是草稿纸</h3><p><a href="https://zhuanlan.zhihu.com/p/340530051">https://zhuanlan.zhihu.com/p/340530051</a></p><p>new String(“a”)这个才是要回收，a只是一个64位的引用，它在栈空间，不在堆空间。new String(“a”)这个对象只要没有被其他引用，a=null后，它就再也不会被连接上了。a引用想再连上，也无能为力了。</p><p>三色标记与读写屏障</p><p><a href="https://www.jianshu.com/p/12544c0ad5c1">https://www.jianshu.com/p/12544c0ad5c1</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>手把手教你实现两阶段提交</title>
      <link href="/2021/09/23/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%AE%9E%E7%8E%B0%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/"/>
      <url>/2021/09/23/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%AE%9E%E7%8E%B0%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/</url>
      
        <content type="html"><![CDATA[<p>大家好，我是连边。</p><p>这是我的第 <code>23</code> 篇原创文章，上一篇原创文章讲了MySQL redo log 与 binlog的两个日志，在文章的最后，浅谈了<code>redo log</code> 与 <code>binlog</code> 的两阶段提交，今天这篇文章给大家讲解广义上的两阶段提交。</p><p>阅读本篇文章大约需要<strong>10分钟</strong>。</p><p>文章分为理论和实战部分，理论部分讲述两阶段提交的概念与实现方式；通过理论的铺垫之后，实战部分我们会动手写代码、创建数据库，实战一个银行转账的案例，希望通过这个案例，更通透理解两阶段提交。</p><h2 id="文章导读"><a href="#文章导读" class="headerlink" title="文章导读"></a>文章导读</h2><p><img src="http://mkstatic.lianbian.net/202110031042434.png" alt="两阶段提交"></p><h2 id="理论概述"><a href="#理论概述" class="headerlink" title="理论概述"></a>理论概述</h2><h3 id="分布式一致性"><a href="#分布式一致性" class="headerlink" title="分布式一致性"></a>分布式一致性</h3><p>分布式场景下，多个服务同时对服务一个流程，比如电商下单场景，需要支付服务进行支付、库存服务扣减库存、订单服务进行订单生成、物流服务更新物流信息等。如果某一个服务执行失败，或者网络不通引起的请求丢失，那么整个系统可能出现数据不一致的原因。</p><p>上述场景就是分布式一致性的问题，其根本原因在于数据的分布式操作，引起本地事务无法保障数据的原子性。</p><p>分布式一致性问题的解决思路有两种，一种是<strong>分布式事务</strong>，一种是尽量通过业务流程避免分布式事务。</p><p><strong>分布式事务</strong>是直接解决问题，而业务规避其实是通过解决出问题的地方。</p><p>在真实的业务场景中，最优雅的解决方案就是业务规避。</p><h3 id="分布式事务分类"><a href="#分布式事务分类" class="headerlink" title="分布式事务分类"></a>分布式事务分类</h3><p>分布式事务实现方案从类型上分为刚性事务和柔性事务。</p><p>刚性事务：通常无业务改造，强一致性，原生支持回滚/隔离性，低并发，适合短事务<code>（XA协议（2PC、JTA、JTS）、3PC）</code>；</p><p>柔性事务：有业务改造，最终一致性，实现补偿接口，实现资源锁定接口，高并发，适合长事务<code>(TCC/FMT、Saga(状态机模式，Aop模式)、本地事务消息、消息事务（半消息）、最多努力通知型事务)</code>；</p><h3 id="2PC定义（二阶段定义）"><a href="#2PC定义（二阶段定义）" class="headerlink" title="2PC定义（二阶段定义）"></a>2PC定义（二阶段定义）</h3><pre class="line-numbers language-二阶段提交```" data-language="二阶段提交```"><div class="caption"><span>是指在```计算机网络```以及```数据库```领域内，为了使基于```分布式系统```架构下所有节点在进行事务提交时保持一致性而设计的一种算法。通常，二阶段提交也被称为一种协议。</span></div><code class="language-二阶段提交```">在我们的分布式系统中，每个节点虽然可以知道自己的操作成功或者失败，但是不知道其他的节点的成功或者失败，当一个事务跨越多个节点时，为了保持事务的ACID特性，需要引入一个作为协调者的组件来统一掌控所有节点（称作参与者）的操作结果并最终决定这些节点是否要进行真正的提交。这里可以回忆下redo log和binlog的两阶段提交。因此，二阶段提交的算法思路可以概括为：**参与者将操作成败通知协调者，再由协调者根据所有参与者的反馈结果决定各参与者是否要&#96;&#96;&#96;提交操作&#96;&#96;&#96;还是&#96;&#96;&#96;回滚操作&#96;&#96;&#96;。**## 第一阶段（提交请求阶段）1. 协调者节点向所有参与者节点询问是否可以执行提交操作，并**开始等待各参与节点的响应**；2. 参与者节点执行协调者节点询问发起的所有事务操作；3. 各参与节点响应协调者节点发起的询问。如果参与者节点的事务执行成功，则它返回一个“YES”消息；如果参与者节点事务执行失败，则返回一个“NO”消息。第一阶段，也被称为**投票阶段**，即各个参与者投票是否要继续接下来的提交操作。## 第二阶段（提交执行阶段）### 成功则提交当协调者节点从所有参与者节点获得的响应消息都为“YES”时：1. 协调者节点向所有参与者节点发出“正式提交”的请求；2. 参与者节点正式完成操作，并释放在整个事务期间内占用的资源；3. 参与者节点向协调者节点发送“完成”消息；4. 协调者节点收到所有参与者节点的“完成”消息后，完成事务。### 失败则回滚如果任一参与者节点在第一阶段返回的消息为“NO”，或者协调者节点在第一阶段的询问超时之前无法获取所有参与者节点的响应消息时：1. 协调者节点向所有参与者节点发出“回滚操作”的请求；2. 参与者节点利用之前写入的Undo信息执行回滚，并释放在整个事务期间内占用的资源；3. 参与者节点向协调者节点发送“回滚完成”消息；4. 协调者节点收到所有参与者节点的“完成”消息，取消事务。第二阶段，也被称为**完成阶段**，因为无论结果怎样，协调者都必须在此阶段结束当前事务。## 二阶段流程图![2PC流程图](http:&#x2F;&#x2F;mkstatic.lianbian.net&#x2F;202109281526655.png)## 实战### 实战概述通过对二阶段提交的理论讲解，想必对什么是二阶段提交有所了解，接下来通过一个银行转账的案例，来实战一个二阶段提交，让你彻底搞懂二阶段提交。案例：**ABC公司**为其客户提供银行转账业务，假设连边是该公司的客户，需要从连边在**中国银行的工资卡**上提取3000元到连边在**建设银行的房贷卡**上，用来还房贷。想一想，结合上边的理论部分，这个案例中，哪些是**协调者**，哪些是**参与者**？**ABC公司**为协调者，连边的**中国银行**和**建设银行**为参与者。### 实战流程图![实战流程图](http:&#x2F;&#x2F;mkstatic.lianbian.net&#x2F;202109281533996.png)### 模块设计**环境：**- &#96;&#96;&#96;java1.8+&#96;&#96;&#96;  - &#96;&#96;&#96;maven&#96;&#96;&#96;- &#96;&#96;&#96;mysql&#96;&#96;&#96;**模块划分：**1. 公用模块（bank-common）2. 客户（customer-client）3. 建设银行服务（ccb-server）4. 中国银行服务（boc-server）5. ABC公司 - TM协调者（transaction-manager）6. 协议封装（protocol）### 数据库设计**建设银行（ccb-server）**![ccb数据库视图](http:&#x2F;&#x2F;mkstatic.lianbian.net&#x2F;202109281800842.png)**中国银行（boc-server）**![boc数据库视图](http:&#x2F;&#x2F;mkstatic.lianbian.net&#x2F;202109281801752.png)**ABC公司 - TM协调者（transaction-manager）**![TM数据库视图](http:&#x2F;&#x2F;mkstatic.lianbian.net&#x2F;202109281801517.png)### 源码阅读源码，从&#96;&#96;&#96;客户（customer-client）&#96;&#96;&#96;项目入口开始阅读，关键的地方，我都加上了注释，整体源码读下来可能需要一点时间，但是对我们理解&#96;&#96;&#96;2pc&#96;&#96;&#96;有意义。**阅读源码的几个关键点：**1. 源码整体都是通过&#96;&#96;&#96;Handler + command&#96;&#96;&#96;的来连接处理逻辑的，如：&#96;&#96;&#96;java&#x2F;&#x2F; TRANSACTION_REQ_COMMAND &#x3D; transactionReqfinal String httpURL &#x3D; getHttpURL(node, Constants.TRANSACTION_REQ_COMMAND);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当看到上边这段代码，你就要去找<code>TransactionRequestHandler.class</code>，这里为了方便跟踪，定义了常量，idea环境可以直接通过跟踪常量跟踪到具体的代码位置。</p><ol start="2"><li>采用Java并发编程中的<code>CountDownLatch</code>，阅读的时候留意下</li></ol><p><strong>完整的源码，关注「连边」公众号，回复<code>2pc</code> 即可获取，观看源码的<code>README.md</code> 能够运行。</strong></p><p><strong>运行截图：</strong></p><ol><li>打包</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 需要替换自己的项目路径cd &#x2F;Library&#x2F;WebServer&#x2F;Documents&#x2F;java&#x2F;lianbian-2pcmvn -Dmaven.test.skip&#x3D;true package<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="http://mkstatic.lianbian.net/202110031007161.png" alt="打包成功截图"></p><ol start="2"><li>启动服务</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 启动 BOC serverjava -Xms256M -Xmx256m -jar &#x2F;Library&#x2F;WebServer&#x2F;Documents&#x2F;java&#x2F;lianbian-2pc&#x2F;boc-server&#x2F;target&#x2F;boc-server-1.0-SNAPSHOT.jar# 启动 CCB serverjava -Xms256M -Xmx256m -jar &#x2F;Library&#x2F;WebServer&#x2F;Documents&#x2F;java&#x2F;lianbian-2pc&#x2F;ccb-server&#x2F;target&#x2F;ccb-server-1.0-SNAPSHOT.jar# 启动 Transaction Manager serverjava -Xms256M -Xmx256m -jar &#x2F;Library&#x2F;WebServer&#x2F;Documents&#x2F;java&#x2F;lianbian-2pc&#x2F;transaction-manager&#x2F;target&#x2F;transaction-manager-1.0-SNAPSHOT.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://mkstatic.lianbian.net/202110031006015.png" alt="启动服务成功截图"></p><ol start="3"><li>模拟转账</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 模拟转账# 参数：转出银行  转出账号  转入银行  转入账号  转账金额java -Xms256M -Xmx256m -jar &#x2F;Library&#x2F;WebServer&#x2F;Documents&#x2F;java&#x2F;lianbian-2pc&#x2F;customer-client&#x2F;target&#x2F;customer-client-1.0-SNAPSHOT.jar BOC 1 CCB 2 20000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="http://mkstatic.lianbian.net/202110031011094.png" alt="交易成功"></p><p><img src="http://mkstatic.lianbian.net/202110031011223.png" alt="交易失败，余额不足"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​    这篇文章到这里就写完了，这篇文章其实很早就着手准备，但是在写的时候，还是感觉效率不高，要想一想怎么<strong>提升效率</strong>这个事情了。</p><p>​    <strong>完整的源码，关注「连边」公众号，回复<code>2pc</code> 即可获取，观看源码的<code>README.md</code> 能够运行。</strong></p><p>​    衷心感谢每一位认真读文章的人，我是连边，专注于Java和架构领域，坚持撰写有原理，有实战，有体系的技术文章。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL的redo log和binlog日志</title>
      <link href="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E7%9A%84redo%20log%E5%92%8Cbinlog%E6%97%A5%E5%BF%97/"/>
      <url>/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E7%9A%84redo%20log%E5%92%8Cbinlog%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<p>大家好，我是连边。</p><p>今天这篇文章给大家带来MySQL中重要的两个日志 - <code>redo log、binlog</code>，从理论概念出发，结合图解分析，看完这篇文章之后，你能对<code>redo log、binlog</code>有深入的理解。</p><h2 id="文章框架图"><a href="#文章框架图" class="headerlink" title="文章框架图"></a>文章框架图</h2><p><img src="http://mkstatic.lianbian.net/20210915164447.png" alt="MySQL两个日志"></p><h2 id="浅谈MySQL分层架构"><a href="#浅谈MySQL分层架构" class="headerlink" title="浅谈MySQL分层架构"></a>浅谈MySQL分层架构</h2><p>在讲具体的日志之前，先稍微铺垫下MySQL分层的架构，让大家知道<code>redo log、binlog</code>是由MySQL的哪一层产生的。</p><p><img src="http://mkstatic.lianbian.net/20210915095746.png" alt="MySQL分层架构图"></p><p>Mysql整体分为3层：客户端层，Server层和存储引擎层。我们的binlog日志，由Server层生成，redo log是innodb特有的日志，由innodb引擎生成。</p><h2 id="重做日志（redo-log）"><a href="#重做日志（redo-log）" class="headerlink" title="重做日志（redo log）"></a>重做日志（redo log）</h2><h3 id="什么是redo-log"><a href="#什么是redo-log" class="headerlink" title="什么是redo log"></a>什么是redo log</h3><p>innodb为了能够支持事务一系列操作，而事务有4种特性：<code>原子性、一致性、隔离性、持久性</code>，在事务操作中，要么全部执行，要么全部不执行，这就是事务的目的。而我们的redo log用来保证事务的持久性，即我们常说的ACID中的D。我们只需要知道它是通过一套什么样的机制，来保证持久性，就能掌握好redo log。</p><p>这里的说的持久性，是说最后落盘到redo log文件中（即常见的<code>ib_logfile</code>文件），因为最后我们异常情况的恢复，都是根据文件来做恢复的。</p><p>MySQL innodb是通过一套什么样的机制，来确保<strong>速度</strong>与<strong>redo log的可靠性</strong>的呢？</p><h3 id="WAL"><a href="#WAL" class="headerlink" title="WAL"></a>WAL</h3><p>在计算机体系中，CPU处理速度和硬盘的速度，是不在同一个数量级上的，为了让它们速度匹配，从而催生了我们的内存模块，但是内存有一个特点，就是掉电之后，数据就会丢失，不是持久的，我们需要持久化的数据，最后都需要存储到硬盘上。</p><p>innodb引擎设计者也利用了类似的设计思想，先写内存，再写硬盘，这样子就不会因为redo log而导致数据库性能问题。而在innodb中，这种技术有一个专业名称，叫做<strong>Write-Ahead Log（预先日志持久化）</strong></p><p><img src="http://mkstatic.lianbian.net/20210915103820.png" alt="先写buffer 再写磁盘"></p><h3 id="redo-log写入策略"><a href="#redo-log写入策略" class="headerlink" title="redo log写入策略"></a>redo log写入策略</h3><p>上边是保证了处理的速度，但是怎么样保证写入到硬盘的可靠性呢？</p><p>InnoDB引擎的设计者也设计了一种写入的策略，首先有一个后台线程，每隔1秒，就会把<code>redo log buffer</code>中的日志，调用write写到文件系统的<code>page cache</code>，然后调用<code>fsync</code>持久化到磁盘（即redo log文件 <code>ib_logfile0 ib_logfile1 </code>）。</p><p>为了控制 redo log写入策略，InnoDB提供了<code>innodb_flush_log_at_trx_commit</code>配置参数，它有三种取值：</p><ol><li>设置为 0 的时候，表示每次事务提交时都只是把 redo log 留在 redo log buffer 中 ;</li><li>设置为 1 的时候，表示每次事务提交时都将 redo log 直接持久化到磁盘；</li><li>设置为 2 的时候，表示每次事务提交时都只是把 redo log 写到 page cache。</li></ol><p><strong>如果不是对性能要求高的，一般把该参数设置为 1</strong></p><h3 id="redo-log的擦除"><a href="#redo-log的擦除" class="headerlink" title="redo log的擦除"></a>redo log的擦除</h3><p>通过上边的设计，<strong>速度</strong>和<strong>可靠性</strong>的问题都解决了，但是我们仔细想想，还会有什么问题？</p><p>随着文件的增加，落盘的速度会越来越慢，直到有一天 … </p><p>聪明的设计者这样子想着，如果我一直处理小文件，最大不能超过某个大小，不就行了？</p><p>也确实是这样子处理的，但是这里就涉及到一个删除日志文件的算法，即我们的<strong>redo log擦除</strong>。</p><p>redo log 的大小是固定的，比如可以配置一组4个文件，每个文件大小是8M，那么这个redo log总共就可以记录32M的操作，这个参数可以通过<code>innodb_log_file_size</code>设置。</p><p>下图是具体的擦除算法，ib_logfile 从头开始写，写到末尾就又回到开头循环写。</p><p><img src="http://mkstatic.lianbian.net/20210910212751.png" alt="擦除示意图 - 来自丁奇MySQL连边编辑"></p><p>write pos是当前记录的位置，一边写一边后移，写到第3号文件末尾后就回到0号文件开头。checkpoint是当前要擦除的位置，也是往后移动并且循环的，擦除记录前要把记录更新到数据文件，write pos与check point之间为剩余可用写入的空间。</p><p>何时会擦除redo log并更新到数据文件中</p><ol><li>系统空闲时</li><li>Redo log文件没有空闲空间时，即write pos追上check point的时候；</li><li>MySQL Server正常关闭时</li></ol><h3 id="crash-safe"><a href="#crash-safe" class="headerlink" title="crash-safe"></a>crash-safe</h3><p>有了以上这一些机制保障，我们可以相信redo log是可靠的，只要持久化到redo log文件中了，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，而我们把这个能力称为 <code>crash-safe</code>。</p><h2 id="归档日志（binlog）"><a href="#归档日志（binlog）" class="headerlink" title="归档日志（binlog）"></a>归档日志（binlog）</h2><p>在写这篇文章的时候，纠结到底先写redo log还是binlog，最后还是秉承<strong>先苦后甜</strong>的原则，把redo log写在前面了。如果redo log的部分看懂了，binlog掌握是轻松的，跟着我的思路，我们继续binlog～</p><p>前边讲过，redo log是InnoDB引擎特有的日志，是引擎层面的日志，而在我们的数据库的Server层面，也有自己的日志，称为binlog（归档日志）。</p><p>binlog是逻辑日志，怎么样来理解这个<strong>逻辑日志</strong>呢？</p><p>我们通过查看一段binlog来理解。</p><h3 id="理解逻辑日志"><a href="#理解逻辑日志" class="headerlink" title="理解逻辑日志"></a>理解逻辑日志</h3><p><strong>这里一大段的操作，都是为了查看binlog文件里边存储的是什么内容，熟悉的读者可以直接略过。</strong></p><p>执行命令，写入新binlog文件，不让之前的逻辑影响。</p><p>执行一次flush logs命令行，就会在data目录下新增一个mysql-bin.00000x文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">## 登陆MySQL命令行mysql -uroot -p## 刷新binlogflush logs;## 确认刷新binlog成功show master status;## 查询binlog日志位置 show variables like&#39;log_bin%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://mkstatic.lianbian.net/20210915113418.png" alt="data目录下的mysql-bin文件"></p><p>测试数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">## 创建表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">User</span><span class="token punctuation">`</span>  <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> gb2312 <span class="token keyword">COLLATE</span> gb2312_chinese_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8mb4 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8mb4_bin ROW_FORMAT <span class="token operator">=</span> Compact<span class="token punctuation">;</span><span class="token comment">## 新增</span><span class="token keyword">INSERT</span> <span class="token punctuation">`</span><span class="token keyword">User</span><span class="token punctuation">`</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token punctuation">`</span><span class="token keyword">User</span><span class="token punctuation">`</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">## 修改</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span><span class="token keyword">User</span><span class="token punctuation">`</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://mkstatic.lianbian.net/20210915143958.png" alt="执行语句截图"></p><p>翻译binlog二进制文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#x2F;mysqlbinlog --base64-output&#x3D;DECODE-ROWS -v mysql-bin.000006 &gt; mysqlbin.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://mkstatic.lianbian.net/20210915144240.png" alt="binlog翻译"></p><p>这是翻译出来的sql文件，是因为我在<code>mysqlbinlog -v</code>参数加工而成的。</p><p><strong>由此可知，逻辑日志里边就是记录着sql语句，通过sql语句记录着逻辑的变化，比如insert, update等动作，但不是记录具体数据，那个由物理日志完成。</strong></p><h3 id="与redo-log的区别"><a href="#与redo-log的区别" class="headerlink" title="与redo log的区别"></a>与redo log的区别</h3><ol><li>redo log是innoDB引擎特有的；binlog是MySQL的Server层实现的，所有引擎都能使用；</li><li>redo log是循环写的，空间固定会用完；binlog是追加写入的。“追加写”是指binlog文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</li></ol><h3 id="binlog写入策略"><a href="#binlog写入策略" class="headerlink" title="binlog写入策略"></a>binlog写入策略</h3><p>通过与redo log的区别，我们知道，binlog是追加写入的，所以与redo log写入相比，没有擦除的概念。那么，还有一些什么样的其他的区别呢？</p><p>binlog的写入逻辑比较简单：事务执行过程中，先把日志写到binlog cahce，事务提交的时候，再把binlog cache写到binlog文件中（落盘）。</p><p><img src="http://mkstatic.lianbian.net/20210915213519.png" alt="binlog写入"></p><p>从上图可以看到，每个线程都有自己的binlog cache，但是共用同一份binlog文件。</p><p>图中的write，指的就是把日志写入到围巾啊系统的page cache，并没有把数据持久化到磁盘，所有速度很快；</p><p>途中的sync，才是将数据持久化到磁盘的操作。</p><p>write 和 fsync 的时机，是由参数 sync_binlog 控制的：</p><p>sync_binlog=0 的时候，表示每次提交事务都只 write，不 fsync；</p><p>sync_binlog=1 的时候，表示每次提交事务都会执行 fsync；</p><p>sync_binlog=N(N&gt;1) 的时候，表示每次提交事务都 write，但累积 N 个事务后才 fsync。</p><blockquote><p>因此，在出现 IO 瓶颈的场景里，将 sync_binlog 设置成一个比较大的值，可以提升性能。在实际的业务场景中，考虑到丢失日志量的可控性，一般不建议将这个参数设成 0，比较常见的是将其设置为 100~1000 中的某个数值。</p><p>但是，将 sync_binlog 设置为 N，对应的风险是：如果主机发生异常重启，会丢失最近 N 个事务的 binlog 日志。</p><p>引用《极客时间MySQL45讲》</p></blockquote><h2 id="浅谈两阶段提交"><a href="#浅谈两阶段提交" class="headerlink" title="浅谈两阶段提交"></a>浅谈两阶段提交</h2><p>这里讲的两阶段提交，就是纯粹的指redo log和binlog日志的两阶段提交。</p><p>而两阶段提交的目的就是让redo log和binlog两个日志逻辑上一致。</p><p>如果redo log持久化并进行了提交，而binlog未持久化数据库就crash了，则从库从binlog拉取数据会少于主库，造成不一致。因此需要内部事务来保证两种日志的一致性。</p><h3 id="两阶段提交步骤"><a href="#两阶段提交步骤" class="headerlink" title="两阶段提交步骤"></a>两阶段提交步骤</h3><p><img src="http://mkstatic.lianbian.net/20210915171349.png" alt="两阶段提交"></p><ol><li>将语句执行</li><li>记录redo log，并将记录状态设置为prepare</li><li>通知Server，已经修改好了，可以提交事务了</li><li>将更新的内容写入binlog</li><li>commit，提交事务</li><li>将redo log里这个事务相关的记录状态设置为commited</li></ol><p><strong>prepare：</strong>redolog写入log buffer，并fsync持久化到磁盘，在redolog事务中记录2PC的XID，在redolog事务打上prepare标识<br><strong>commit：</strong>binlog写入log buffer，并fsync持久化到磁盘，在binlog事务中记录2PC的XID，同时在redolog事务打上commit标识<br>其中，prepare和commit阶段所提到的“事务”，都是指内部XA事务，即2PC</p><h3 id="恢复步骤"><a href="#恢复步骤" class="headerlink" title="恢复步骤"></a>恢复步骤</h3><p>redolog中的事务如果经历了二阶段提交中的prepare阶段，则会打上prepare标识，如果经历commit阶段，则会打上commit标识（此时redolog和binlog均已落盘）。</p><ol><li>按顺序扫描redolog，如果redolog中的事务既有prepare标识，又有commit标识，就直接提交（复制redolog disk中的数据页到磁盘数据页）</li><li>如果redolog事务只有prepare标识，没有commit标识，则说明当前事务在commit阶段crash了，binlog中当前事务是否完整未可知，此时拿着redolog中当前事务的XID（redolog和binlog中事务落盘的标识），去查看binlog中是否存在此XID<ol><li>如果binlog中有当前事务的XID，则提交事务（复制redolog disk中的数据页到磁盘数据页）</li><li>如果binlog中没有当前事务的XID，则回滚事务（使用undolog来删除redolog中的对应事务）</li></ol></li></ol><p>可以将mysql redolog和binlog二阶段提交和广义上的二阶段提交进行对比，广义上的二阶段提交，若某个参与者超时未收到协调者的ack通知，则会进行回滚，回滚逻辑需要开发者在各个参与者中进行记录。mysql二阶段提交是通过xid进行恢复。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不重启JVM替换掉已经加载的类</title>
      <link href="/2021/09/07/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/arthas/%E4%B8%8D%E9%87%8D%E5%90%AFJVM%E6%9B%BF%E6%8D%A2%E6%8E%89%E5%B7%B2%E7%BB%8F%E5%8A%A0%E8%BD%BD%E7%9A%84%E7%B1%BB/"/>
      <url>/2021/09/07/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/arthas/%E4%B8%8D%E9%87%8D%E5%90%AFJVM%E6%9B%BF%E6%8D%A2%E6%8E%89%E5%B7%B2%E7%BB%8F%E5%8A%A0%E8%BD%BD%E7%9A%84%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>大家好，我是连边。</p><h2 id="提出问题"><a href="#提出问题" class="headerlink" title="提出问题"></a>提出问题</h2><p>我们工作中，时常会碰到样的问题，测试环境、预发布环境都好好的，但是代码一到线上就莫名其妙的出问题了。往往这个时候，我们不能中断对外提供服务，又要调试线上问题，怎么办呢？</p><p>我们首先分析一下，其实我们这个问题的本质是<strong>要动态改变内存中已存在的对象的行为</strong>。</p><p>我们知道，JVM的操作对象是class文件，而不是源码。</p><p>所以进一步分析，<strong>改变class文件，然后让JVM重新加载class文件就能达到我们的目的。</strong></p><h2 id="github文档"><a href="#github文档" class="headerlink" title="github文档"></a>github文档</h2><p>Arthas 是Alibaba开源的Java诊断工具，深受开发者喜爱。</p><p><a href="https://github.com/alibaba/arthas/blob/master/README_CN.md">https://github.com/alibaba/arthas/blob/master/README_CN.md</a></p><h2 id="Arthas实战"><a href="#Arthas实战" class="headerlink" title="Arthas实战"></a>Arthas实战</h2><h3 id="start-demo"><a href="#start-demo" class="headerlink" title="start demo"></a>start demo</h3><ol><li>利用spring boot 在本地启动一个服务，端口：61000</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// demo-arthas-spring-boot.jar 关注“连边”订阅号，回复“arthas”获取jar包</span>java <span class="token operator">-</span>jar demo<span class="token operator">-</span>arthas<span class="token operator">-</span>spring<span class="token operator">-</span>boot<span class="token punctuation">.</span>jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>启动后如图：</li></ol><p><img src="http://mkstatic.lianbian.net/20210907220553.png" alt="spring boot 启动图"></p><ol start="3"><li>测试是否启动成功：</li></ol><p><img src="http://mkstatic.lianbian.net/20210907220707.png" alt="image-20210907220707380"></p><h3 id="start-arthas"><a href="#start-arthas" class="headerlink" title="start arthas"></a>start arthas</h3><p>新开一个命令行窗口，启动arthas</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 启动arthas 关注“连边”订阅号，回复“arthas”获取jar包</span>java <span class="token operator">-</span>jar arthas<span class="token operator">-</span>boot<span class="token punctuation">.</span>jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="http://mkstatic.lianbian.net/20210907220915.png" alt="输入命令行"></p><p>这里选择[2]，因为[2]是我刚启动的进程</p><p><img src="http://mkstatic.lianbian.net/20210907221107.png" alt="选择指定进程"></p><p>至此，准备工作完毕，第二个窗口也进入到<code>arthas</code>窗口模式。</p><h3 id="热更新代码"><a href="#热更新代码" class="headerlink" title="热更新代码"></a>热更新代码</h3><ol><li>通过浏览器访问： <a href="http://localhost:61000/user/0">http://localhost:61000/user/0</a> 会抛出500的错误</li><li>反编译文件到 <code>/tmp/UserController.java</code></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// jad反编译UserController并保存在 /tmp/UserController.java</span>jad <span class="token operator">--</span>source<span class="token operator">-</span>only <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>arthas<span class="token punctuation">.</span>user<span class="token punctuation">.</span></span>UserController</span> <span class="token operator">></span> <span class="token operator">/</span>tmp<span class="token operator">/</span><span class="token class-name">UserController</span><span class="token punctuation">.</span>java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>另外启动一个命令行窗口来编辑文件 <code>/tmp/UserController.java</code>比如当 user id 小于1时，也正常返回，不抛出异常：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">vim <span class="token operator">/</span>tmp<span class="token operator">/</span><span class="token class-name">UserController</span><span class="token punctuation">.</span>java<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"/user/&#123;id&#125;"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">findUserById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"id: &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> id <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">"name"</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// throw new IllegalArgumentException("id &lt; 1");</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"name"</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://mkstatic.lianbian.net/20210907222450.png" alt="编辑代码行数"></p><ol start="4"><li>sc查找加载UserController的classLoaderHash</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">sc <span class="token operator">-</span>d <span class="token operator">*</span><span class="token class-name">UserController</span> <span class="token operator">|</span> grep classLoaderHash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://mkstatic.lianbian.net/20210907222520.png" alt="classLoaderHash"></p><ol start="5"><li>通过<code>mc -c &lt;classLoaderHash&gt; /tmp/UserController.java -d /tmp</code>，使用<code>-c</code>参数指定ClassLoaderHash:</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">mc <span class="token operator">-</span>c <span class="token number">33</span>c7353a <span class="token operator">/</span>tmp<span class="token operator">/</span><span class="token class-name">UserController</span><span class="token punctuation">.</span>java <span class="token operator">-</span>d <span class="token operator">/</span>tmp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://mkstatic.lianbian.net/20210907222641.png" alt="mc命令行效果"></p><ol start="6"><li>再使用<code>redefine</code>命令重新加载新编译好的<code>UserController.class</code>：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">redefine <span class="token operator">/</span>tmp<span class="token operator">/</span>com<span class="token operator">/</span>example<span class="token operator">/</span>demo<span class="token operator">/</span>arthas<span class="token operator">/</span>user<span class="token operator">/</span><span class="token class-name">UserController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://mkstatic.lianbian.net/20210907222757.png" alt="redefine命令行效果"></p><ol start="7"><li><code>redefine</code>成功之后，再次访问 user/0 ，结果是：</li></ol><p><img src="http://mkstatic.lianbian.net/20210907222858.png" alt="替换之后的效果"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Java是静态语言，运行时不允许改变数据结构。</p><p>然而，Java 5引入Instrument，Java 6引入Attach API之后，事情开始变得不一样了。</p><p>虽然存在诸多限制，然而，在前辈们的努力下，仅仅是利用预留的近似于“只读”的这一点点狭小的空间，仍然创造出了各种技术，极大地提高了软件开发人员定位问题的效率。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LinkedList源码解析</title>
      <link href="/2021/08/12/%E5%90%8E%E7%AB%AF/java/%E6%BA%90%E7%A0%81/LinkedList%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2021/08/12/%E5%90%8E%E7%AB%AF/java/%E6%BA%90%E7%A0%81/LinkedList%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>大家好，我是连边。</p><p>今天七夕情人节，在这里祝天下有情人终成眷属。</p><h2 id="且以深情共白首"><a href="#且以深情共白首" class="headerlink" title="且以深情共白首"></a>且以深情共白首</h2><p>让自己的另一半了解自己的职业，还是挺重要的。</p><p>朋友眼中的我：修电脑的；</p><p>爸妈眼中的我：熬夜加班的栋梁材；</p><p>岳父岳母眼中的我：没有铁饭碗的不靠谱青年。</p><p>亲身经历证明，这些都不重要，身为一名神秘而复杂的程序员，你只需要得到你最在乎的那个人的理解和认可就行了。</p><p>靠什么？必须是才华和深情。</p><p>狗子们，我们一起来用链表定制一辆幸福号地铁送给心目中的那个她吧，奔赴星辰大海，白首不离。</p><h2 id="地铁站链表"><a href="#地铁站链表" class="headerlink" title="地铁站链表"></a>地铁站链表</h2><p>我们先以长沙地铁一号线的地铁站名来分析链表的制作过程。</p><p><img src="http://mkstatic.lianbian.net/20210814154739.jpeg" alt="长沙地铁一号线"></p><p><strong>“培元桥到了，下一站：五一广场，请前往五一广场的乘客做好下车准备。”</strong></p><p>培元桥站的图示：</p><p><img src="http://mkstatic.lianbian.net/20210814155418.png" alt="image-20210814155418743"></p><pre class="line-numbers language-抽象```一下的站点示意图：" data-language="抽象```一下的站点示意图："><code class="language-抽象```一下的站点示意图：">&lt;img src&#x3D;&quot;http:&#x2F;&#x2F;mkstatic.lianbian.net&#x2F;20210814095804.png&quot; alt&#x3D;&quot;image-20210814095804012&quot;&#x2F;&gt;用代码来定义这个车站：&#96;&#96;&#96;javaclass Station&lt;E&gt; &#123;    &#x2F;&#x2F; 车站本身    E item;    &#x2F;&#x2F; 下一站    Node&lt;E&gt; next;    public Station(E item, Node&lt;E&gt; next) &#123;      this.item &#x3D; item;      this.next &#x3D; next;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据这个上边讲解，我们不难总结出其特点：<strong>站点不仅包含了自身的信息，还包含了下一站信息。</strong></p><p>通过上边的车站节点，我们画出其他站点示意图（画出4个，不全部画出。）</p><img src="http://mkstatic.lianbian.net/20210814101424.png" alt="image-20210814101424586"  /><p>如果要让车站信息更实用，使之富有动态感，对乘客的提示性更强，我们就需要把它们链接起来，成为实用的数据结构，像一号线交通站点图那样。</p><p><img src="http://mkstatic.lianbian.net/20210814111856.gif" alt="站点链表"></p><h3 id="定义地铁链表"><a href="#定义地铁链表" class="headerlink" title="定义地铁链表"></a>定义地铁链表</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">StationList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 站点总数</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token comment">// 第一站</span>    <span class="token class-name">Station</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> first<span class="token punctuation">;</span>    <span class="token comment">// 最后一站</span>    <span class="token class-name">Station</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> last<span class="token punctuation">;</span>    <span class="token comment">// 车站，就是上边抽象的那个车站结构</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Station</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 本车站信息</span>        <span class="token class-name">E</span> item<span class="token punctuation">;</span>        <span class="token comment">// 下一站车站信息</span>        <span class="token class-name">Station</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> next<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Station</span><span class="token punctuation">(</span><span class="token class-name">E</span> item<span class="token punctuation">,</span> <span class="token class-name">Station</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> item<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Station</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Station</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Station</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            l<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 循环从头开始找</span>        <span class="token class-name">Station</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> x<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="定制幸福号地铁"><a href="#定制幸福号地铁" class="headerlink" title="定制幸福号地铁"></a>定制幸福号地铁</h2><p>每个人对幸福的定义都不一样，那定制的站名就不一样。说到我的深情，简洁而温暖，温暖而持久。</p><blockquote><p>“我随时都有空。”</p><p>“娶到你像做梦一样。”</p><p>“工资转给你了。”</p><p>“崽睡了，我去买夜宵了。”</p><p>“我去背面试题了。”</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">StationList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stationList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StationList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 初始化幸福号地铁链表</span>    stationList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"我随时都有空。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stationList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"娶到你像做梦一样。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stationList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"工资转给你了。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stationList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"崽睡了，我去买夜宵了。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stationList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"我去背面试题了。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"「幸福号地铁」共有 %s 站"</span><span class="token punctuation">,</span> stationList<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"「幸福号地铁」从「%s」开往「%s」"</span><span class="token punctuation">,</span> stationList<span class="token punctuation">.</span>first<span class="token punctuation">.</span>item<span class="token punctuation">,</span> stationList<span class="token punctuation">.</span>last<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"「幸福号地铁」告诉我们，幸福%d要素："</span><span class="token punctuation">,</span> stationList<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stationList<span class="token punctuation">.</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stationList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="琴瑟在御，莫不静好"><a href="#琴瑟在御，莫不静好" class="headerlink" title="琴瑟在御，莫不静好"></a>琴瑟在御，莫不静好</h2><p>每个靠谱的人都值得拥有自己的幸福，用你的才华和深情去定制属于你们的幸福号地铁吧。</p><p>今天就别加班了。</p><p>毕竟，陪伴才是最长情的告白。</p><p>我是连边，专注于Java和架构领域，坚持撰写有原理，有实战，有体系的技术文章。</p><p>如果您觉得我的文章有收获，可以分享给您的朋友或者朋友圈；</p><p>如果想实时的看到我的文章，您也可以点击下边的名片来关注我。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList源码解析</title>
      <link href="/2021/08/09/%E5%90%8E%E7%AB%AF/java/%E6%BA%90%E7%A0%81/ArrayList%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2021/08/09/%E5%90%8E%E7%AB%AF/java/%E6%BA%90%E7%A0%81/ArrayList%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>大家好，我是连边。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>[toc]</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>开始写<code>Java集合</code>图解源码系列的文章，本篇是开篇，主角是<code>ArrayList</code>。</p><p>这个系列按照这个步骤来讲解：</p><p><strong>图解分析原理，实战面试题检测，阅读JDK源码进一步巩固理解。</strong></p><p>阅读本系列文章，不需要数据结构的基础，带上认真的态度完全可以吃透。</p><h2 id="Java集合的整体认识"><a href="#Java集合的整体认识" class="headerlink" title="Java集合的整体认识"></a>Java集合的整体认识</h2><p>java集合框架提供了一套性能优良，使用方便的接口和类，它们位于<code>java.util</code>包中。</p><p><img src="http://mkstatic.lianbian.net/Java%E9%9B%86%E5%90%88.png" alt="Java集合"></p><p>今天这篇文章的主角是<code>ArrayList</code>，从上图可以看出，<code>ArrayList</code>实现List接口，和它同根同级的还有<code>LinkedList</code>，<code>ArrayList</code>同时还实现了RandomAccess, Cloneable, java.io.Serializable，我们利用类图来直观说明。</p><p><img src="http://mkstatic.lianbian.net/ArrayList-20210811144456212.png" alt="ArrayList类图"></p><h2 id="图解基本原理"><a href="#图解基本原理" class="headerlink" title="图解基本原理"></a>图解基本原理</h2><h3 id="数组与动态数组（ArrayList）"><a href="#数组与动态数组（ArrayList）" class="headerlink" title="数组与动态数组（ArrayList）"></a>数组与动态数组（ArrayList）</h3><p>数组的索引从0开始；</p><p>Java语言中提供的数组是用来储存固定大小的同类型元素；</p><p>Java中可以使用两种方式来声明数组：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 申明</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayRefVar<span class="token punctuation">;</span><span class="token class-name">String</span> arrayRefVar<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Java中数组的创建方式同样有两种：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建</span><span class="token keyword">int</span> arraySize <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayRefVar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>arraySize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 创建并且初始化</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayRefVar <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-ArrayList```是一种以数组实现的```List```，与数组相比，具有动态扩展的能力，因此也可称之为```动态数组```。" data-language="ArrayList```是一种以数组实现的```List```，与数组相比，具有动态扩展的能力，因此也可称之为```动态数组```。"><code class="language-ArrayList```是一种以数组实现的```List```，与数组相比，具有动态扩展的能力，因此也可称之为```动态数组```。">### 增删改查和扩容#### 添加元素1. 末尾添加元素   **场景：** 存在长度为6的数组，存在A、B、C三个值，把D值（索引为3）添加到数组末尾；   **步骤：** 直接进行压入操作就可以完成操作，然后再挪动size；![末尾添加元素](http:&#x2F;&#x2F;mkstatic.lianbian.net&#x2F;arrayList6.gif)2. 中间添加元素   **场景：** 存在长度为6的数组，存在A、B、C三个值，把D值（索引为2）添加到AB之间；   **步骤：** 首先需要把添加位置之后的元素往后挪，挪动完成之后，把指定的元素插入到挪出来的空位，然后挪动size；   ![中间添加元素](http:&#x2F;&#x2F;mkstatic.lianbian.net&#x2F;%E4%B8%AD%E9%97%B4%E6%B7%BB%E5%8A%A0%E5%85%83%E7%B4%A0.gif)#### 删除元素1. 删除末尾元素   **场景：** 存在长度为6的数组，存在A、B、C三个值，把C值（索引为2）从数组中删除；   **步骤：** 直接进行删除，然后挪动size；   ![删除末尾元素](http:&#x2F;&#x2F;mkstatic.lianbian.net&#x2F;%E5%88%A0%E9%99%A4%E6%9C%AB%E5%B0%BE%E5%85%83%E7%B4%A0.gif)2. 删除中间元素   **场景：** 存在长度为6的数组，存在A、B、C三个值，把B值（索引为1）从数组中删除；   **步骤：** 找到指定索引的值，进行删除，把删除元素后边的元素依次往前挪，把最后一个元素设置为null，让他释放垃圾，然后移动size；      ![删除中间元素](http:&#x2F;&#x2F;mkstatic.lianbian.net&#x2F;%E5%88%A0%E9%99%A4%E4%B8%AD%E9%97%B4%E5%85%83%E7%B4%A0.gif)#### 修改元素**场景：** 存在长度为6的数组，存在A、B、C三个值，把B值（索引为2）修改成D值；**步骤：** 找到指定索引，把原来的值进行赋值，把新元素直接覆盖，返回oldValue；![修改元素](http:&#x2F;&#x2F;mkstatic.lianbian.net&#x2F;%E4%BF%AE%E6%94%B9%E5%85%83%E7%B4%A0.gif)#### 查询元素**场景：** 存在长度为6的数组，存在A、B、C三个值，把B值（索引为2）；**步骤：** 找到指定索引，返回；![获取元素](http:&#x2F;&#x2F;mkstatic.lianbian.net&#x2F;%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0.gif)#### 动态扩容&#96;&#96;&#96;ArrayList&#96;&#96;&#96;是一种以数组实现的&#96;&#96;&#96;List&#96;&#96;&#96;，与数组相比，增删改查元素都一样，也需要**连续的内存空间**，但是它具有动态扩展的能力，因此也可称之为&#96;&#96;&#96;动态数组&#96;&#96;&#96;。这里着重用动图表示动态数组的**扩容机制**，因为增删改查元素和数组是一样的，可以参照数组的动态图。**场景：** 存在长度为4的数组，存在A、B、C、D四个值，现在需要在最后添加元素，原来的长度不够，触发扩容机制；**步骤：** 按照原来数组长度的**1.5倍**创建一个新数组，即创建size&#x3D;6的数组，把原来的old数组平移到新数组，size也进行同步平移，进行添加元素，然后修改数组的引用（由原来的old数组引用改成new数组引用）；![数组扩容](http:&#x2F;&#x2F;mkstatic.lianbian.net&#x2F;%E6%95%B0%E7%BB%84%E6%89%A9%E5%AE%B91.gif)### 数组特性与总结1. 需要**连续的内存空间**来储存；2. 添加元素的性能，与添加元素位置有直接关系，末尾添加效率很高，越往前走效率越低（因为要移动元素），所以在**不确定的添加位置场景下，不适合用数组**，而储存固定大小的同类型的元素，可以选择用数组；3. **查找效率高**，根据索引能直接找出对应元素返回，找不到抛出对应异常；4. 扩容是按照**原来数组容量（capacity）的一半**扩容；5. 扩容是创建一个新数组，然后平移复制原来数组的方式，而不是直接在原来的数组后边直接扩容，这点是由于数组需要连续的内存空间决定的；通过上边的原理分析与总结，我们来**实战面试题**，来测试理论的掌握程度。## 实战面试题1. ArrayList的size和capacity怎么理解？2. ArrayList内部是怎么存放数据的？3. ArrayList的大小是如何自动扩容的？4. 在索引中ArrayList的增加或者删除某个对象的运行过程？效率很低吗？解释一下为什么？5. ArrayList中的remove是如何操作的？6. ArrayList的add操作优化？这是数组常见的面试题，你能手到擒来吗？在文章的末尾会给出标准的答案，有不懂的题目也不着急看答案，我们继续**阅读源码**来巩固与思考。## 源码分析类结构源码基于&#96;&#96;&#96;jdk1.8&#96;&#96;&#96;，首先来一段&#96;&#96;&#96;ArrayList.java&#96;&#96;&#96;类的介绍：1. 代码总行数&#96;&#96;&#96;1469&#96;&#96;&#96;行；2. 实现了&#96;&#96;&#96;AbstractList&lt;E&gt;&#96;&#96;&#96;抽象类；3. 继承&#96;&#96;&#96;List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable&#96;&#96;&#96;；## 源码方法分类讲解先看下这张图：![ArrayList构造方法和公用方法](http:&#x2F;&#x2F;mkstatic.lianbian.net&#x2F;ArrayListPublicMethod.png)有没有一下就懵了？不着急，我把这个类的方法**分类**一下：![方法分类点击查看大图](http:&#x2F;&#x2F;mkstatic.lianbian.net&#x2F;ArrayListClass1.png)这篇文章从**继承、实现、属性、构造方法、常用方法**（其他方法类不讲解）来分类讲解。这里重复贴一下ArrayList类图。![ArrayList类图](http:&#x2F;&#x2F;mkstatic.lianbian.net&#x2F;ArrayList-20210811144456212-20210811190012060.png)### 继承通过上边类图，你会发现ArrayList继承了&#96;&#96;&#96;AbstractList&#96;&#96;&#96;抽象类，AbstractList实现了List接口，而AbstractList抽象类有且只有一个抽象方法：&#96;&#96;&#96;javaabstract public E get(int index);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里看源码的同学绝对有个疑问，为什么AbstractList实现了List接口，而我们的ArrayList也再次来实现了List，为什么会这样子设计呢？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span><span class="token punctuation">,</span> <span class="token class-name">RandomAccess</span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>猜测有三：</strong></p><ol><li>增加可读性，不要套娃一样的去看源码，可以清晰看到类的主要实现接口；</li><li>兼容问题；</li><li>面向接口编程；</li></ol><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>ArrayList实现了<code>List, RandomAccess, Cloneable, java.io.Serializable</code>接口；</p><p>ArrayList实现了List，提供了基础的添加、删除、遍历等操作；</p><p>ArrayList实现了RandomAccess，提供了随机访问的能力；</p><p>ArrayList实现了Cloneable，可以被克隆；</p><p>ArrayList实现了Serializable，可以被序列化；</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">8683452581122892189L</span><span class="token punctuation">;</span><span class="token comment">/** * 默认容量 */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_CAPACITY <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">/** * 空数组，如果传入的容量为0时使用 */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> EMPTY_ELEMENTDATA <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/** * 空数组，传传入容量时使用，添加第一个元素的时候会重新初始为默认容量大小 */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/** * 存储元素的数组 */</span><span class="token keyword">transient</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span> <span class="token comment">// non-private to simplify nested class access</span><span class="token comment">/** * 集合中元素的个数 */</span><span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>serialVersionUID</strong> 是用来验证版本一致性的字段。我们将一个类的二进制字节序列转为java对象，也就是反序列化时，JVM会把传进来的二进制字节流中的serialVersionUID和本地相应的实体或对象的serialVersionUID进行比较，如果相同，则认为两个类是一致的，可以进行反序列化，否则就会出现版本不一致的反序列化异常。</p><p><strong>DEFAULT_CAPACITY</strong> 默认容量为10，也就是通过new ArrayList()创建时的默认容量。</p><p><strong>EMPTY_ELEMENTDATA</strong> 空的数组，这种是通过new ArrayList(0)创建时用的是这个空数组（下边构造方法代码中可以看到）。</p><p><strong>DEFAULTCAPACITY_EMPTY_ELEMENTDATA</strong> 也是空数组，这种是通过new ArrayList()创建时用的是这个空数组，与EMPTY_ELEMENTDATA的区别是在添加第一个元素时使用这个空数组的会初始化为DEFAULT_CAPACITY（10）个元素。</p><p><strong>elementData</strong> 真正存放元素的地方，使用transient是为了不序列化这个字段，至于没有使用private修饰，后面注释是写的“为了简化嵌套类的访问”，但是楼主实测加了private嵌套类一样可以访问，private表示是类私有的属性，只要是在这个类内部都可以访问，<strong>嵌套类或者内部类也是在类的内部，所以也可以访问类的私有成员。</strong></p><p><strong>size</strong> 真正存储元素的个数，而不是elementData数组的长度（capacity）。</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p><strong>ArrayList(int initialCapacity)构造方法</strong></p><p>传入初始容量，如果大于0就初始化elementData为对应大小，如果等于0就使用EMPTY_ELEMENTDATA空数组，如果小于0抛出异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果传入的初始容量大于0，就新建一个数组存储元素</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果传入的初始容量等于0，使用空数组EMPTY_ELEMENTDATA</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> EMPTY_ELEMENTDATA<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果传入的初始容量小于0，抛出异常</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal Capacity: "</span> <span class="token operator">+</span> initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ArrayList()构造方法</strong></p><p>不传初始容量，初始化为DEFAULTCAPACITY_EMPTY_ELEMENTDATA空数组，会在添加第一个元素的时候扩容为默认的大小，即10。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果没有传入初始容量，则使用空数组DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span>    <span class="token comment">// 使用这个数组是在添加第一个元素的时候会扩容到默认大小10</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ArrayList(Collection&lt;? extends E&gt; c)构造方法</strong></p><p>传入集合并初始化elementData，这里会使用拷贝把传入集合的元素拷贝到elementData数组中，如果元素个数为0，则初始化为EMPTY_ELEMENTDATA空数组。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 把传入集合的元素初始化到ArrayList中*/</span><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">></span></span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 集合转数组</span>    elementData <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 检查c.toArray()返回的是不是Object[]类型，如果不是，重新拷贝成Object[].class类型</span><span class="token comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>            elementData <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果c的空集合，则初始化为空数组EMPTY_ELEMENTDATA</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> EMPTY_ELEMENTDATA<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么<code>c.toArray();</code>返回的有可能不是Object[]类型呢？主要还是因为jdk自身的bug导致的。</p><p>源码注释：c.toArray might (incorrectly) not return Object[] (see 6260652)</p><p><a href="https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6260652">https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6260652</a></p><p>请看下面的代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Father</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fathers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// 打印结果为class [Lcom.coolcoding.code.Son;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fathers<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> strList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 打印结果为class [Ljava.lang.String;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strList<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyList</span> <span class="token keyword">extends</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 子类重写父类的方法，返回值可以不一样     * 但这里只能用数组类型，换成Object就不行     * 应该算是java本身的bug     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 为了方便举例直接写死</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用方法（增删改查）"><a href="#常用方法（增删改查）" class="headerlink" title="常用方法（增删改查）"></a>常用方法（增删改查）</h3><p><strong>add(E e)方法</strong></p><p>添加元素到末尾，平均时间复杂度为O(1)。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 检查是否需要扩容</span>    <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 把元素插入到最后一位</span>    elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token function">calculateCapacity</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">calculateCapacity</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">,</span> <span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果是空数组DEFAULTCAPACITY_EMPTY_ELEMENTDATA，就初始化为默认大小10</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData <span class="token operator">==</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>DEFAULT_CAPACITY<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> minCapacity<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">-</span> elementData<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment">// 扩容</span>        <span class="token function">grow</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment">// 新容量为旧容量的1.5倍</span>    <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 如果新容量发现比需要的容量还小，则以需要的容量为准</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>    <span class="token comment">// 如果新容量已经超过最大容量了，则使用最大容量</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 以新容量拷贝出来一个新数组</span>    elementData <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>步骤：</p><ol><li>检查是否需要扩容；</li><li>如果elementData等于DEFAULTCAPACITY_EMPTY_ELEMENTDATA则初始化容量大小为DEFAULT_CAPACITY；</li><li>新容量是老容量的1.5倍（oldCapacity + (oldCapacity &gt;&gt; 1)），如果加了这么多容量发现比需要的容量还小，则以需要的容量为准；</li><li>创建新容量的数组并把老数组拷贝到新数组；</li></ol><p><strong>add(int index, E element)方法</strong></p><p>添加元素到指定位置，平均时间复杂度为O(n)。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 检查是否越界</span>    <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 检查是否需要扩容</span>    <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将inex及其之后的元素往后挪一位，则index位置处就空出来了</span>    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                     size <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将元素插入到index的位置</span>    elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>    <span class="token comment">// 大小增1</span>    size<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> size <span class="token operator">||</span> index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>步骤：</p><ol><li>检查索引是否越界；</li><li>检查是否需要扩容；</li><li>把插入索引位置后的元素都往后挪一位；</li><li>在插入索引位置放置插入的元素；</li><li>大小加1；</li></ol><p><strong>remove(int index)方法</strong></p><p>删除指定索引位置的元素，时间复杂度为O(n)。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 检查是否越界</span>    <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">// 获取index位置的元素</span>    <span class="token class-name">E</span> oldValue <span class="token operator">=</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 如果index不是最后一位，则将index之后的元素往前挪一位</span>    <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将最后一个元素删除，帮助GC</span>    elementData<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// clear to let GC do its work</span>    <span class="token comment">// 返回旧值</span>    <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>步骤：</p><ol><li>检查索引是否越界；</li><li>获取指定索引位置的元素；</li><li>如果删除的不是最后一位，则其它元素往前移一位；</li><li>将最后一位置为null，方便GC回收；</li><li>返回删除的元素。</li></ol><p>可以看到，ArrayList删除元素的时候并没有缩容。</p><p><strong>remove(Object o)方法</strong></p><p>删除指定元素值的元素，时间复杂度为O(n)。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 遍历整个数组，找到元素第一次出现的位置，并将其快速删除</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token comment">// 如果要删除的元素为null，则以null进行比较，使用==</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">fastRemove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 遍历整个数组，找到元素第一次出现的位置，并将其快速删除</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token comment">// 如果要删除的元素不为null，则进行比较，使用equals()方法</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">fastRemove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>步骤：</p><p>循环调用fastRemove(int index)</p><p><strong>fastRemove(int index)</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">fastRemove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 少了一个越界的检查</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">// 如果index不是最后一位，则将index之后的元素往前挪一位</span>    <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将最后一个元素删除，帮助GC</span>    elementData<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// clear to let GC do its work</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>步骤：</p><ol><li>找到第一个等于指定元素值的元素；</li><li>快速删除；</li></ol><p>fastRemove(int index)相对于remove(int index)少了检查索引越界的操作，可见jdk将性能优化到极致。</p><p><strong>set(int index, E element)方法</strong></p><p>修改指定元素值的元素，时间复杂度为O(1)。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 检查是否越界</span><span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取index位置的元素</span>  <span class="token class-name">E</span> oldValue <span class="token operator">=</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置index位置的元素</span>  elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>    <span class="token comment">// 返回</span>  <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rangeCheck</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> size<span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>步骤：</p><ol><li>检查索引是否越界，这里只检查是否越上界，如果越上界抛出IndexOutOfBoundsException异常，如果越下界抛出的是ArrayIndexOutOfBoundsException异常。</li><li>获取指定索引的位置的元素，赋值给oldValue，用于返回</li><li>设置指定索引位置的元素</li><li>返回oldValue</li></ol><p><strong>get(int index)方法</strong></p><p>获取指定索引位置的元素，时间复杂度为O(1)。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 检查是否越界</span>    <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 返回数组index位置的元素</span>    <span class="token keyword">return</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rangeCheck</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> size<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">E</span> <span class="token function">elementData</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>步骤：</p><ol><li>检查索引是否越界，这里只检查是否越上界，如果越上界抛出IndexOutOfBoundsException异常，如果越下界抛出的是ArrayIndexOutOfBoundsException异常。</li><li>返回索引位置处的元素；</li></ol><h2 id="源码总结"><a href="#源码总结" class="headerlink" title="源码总结"></a>源码总结</h2><ol><li>ArrayList内部使用数组存储元素，当数组长度不够时进行扩容，每次加一半的空间，ArrayList不会进行缩容；</li><li>ArrayList支持随机访问，通过索引访问元素极快，时间复杂度为O(1)；</li><li>ArrayList添加元素到尾部极快，平均时间复杂度为O(1)；</li><li>ArrayList添加元素到中间比较慢，因为要搬移元素，平均时间复杂度为O(n)；</li><li>ArrayList从尾部删除元素极快，时间复杂度为O(1)；</li><li>ArrayList从中间删除元素比较慢，因为要搬移元素，平均时间复杂度为O(n)；</li></ol><h2 id="面试题答案"><a href="#面试题答案" class="headerlink" title="面试题答案"></a>面试题答案</h2><p><strong>ArrayList的size和capacity怎么理解？</strong></p><p>如果把 ArrayList 看作一个杯子的话，capacity 就是杯子的容积，也就是代表杯子能装多少东西，而 size 就是杯子装的东西的体积。杯子可能装满了，也可能没装满，所以 capacity &gt;= size 。capacity 过大和过小都不好，过大会造成浪费，过小又存放不下多个元素的值，capacity == size，则 ArrayList 空间利用率最大，但是不利于添加新的元素。当 ArrayList 实例内的元素个数不再改变了，可以使用 trimToSize() 方法最小化 ArrayList 实例来节省空间，也即是使 capacity == size。</p><p><strong>ArrayList内部是怎么存放数据的？</strong></p><p>ArrayList 可以看做是数组的封装，使用 elementData 数组来存储数据，使用 size 来代表 elementData 的非 null 元素个数。elementData 前没有访问修饰符，所以只有同类和同包下的类可以直接方法，外界想要知道 ArrayList 实例内元素的个数就要通过 size 属性。elementData 数组类型是 Object 类型，可以存放任意的引用类型，不能存放基本的数据类型。</p><p><strong>ArrayList的大小是如何自动扩容的？</strong></p><p>扩容是发生在添加操作前的，要保证要添加元素在 elementData 数组中有位置，也即是 size 加上要添加的元素个数要小于 capacity（size + num &lt;= capacity 就说明容量是充足的），所以在添加方法中，先调用 ensureCapacityInternal(int) 方法来确保 elementData 容量充足，然后再进行具体的添加操作。如果 ensureCapacityInternal 方法（ensureCapacityInternal 方法中有调用了其他方法）发现数组容量不够了，就会扩容。扩容实际的方法是 grow(int) 方法，使用位运算符来使数组的容量扩容 1.5 倍。但是需要注意的是，没有指定初始化值的 ArrayList 实例，第一次扩容并不是以 1.5 倍扩容的，而是使用的默认容量 10，所以网上很多直接说 ArrayList 扩容是 1.5 倍也有不当之处，这点从 JDK 源码中可以很明确的看出来。</p><p>如果在构造 ArrayList 实例时，指定初始化值（初始化容量或者集合），那么就会创建指定大小的 Object 数组，并把该数组对象的引用赋值给 elementData；如果不指定初始化值，在第一次添加元素值时会使用默认的容量大小 10 作为 elementData 数组的初始容量，使用 Arrays.conpyOf() 方法创建一个 Object[10] 数组。</p><p><strong>在索引中ArrayList的增加或者删除某个对象的运行过程？效率很低吗？解释一下为什么？</strong></p><p>其实通过上边的源码可以知道，我们要分情况来讨论，详情见源码总结3、4、5、6点。</p><p><strong>ArrayList中的remove是如何操作的？</strong></p><p>见源码remove解析。</p><p><strong>ArrayList的add操作优化？</strong></p><p>核心就是避免 ArrayList 内部进行扩容。</p><p>​    1、对于普通少量的 add 操作，如果插入元素的个数已知，最好使用带初始化参数的构造方法，避免 ArrayList 内部再进行扩容，提高性能。</p><p>​    2、对于大量的 add 操作，最好先使用 ensureCapacity 方法来确保 elementData 数组中有充足的容量来存放我们后面 add 操作的元素，避免 ArrayList 实例内部进行扩容。上面提到的 ensureCapacityInternal 方法是一个私有方法，不能直接调用，而 ensureCapacity 方法是一个共有方法，专门提供给开发者使用的，提高大量 add 操作的性能。</p><p>我是连边，专注于Java和架构领域，坚持撰写有原理，有实战，有体系的技术文章。</p><p>如果您觉得我的文章有收获，可以分享给您的朋友或者朋友圈；</p><p>如果想实时的看到我的文章，您也可以点击下边的名片来关注我。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>世界时间系统构成原理</title>
      <link href="/2021/08/04/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/%E3%80%8C%E4%B8%96%E7%95%8C%E6%97%B6%E9%97%B4%E7%B3%BB%E7%BB%9F%E3%80%8D%E6%9E%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
      <url>/2021/08/04/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/%E3%80%8C%E4%B8%96%E7%95%8C%E6%97%B6%E9%97%B4%E7%B3%BB%E7%BB%9F%E3%80%8D%E6%9E%84%E6%88%90%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><strong>大家好，我是连边，</strong></p><p><strong>今天给大家带来一篇老少皆宜的科普文章。</strong></p><p>下面是同一时刻的中国时间、英国时间和美国时间：</p><p><img src="http://mkstatic.lianbian.net/640-20210804094044562.png" alt="图片"></p><p>此时此刻，中国的人们刚午休完准备开始下午的工作，英国的人们已经睡了一晚上正准备早晨起床，美国的人们有的还在熬夜、有的已经进入梦乡，但不管睡没睡，他们都即将迎来新的一天。</p><p>为什么会是这样的呢？本文将告诉你完整的答案，记住本文之后，够你受用一辈子，至少也会是半辈子，祝愿所有的读者都能够去实地看一看。</p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>人们很早就知道自己脚下的这片土地非常大，还知道在很远的地方居住着其它人们，还有山川、河流、大海。但是人们并没有办法给出很远的地方到底在哪里。</p><p>就像小孩子问你，美国在哪里，大人们总是说，美国和中国之间啊，有一个很大的大海，美国就在大海的对岸，总之很远。</p><p>后来人们认识到地球是一个球体，但是人们依然没有好的办法给出很远的地方究竟在哪里。就像我们对小孩说，美国啊，在地球的另一面，总之还是很远。</p><h2 id="经度、纬度"><a href="#经度、纬度" class="headerlink" title="经度、纬度"></a>经度、纬度</h2><p>为了更好的描述地球上的一个具体位置，人们引入了经度和纬度的概念，并规定，东西方向的线是纬线，南北方向的线是经线。</p><p>由于地球是自西向东转动，且球体中间是最粗的地方，所以就把地球的中间定义为纬度的起点，即0度纬线，其实就是赤道了。</p><p>往北半球称为北纬，南半球称为南纬。可见赤道是最长的纬线，越往南北极方向走，纬线越短，且北极是北纬90度，南极是南纬90度。</p><p><img src="http://mkstatic.lianbian.net/640-20210804094049269.jpeg" alt="图片"></p><p>纬度的起点选在赤道没有任何争议，但是经度的起点选在哪里呢？这确实是一个问题，因为每条经线都是一样长的，且没有什么本质差别。</p><p>1851年御用天文学家艾里在英国伦敦格林威治天文台设置中星仪，并以此确定格林威治子午线。因为当时超过三分之二的船只已使用该线为参考子午线，在1884年于美国华盛顿特区举行的国际本初子午线大会上正式定之为经度的起点。</p><p><img src="http://mkstatic.lianbian.net/640-20210804094057459.jpeg" alt="图片"></p><p>（格林威治天文台）</p><p>因此经过这个地方的经线就是0度经线，又称为本初子午线。自此向东称为东经，向西称为西经。0度经线被东经和西经共用。</p><p><img src="http://mkstatic.lianbian.net/640-20210804094102521.jpeg" alt="图片"></p><p>（0度经线 / 本初子午线）</p><p>由于一个圆周是360度，东经西经各分一半，所以都是180度，且东经西经的终点是重合的，就在180度处，就像它们的起点也是重合的，就在0度处一样。</p><p>所以经过180度处的经线同样被东经和西经共用，由于180度经线和0度经线正好相对，因此又称为对向子午线，是和本初子午线相对的一种叫法。</p><p><img src="http://mkstatic.lianbian.net/640-20210804094108739.jpeg" alt="图片"></p><p>因此，东经0度和西经0度是一样的，同样东经180度和西经180度也是一样的，那么自然北纬0度和南纬0度也是一样的。</p><h2 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h2><p>虽然截止到现在科学界对于时间的研究还没有什么结论，但是人们对于时间的认识却是在很早很早以前就开始了。</p><p>人们认识到日出东方落于西山，昼夜交替日复一日，都是源于地球的自转，能照到太阳光的地方就是白天，照不到的就是黑夜。</p><p>因此人们认为时间和地球的自转有关，由于自转是自西向东的，主要和经度有关，所以时间也和经度有关。</p><p>以前国际时间不统一，经常出现“穿越”情况，比如收到信件的当地时间比寄出信件的当地时间还要早，即人家还没寄呢你就已经收到了。</p><p>1879年，加拿大铁路工程师伏列明提出了“区时”的概念，在1884年的一次国际会议上得到认同，由此正式建立了统一世界计量时刻的“区时系统”。</p><p>该系统规定，地球上每15度经度范围作为一个区域（即太阳1个小时内走过的经度）。这样，整个地球的表面就被划分为24个区域。</p><p>每个区域内的时间都按照该区域的中央经线（距离东西两侧各7.5度位置的那条经线）处的时间来计量，这样一个区域内就只有一个时间了。</p><p>由于每天是24小时，地球一周被分为了24个区域，所以每个区域的时长是1小时，且相邻区域的时间差值也是1小时。</p><p>因此我们可以从两个方面来理解时区，一是用区域来表示时间，即时间的区域，二是每个区域是1小时，相邻区域相差也是1小时。</p><p>现实中时区并不是严格按经线来划分的，而是按自然条件来划分的。因为实际上，常常1个国家或1个省份同时跨着2个或更多时区，为了照顾到行政上的方便，常将1个国家或1个省份划在一起。</p><p><img src="http://mkstatic.lianbian.net/640-20210804094112741.jpeg" alt="图片"></p><p>和纬度、经度有起点一样，时区也有起点，而且这个起点应该和某条经线有关。没错，答案和你想的是一样的。</p><p>同样是在1884年的那个会议上，不仅把经过英国伦敦东南格林威治的经线作为计算地理的起点，同时也作为世界时区的起点。</p><p>该时区称为0时区，自此向东称为东时区，向西称为西时区，0时区是东时区和西时区的分界线，也可以认为被东西时区共用。</p><p>东边从东1时区到东11时区，西边从西1时区到西11时区，这样还剩一个时区，就是12时区，它同样是东时区和西时区交界处的分界线。</p><p>也可以认为被东西时区共用，因此既可以称为东12时区，也可以称为西12时区，其实是一样的。</p><p>因此，东时区和西时区从0时区开始，向东和向西延伸，到12时区处相交。0时区是起点，12时区是终点。</p><h2 id="时间系统"><a href="#时间系统" class="headerlink" title="时间系统"></a>时间系统</h2><p>本初子午线又叫格林威治子午线，它也曾经被用作时间的标准，称为格林威治时间，缩写是GMT。程序员都应该很熟悉了。</p><p>即以格林威治当地的时间作为一个标准时间，然后其它地方的时间根据地球的自转推算出来，所以格林威治时间在天文领域应用广泛。</p><p>可以说格林威治时间是以地球自转为基础的时间计量系统，可是后来人们认识到地球自转速度并不规则，因此格林威治时间已由协调世界时取代。</p><p>协调世界时，又称世界统一时间、世界标准时间、国际协调时间。是以原子时秒长为基础的一种时间计量系统。</p><p>协调世界时是由格林威治时间演化而来，格林威治时间因为本初子午线经过英国伦敦的格林威治而得名，但是本初子午线除了经过英国外还经过了法国等共8个国家。</p><p>协调世界时在英文中的缩写是CUT，在法文中的缩写是TUC，它们是不相同的，为了照顾多方，最后做出妥协，缩写定为UTC，因此也称UTC时间。</p><p>按照格林威治时间系统的定义，格林威治时间是标准时间，即GMT。由于地球自西向东转，所以东边先看到太阳，因此格林威治东边的时间比格林威治早（提前到来），西边的则比格林威治晚（滞后到来）。</p><p>又由于一个时区就是一个小时，因此，东1时区的时间就是格林威治时间加上1小时，即GMT+1，中国采用东8时区时间，即GMT+8。西1时区的时间就是格林威治时间减去1小时，即GMT-1。</p><p>这种写法我们都见过，除了这里说的用来表示时间之外，它也可以用来表示时区。GMT就是0时区，GMT+1就是东1时区，GMT-1就是西1时区。</p><p>后来改为世界协调时间之后就成UTC了，于是就变成UTC+1，UTC+8，UTC-1，基本含义还是保持不变的。</p><p>可以看到，时间系统的定义就是由一个基准时间加上偏移量组成，偏移量是正的表示向较早（东边或未来）的时间偏移，偏移量是负的表示向较晚（西边或过去）的时间偏移。</p><p>为了降低复杂度，偏移量都是按整小时来算的，不考虑分钟和秒等，所以全世界的时间里的分钟和秒都是一样的，只要小时是不同的，因此全世界只有24种不同的时间。</p><p><strong>“时间的起点”</strong></p><p>对于一个环形物体，其实是没有严格意义的开始位置和结束位置的，同样也没有严格意义的前后，除非人为指定一个特殊位置作为起点。</p><p>比如两个人在操场的环形跑道上跑步，假设你第一次看到时，这两人已经跑了一会儿了，此时根本无法分出谁在前谁在后。</p><p>就像地球的自西向东转动一样，根本无法分出谁在东方、谁在西方，因为往东走和往西走都能到达目的地。自然也不知道谁靠前、谁靠后。很多人认为中国在东方，美国在西方。</p><p>理由是中国是中午时，美国还是半夜呢，因此中国先看到太阳，所以比美国早，因此中国在东方。这种逻辑是不对的，因为美国是中午时，中国也是半夜啊。</p><p>因此我们需要一个特殊的位置作为“时间的起点”，没错，这个特殊的位置就是0度经线，即本初子午线，也称格林威治子午线，也是0时区，就在英国伦敦。</p><p>时间起点的位置找到了，那么时间的起点应该是几点呢？按照正常人的思维，时间的起点应该是凌晨0点。那到底对不对呢，来检测下便知。</p><p>把伦敦的0时区当作凌晨0点，向东走，到中国时应该是上午8点，继续向东，到美国时应该是下午18点，这样一来美国的时间就比中国的还早了，这是错误的，可以在网上查一下，美国的时间是比中国晚的。</p><p>我们的逻辑并没有错，错就错在时间的起点假设错了，不应该是凌晨0点。站在古人的角度，凌晨0点是三更半夜，黑灯瞎火的，没有什么意思啊。</p><p>古人渴望的是太阳，它们需要的是阳光，看到阳光就看到了希望。再说了，大家都是崇拜光明的，崇拜黑暗的是黑暗圣骑士，是邪恶的，哈哈。</p><p>而且0度经线又叫本初子午线，子代表子夜，也可以理解为子时，即晚上23点到次日凌晨1点这个时辰。午代表正午，也可以理解为午时，即中午11点到下午1点这个时辰。</p><p>而且理论上来说，格林威治标准时间的正午是指当太阳横穿格林威治子午线时的时间。因此把正午12点作为时间的起点，再来检测一下。</p><p>把伦敦的0时区当作正午12点，向东走，到中国时应该是晚上20点，由于中国是东8时区，再向东走4个时区就到了12时区，此时是凌晨24点（或0点），正好位于白令海峡附近。</p><p>再往东走就该变更日期了，由于12时区的中点就是180度经线的位置，1884年国际经度会议规定把它作为地球上“今天”和“昨天”的分界线，因此把这条经线称为国际日期变更线，它主要位于太平洋中。</p><p>按照规定，凡是越过这条变更线时，日期都要发生变化，从东向西越过这条界线时，日期要加上1天（到了未来），从西向东越过这条界线时，日期要减去1天（到了过去）。这条线又叫“人为日界线”。</p><p><img src="http://mkstatic.lianbian.net/640-20210804094119430.jpeg" alt="图片"></p><p>关于日期加1天还是减1天，可以这样理解，当正午（12点）的阳光照射在伦敦的本初子午线上时，紧挨着国际日期变更线左侧（西边）的时间是晚上23点59分，这个时间已经从中午12点经过，所以靠前。也就是说伦敦是中午的时候，这里已经是半夜了。</p><p>紧挨着国际日期变更线右侧（东边）的时间是凌晨0点01分，这个时间还未到中午12点，所以靠后。也就是说伦敦是中午的时候，这里还是凌晨，天还没亮呢。</p><p>因此，从东向西越线要加1天，可以认为是从今天到明天，即到了未来的时间，从西向东越线要减1天，可以认为是从今天到昨天，即到了过去的时间。</p><p>再回到刚才有关“时间的起点是几点”的检测，我们是从西往东走的，所以在白令海峡这里要减1天，即回到了昨天凌晨0点，再往东走6个时区就到了美国，所以美国此时是早上6点，而且应该是昨天早上。</p><p>我们来算一下时间差，中国是晚上20点，美国是早上6点，正好相差14个小时，即中国比美国早14个小时，这是对的，但是美国应该是今天早上6点，而不是昨天早上6点。</p><p>这主要是我们举得例子比较特殊，此时中国和美国都在国际日期变更线的右侧，也可以认为两国都已经从国际日期变更线上转过去了，所以日期是同一天。</p><p>由于一天是24小时，中国比美国早14小时，所以中国和美国能够拥有相同日期的时长是每天只有10小时。且从中国北京时间的下午2点到晚上23点59分，对应的美国时间是从凌晨0点0分到上午10点。这段时间内，两国的日期是同一天，</p><p>剩下的时间段内，中国日期比美国早1天。即中国已经进入新的一天了，美国需要在14个小时后才能进入新的一天。即中国北京时间的今天凌晨0点到下午2点，对应美国昨天的上午10点到晚上23点59分。在这个14小时内，中国日期比美国早1天。</p><h2 id="早晚、前后"><a href="#早晚、前后" class="headerlink" title="早晚、前后"></a>早晚、前后</h2><p>相信有些读者的大脑已出现“脑力不足”的信号，因为这里讲的时间和我们日常生活中的时间是不一样的，主要是角度不同，这里讲的是世界时间，日常生活中指的是当地时间。且当地时间只有一个，世界时间有24个呢。</p><p>先说当地时间，无论什么时候，一个地方的当地时间只有一个，比如你在3月2日买了一个笔记本电脑，他在3月3日买了一个，那么你比他买的早，他比你买的晚。</p><p>所以在当地时间这个上下文中，指的是事件发生的早晚问题，且日期越小发生的越早，日期越大发生的越晚。再如80后比90后出生的早，00后比90后出生的晚。</p><p>再说世界时间，在世界上不同的地方（时区），同一时刻的时间是不一样的，一个时区一个时间，共24个不同的时间。既然时间是不同的，那就一定是有的时间靠前，有的时间靠后。</p><p>以地球的自转来说，先看到太阳的地方的时间靠前，后看到太阳的地方的时间靠后。由于地球是自西向东转，所以东边的地方先看到太阳，西边的地方后看到太阳，因此东边的时间靠前，西边的时间靠后。</p><p>同样太阳下山时，也是东边先看不到，然后是西边再看不到，在中国，当东北已经进入黑夜了，新疆那里还艳阳高照呢，因为中国横跨了5个时区，从东5时区到东9时区，为什么中国采用东8区时间呢，因为北京在严格意义的东8区，上海也在。</p><p><img src="http://mkstatic.lianbian.net/640-20210804094125647.jpeg" alt="图片"></p><p>这样只是分出了时间的（超/靠）前（滞/靠）后，但是我们不能说10点就一定比9点靠前，因为可能是昨天的10点和今天的9点，因此这里还有一个日期的问题，必须要进行日期的分界。</p><p>由于地球是圆球状，没有明显的分割线，所以只能人为的指定一条线作为分割线，它就是180度经线，也称对向子午线。根据地球自转方向来规定，分割线左侧（西边）为新一（明）天的开始，分割线右侧（东边）为当下这一（今）天的结束。</p><p>由于这一条线对应着国际日期的变更，因此被称为国际日期变更线。因此从东向西越线要加1天，等于来到了新的一天（next day），从西向东越线要减1天，等于回到了过去的一天（prev day）。</p><p>最后举个示例，假设现在是当地时间2020-03-02 14:00:00，你从变更线的左侧（西边）跳到右侧（东边），然后站着不动，由于地球自西向东转，且24小时才转一圈，所以24小时后才转回到你起跳之前的位置，说明你跳到了24小时之前，即穿越到了昨天（过去）。</p><p>即跳起的一瞬间，落地点的当地时间比起跳点的当地时间晚了24个小时，正好晚了1天，所以要减1天。等于穿越到了过去。因此落地的时间是2020-03-01 14:00:00，所以就是从西向东跳过国际日期变更线要减1天，相反从东向西跳过要加1天。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java注解类型使用与原理</title>
      <link href="/2021/08/02/%E5%90%8E%E7%AB%AF/java/%E5%9F%BA%E7%A1%80/java%E6%B3%A8%E8%A7%A3%E7%B1%BB%E5%9E%8B%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86/"/>
      <url>/2021/08/02/%E5%90%8E%E7%AB%AF/java/%E5%9F%BA%E7%A1%80/java%E6%B3%A8%E8%A7%A3%E7%B1%BB%E5%9E%8B%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>每当我们在敲代码的时候，按下<code>@Data</code>，在<code>lombok</code>插件帮助下，就把繁琐的<code>get set</code>工作做得服服帖帖；而敲下 <code>@Test</code>，也能很方便的右键菜单运行我们的单元测试程序 …</p><p>你会不会觉得这些玩意儿，真神奇。</p><p>今天给大家讲的主角是<code>注解</code>。</p><p>注解，是Java中最重要的，但是却最容易被人<em><strong>遗忘</strong></em>的知识点。</p><p>很多时候，就理所当然的觉得它就一直是那样子的；</p><p>哪怕<code>Spring</code>、<code>SpringMVC</code>、<code>SpringBoot</code>等框架中充满了<code>注解</code>，还是选择性地忽视它。</p><p>很多时候，不明白它是怎么起作用的，甚至把它和 **注释 **混淆 …</p><p>我们在工作中机械性地在<code>Controller</code>上加 <code>@RequestMapping</code>。</p><p>想彻底弄清楚注解吗？</p><p>通过本文，<em><strong>循序渐进</strong></em>的彻底搞明白<em><strong>注解</strong></em>。</p><h1 id="为什么要有注解"><a href="#为什么要有注解" class="headerlink" title="为什么要有注解"></a>为什么要有注解</h1><p>如果早期用<code>xml bean</code>来配置来管理过类对象的相信有很深的感触，到项目的开发后期，开发人员都不知道什么时候开始，发现<code>xml</code>的维护越来越糟糕。</p><p>而使用注解，能够让配置与代码维持一个很好的平衡（不过份耦合也不过份松散），而且也能 <strong>提高我们代码的阅读性</strong>，比如我看到 <code>@Test</code>注解，会很自然的知道这个注解是用来做测试功能的；</p><p>还有一个潜在优势，就是和注解和注释一样，它的位置信息就能表示它的<strong>作用域</strong>；</p><p>例如下边这个<code>@Test</code> 注解，我们一看就知道在 <code>funUnit</code> 来作用，而实际也是如此。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> funUnit <span class="token punctuation">&#123;</span>   <span class="token comment">// 这行注释给下边这行的</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>因为有自定义注解的存在，所以也能方便我们扩展配置与功能；</p><p>所以呢，为什么我们需要注解，就是基于几点为初衷：</p><ol><li>让我们从繁琐的配置文件中抽离出来；</li><li>提高代码阅读性；</li><li>自定义注解能够方便我们扩展配置与功能；</li></ol><h1 id="注解的定义"><a href="#注解的定义" class="headerlink" title="注解的定义"></a>注解的定义</h1><p>引用维基百科的定义：</p><blockquote><p>Java注解又称Java标注，是JDK5.0版本开始支持加入源代码的特殊语法 <strong>元数据</strong> 。</p><p>Java语言中的类、方法、变量、参数和包等都可以被标注。和Javadoc不同，Java标注可以通过反射获取标注内容。在编译器生成类文件时，标注可以被嵌入到字节码中。Java虚拟机可以保留标注内容，在运行时可以获取到标注内容。 当然它也支持自定义Java标注。</p></blockquote><p>连边的一句话定义：</p><blockquote><p>在指定的位置上放上一个记号，然后在这个记号的里边，可以有这个记号自己的属性，然后规定一些规则。（如：在什么地方可以放这个标记，在什么时候可以获取到这个标记。）</p></blockquote><p>暂时不理解这句话没事，我们先补充一些注解的基础知识。</p><h1 id="注解的语法"><a href="#注解的语法" class="headerlink" title="注解的语法"></a>注解的语法</h1><h2 id="注解分类"><a href="#注解分类" class="headerlink" title="注解分类"></a>注解分类</h2><ol><li>自定义注解：自己写的注解，如我之前那篇文章，自定义的 <code>@UserSiteMail、@PayCode</code> 注解；</li><li>JDK内置注解：如<code>@Override</code>检验方法重写，<code>@Deprecated</code>标识方法过期等</li><li>还有第三方框架提供的注解：SpringMVC的<code>@Controller</code></li></ol><h2 id="注解语法"><a href="#注解语法" class="headerlink" title="注解语法"></a>注解语法</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> 注解名称<span class="token punctuation">&#123;</span>    属性列表<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上边这段代码， 有两个<em><strong>元注解（注解的注解）</strong></em>，它属于<em><strong>JDK内置注解</strong></em></p><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><pre class="line-numbers language-@Target```" data-language="@Target```"><div class="caption"><span>：加在注解上，限定该注解能放的位置。</span></div><code class="language-@Target```">&#96;&#96;&#96;java类或接口：ElementType.TYPE；字段：ElementType.FIELD；方法：ElementType.METHOD；构造方法：ElementType.CONSTRUCTOR；方法参数：ElementType.PARAMETER  定义多个：@Target(&#123;ElementType.METHOD,  ElementType.FIELD&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-@Retention```" data-language="@Retention```"><div class="caption"><span>：用来规定注解的保留策略，就是在哪个阶段，我们需要保留我们定义的这些标记。</span></div><code class="language-@Retention```">&#96;&#96;&#96;javaSOURCE：在源码中保留，我们要保留标记，比如@Override，@FunctionalInterface，一般编译器语法检查的，都在源码级别保留；ClASS：在class文件中保留注解，如果@Retention不存在，则该注解默认为CLASS；RUNTIME：通常我们自定义的Annotation都是RUNTIME，因为我们一般应用注解都是在反射的时候来处理业务逻辑；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://mkstatic.lianbian.net/v2-14ec3964feb69f2e8ed2dc4a2e90d6a2_720w.jpg" alt="保留策略（图片来源网络）"></p><h2 id="完整语法示例"><a href="#完整语法示例" class="headerlink" title="完整语法示例"></a>完整语法示例</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 因为要通过反射处理业务，所以定义在运行时</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>  <span class="token comment">// 类或者接口上使用</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">PayCode</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token comment">// 使用的地方</span><span class="token annotation punctuation">@PayCode</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"alia"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"支付宝支付"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Service</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AliaPay</span> <span class="token keyword">implements</span> <span class="token class-name">IPay</span> <span class="token punctuation">&#123;</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===发起支付宝支付==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@PayCode</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"weixin"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"微信支付"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Service</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeixinPay</span> <span class="token keyword">implements</span> <span class="token class-name">IPay</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===发起微信支付==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@PayCode</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"jingdong"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"京东支付"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Service</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JingDongPay</span> <span class="token keyword">implements</span> <span class="token class-name">IPay</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===发起京东支付==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还记得前边连边定义的那句话吗？</p><blockquote><p>在指定的位置上放上一个记号，然后在这个记号的里边，可以有这个记号自己的属性，然后规定一些规则。（如：在什么地方可以放这个标记，在什么时候可以获取到这个标记。）</p></blockquote><p>嵌套到这个注解中来翻译一下：</p><p>我在各种支付方式的地方，放上一个记号，记号里设置自己的属性（alia、weixin、jingdong），在类或者接口上可以放这个记号（@Target(ElementType.TYPE)  ），这个标记在运行时的时候获取到（@Retention(RetentionPolicy.RUNTIME)  ）。</p><h1 id="注解的本质与原理"><a href="#注解的本质与原理" class="headerlink" title="注解的本质与原理"></a>注解的本质与原理</h1><h2 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h2><p>注解本质是一个继承了<code>Annotation</code> 的特殊接口，这里可以通过class文件看出；</p><p>查看class文件方式（简单的写一下步骤，不清楚的可以<code>google</code>）：</p><ol><li>IDEA左上角打开File—Project Structure</li><li>在Project Settings — Modules 下找到我们的项目</li><li>点击右侧的Paths ， 查看Output Path位置</li><li>复制路径，在我的电脑中粘贴路径即可找到对应文件夹</li><li><code>javap -v</code> 粘贴class文件路径</li></ol><p>查看上面<code>payCode</code>注解class文件如下：</p><p><img src="http://mkstatic.lianbian.net/image-20210803153300329.png" alt="payCode class文件"></p><p>美化一下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PayCode</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>接口本质的具体实现类是<code>Java 运行时</code>生成的动态代理类。而我们通过反射获取注解时，返回的是Java 运行时生成的动态代理对象<code>$Proxy1</code>。通过代理对象调用自定义注解（接口）的方法，会最终调用<code>AnnotationInvocationHandler</code> 的<code>invoke</code>方法。该方法会从<code>memberValues</code> 这个Map 中索引出对应的值。而<code>memberValues</code> 的来源是Java 常量池。</p><h1 id="注解实战"><a href="#注解实战" class="headerlink" title="注解实战"></a>注解实战</h1><p>这里贴上我上一篇文章（）里边的项目实战，利用注解，优雅的避免了冗长的 <code>if..else...</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PayCode</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"alia"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"支付宝支付"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Service</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AliaPay</span> <span class="token keyword">implements</span> <span class="token class-name">IPay</span> <span class="token punctuation">&#123;</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===发起支付宝支付==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@PayCode</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"weixin"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"微信支付"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Service</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeixinPay</span> <span class="token keyword">implements</span> <span class="token class-name">IPay</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===发起微信支付==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@PayCode</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"jingdong"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"京东支付"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Service</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JingDongPay</span> <span class="token keyword">implements</span> <span class="token class-name">IPay</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===发起京东支付==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Service</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayService</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ContextRefreshedEvent</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">IPay</span><span class="token punctuation">></span></span> payMap <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">ContextRefreshedEvent</span> contextRefreshedEvent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">ApplicationContext</span> applicationContext <span class="token operator">=</span> contextRefreshedEvent<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> beansWithAnnotation <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBeansWithAnnotation</span><span class="token punctuation">(</span><span class="token class-name">PayCode</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token keyword">if</span> <span class="token punctuation">(</span>beansWithAnnotation<span class="token punctuation">.</span>size <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               payMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               beansWithAnnotation<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-></span><span class="token punctuation">&#123;</span>                   <span class="token class-name">String</span> bizType <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">PayCode</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   payMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>bizType<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">IPay</span><span class="token punctuation">)</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>           <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token class-name">String</span> code<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          payMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.likecs.com/show-20596.html">https://www.likecs.com/show-20596.html</a></p><p><a href="https://www.zhihu.com/question/24401191">https://www.zhihu.com/question/24401191</a></p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>思考比编码重要</title>
      <link href="/2021/07/30/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/%E6%80%9D%E8%80%83%E6%AF%94%E7%BC%96%E7%A0%81%E9%87%8D%E8%A6%81/"/>
      <url>/2021/07/30/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/%E6%80%9D%E8%80%83%E6%AF%94%E7%BC%96%E7%A0%81%E9%87%8D%E8%A6%81/</url>
      
        <content type="html"><![CDATA[<p>大家好，我是连边。</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>很早以前看到这篇文章，觉得是一篇很好的文章，今天特分享给大家。</p><h1 id="莱斯利·兰伯特"><a href="#莱斯利·兰伯特" class="headerlink" title="莱斯利·兰伯特"></a>莱斯利·兰伯特</h1><p>莱斯利·兰伯特是一名计算机科学家，他提出了分布式系统、时序逻辑和并行算法等系列计算机理论。兰伯特是微软研究院首席研究员、美国国家工程院和科学院院士，2013 年，他获得了有着“计算机界诺贝尔奖”之称的图灵奖。</p><p><img src="http://mkstatic.lianbian.net/640-20210730221011368.jpeg" alt="莱斯利·兰伯特"></p><p>近日，这位世界顶级科学家应邀走进了北京大学，与学子交流科研心得。</p><p><img src="http://mkstatic.lianbian.net/640-20210730221016232.jpeg" alt="交流图片"></p><p>“怎样才能保证编码少出错？”</p><p>“你怎么看待计算机科学和数学之间的关系？”</p><p>“你提出过很多计算机理论，哪个是最钟爱的‘孩子’？”……</p><p>近日，北京大学斯坦福中心，在莱斯利·兰伯特（Leslie Lamport）的报告结束后，学生们的问题接踵而至。在近 1 个小时的时间里，他接受了学生们的“考问”。</p><p>台上的兰伯特身着一件浅蓝色条纹衬衫、一条深蓝色牛仔裤、一双黑色运动鞋。像着装一样，他的话语简洁中透着随性。在回答感兴趣的问题时，他的语速并不快，引经据典，侃侃而谈，让现场充满笑声和掌声。尽管浓密的花白胡须隐藏了他的面部表情，但在思考问题时鼻梁上金边眼镜后的目光却总喜欢凝视着空间中的某一点，让人不免产生一丝神秘感和距离感。当然对于不感兴趣的问题，他也不敷衍，只是简单一句：“不了解。”</p><p><img src="http://mkstatic.lianbian.net/640-20210730221021025.jpeg" alt="交流现场"></p><p>兰伯特现任美国微软研究院首席研究员，也是 2013 年有着“计算机界诺贝尔奖”之称的图灵奖获得者。此次他经北京大学“大学堂”顶尖学者讲学计划的邀请，与该校师生开展了交流，而此次交流的核心则是：<strong>思考，比写代码更加重要。</strong></p><h1 id="编码也须锻炼“肌肉”"><a href="#编码也须锻炼“肌肉”" class="headerlink" title="编码也须锻炼“肌肉”"></a>编码也须锻炼“肌肉”</h1><p>如何才能写出更优质的程序呢？这是记者和很多现场学生关心的一个话题。“工程师在砌砖建房之前会画一张建筑蓝图；但程序员和软件工程师往往不会这样做。这是不是房屋很难倒塌而编程经常出问题的原因呢？”报告结束后，在接受《中国科学报》记者采访时，兰伯特对比说，很多程序员在开始编写程序之前，往往不愿意勾勒哪怕是一个最简易的程序轮廓。</p><p>蓝图可以帮助工程师保证计划发挥作用。“‘发挥作用’不只意味着让大楼不倒塌，还意味着为所需要的目的服务，比如让建筑师和客户在施工之前了解他们打算建造什么样的工程。”兰伯特如是说，“蓝图可以帮助我们考虑清楚，我们在编写什么。”</p><p>为编写软件所描绘的蓝图就是规范（spec）。然而，“计划赶不上变化，就像没有哪一场战争真正能够按计划进行一样，你做出的规范也有可能发生程式错误。”兰伯特说。比如，或者是必要条件发生了改变，或者是出现了错误，可能在你写完程序之前，就需要改变原来的规范。</p><p>事实上，在真实世界中，代码可以修补，而规范也可以更新，这些都很普遍。那么，如果修补和更新不可避免，那么为什么要描绘这张蓝图呢？对此，兰伯特表示原因有二：其一，无论是谁在修补代码，都会由衷感谢规范中的每个词、每个公式的作者；其二，代码每修复一次，就会“变丑一点，更难理解一点，也更难维护”。“因此，如果不从思考规范开始，那么程序员所写的代码的每个片段就都是补丁。这样就会让一开始编写的程序变得丑陋、难以理解和维持下去。”兰伯特说。</p><p>“为什么编码难？因为编码需要思考，思考存在难度，而很多人往往低估了思考的难度。”他说，“正如漫画家迪克·金敦（Dick Guindon）所说的那样，‘写作是让你知道你的思想有多么混乱的根本方法。’”</p><p>“思考不能保证你不犯错误，但是不思考通常一定会犯错误。”没有什么简单的方法可以保证一个人能够写出好的 spec，兰伯特说。“编码就像跑步，你跑得越少，跑得也就越慢。所以必须经常反复锻炼你的编码‘肌肉’，而不是像很多人那样找借口不锻炼。”</p><h1 id="数学让编程事半功倍"><a href="#数学让编程事半功倍" class="headerlink" title="数学让编程事半功倍"></a>数学让编程事半功倍</h1><p><img src="http://mkstatic.lianbian.net/640-20210730221025739.jpeg" alt="数学公式"></p><p>兰伯特教授说：“<strong>数学可以帮助我们分析，简化我们的思维，给我留下了深刻的印象。</strong> ”</p><p>在兰伯特看来，编写 spec 并不能保证人们编写的代码永远不会坍塌，所以仍然需要利用一些方法和手段消除编程过程中的错误。在他看来，理解编码复杂性的最好方法就是<strong>抽象化</strong>，而最简练、精确的抽象化语言就是数学，即那些在基础数学课堂上所学到的数学课程，如集合、函数和简单的逻辑。<strong>“它可以帮助我们提高编写能力，理解正在做的事情，消灭错误。”</strong>兰伯特补充说。</p><p><strong>“在数学和计算机的关系上，兰伯特认为数学无疑是计算机科学的基础。”</strong>兰伯特的回答给北京大学信息科学技术学院的刘垚留下了深刻印象，<strong>“思考比写代码更加重要。而数学对于我们严谨、有效地思考问题非常有帮助。”</strong>尽管如此，兰伯特也表示，数学很难直接成为人们解决问题的方法。它更多地是帮助分析问题，或是评估提出的解决方案。</p><p>“在你提出检验编码的模型之后，数学能够帮助你检查模型是否正确，这正是为什么我提出了 TLA+（一种可以帮助程序员进行模型检测的新的计算机编程语言）。”兰伯特举例说。亚马逊公司和英特尔公司的很多程序员发现，TLA+检测模型可以提高他们的排错效率。“处理硬件错误时，成本往往很昂贵，因为如果出现问题就要重新生产所有的芯片，而检测模型可以帮助他们发现错误，大幅降低成本。”</p><p>“借助数学的思考方式来关注问题的核心，从而看到问题背后的深层原因，再去寻找解决方案。作为数学专业的‘码农’，我对此体会尤为深刻。”北京大学数学院学生李屹对此次交流深有所感，“数学之于计算机，不仅是一种工具或者方法，而是一种哲学。以数学的思想作为指导，有时即便不掌握具体的数学工具，都可以使得编程工作事半功倍。”</p><h1 id="大学教育要立足长远"><a href="#大学教育要立足长远" class="headerlink" title="大学教育要立足长远"></a>大学教育要立足长远</h1><p>“兰伯特讲到的 <strong>‘多思考，少编程’</strong> 对我启发莫大。”“他讲的要学会抽象对我们掌握正确的科研态度非常重要。”“通过兰伯特的介绍，我认识到如果把 TLA+语言投入到本科或更早的教学中，将会使更多人受益于数学精练、严谨的逻辑锻炼，节约很多时间，因为未来普通的编程工作注定要被机器代替。”……和金晓晗一样，在此次采访中，很多学生都表示与这位计算机学界“大牛”进行的交流让他们受益匪浅。</p><p>在计算机领域，兰伯特确实是位名副其实的传奇人物。他的分布式计算理论奠定了这门学科的基础，并被称为“分布式计算原理之父”；他在 1978 年发表的论文《分布式系统内的时间、时钟事件顺序》成为计算机科学史上被引用最多的文献；他为“并发系统的规范与验证”研究贡献了核心原理……</p><p>为此，美国计算机协会将 2013 年度图灵奖颁发给了他。“如果你喜欢使用互联网，那么就该感谢莱斯利。”施乐帕洛阿尔托研究中心创始人兼经理、数字设备公司系统研究中心创始人兼经理鲍勃·泰勒（Bob Taylor）曾如是评价，“因为互联网建立在分布式系统技术的基础知识之上，而后者又建立在莱斯利所发明的理论基础之上。”</p><p>对于自己的研究成果，兰伯特表示，我希望它们都能发挥作用，“因为个人对美有着不同的理解，所以人们究竟会更喜欢哪个理论也是‘仁者见仁、智者见智’”。在提及成功的秘诀时，他认为，每个人的研究道路都会因人而异，由于现在的计算机科学环境已经和他开始起步的时代发生了天翻地覆的变化，他的经验可能并不适用于每一个人。</p><p>如果一个人<strong>“最终想要成为自己想成为的人，就要做自己最严格的裁判”</strong>。他指出：“同时，不要忽视你的批评者，不要因为观点相左就认为批评者‘太愚蠢’，他们会推动你不断进步。”</p><p>在他看来，现在很多教师和学校希望按照他们所想象的那样教导学生，然而这些想法可能对学生不一定适用。“比如，现在经常通过就业率判定学校是否成功，而大学不应该把让学生就业作为办学目的。”他说，以编程为例，编写“种子”编码很重要，尽管它可能不会马上产生作用，但可能在 10 年、15 年之后产生更重要的应用。“教育目标也应该思考得更长久、更远大一点。”</p><p>转载自：《中国科学报》 (2015-12-03 第3版 国际)</p>]]></content>
      
      
      <categories>
          
          <category> 观点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 观点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这本书，我读了三遍</title>
      <link href="/2021/07/29/%E5%90%8E%E7%AB%AF/java/%E5%9F%BA%E7%A1%80/%E8%BF%99%E6%9C%AC%E4%B9%A6%EF%BC%8C%E6%88%91%E8%AF%BB%E4%BA%86%E4%B8%89%E9%81%8D/"/>
      <url>/2021/07/29/%E5%90%8E%E7%AB%AF/java/%E5%9F%BA%E7%A1%80/%E8%BF%99%E6%9C%AC%E4%B9%A6%EF%BC%8C%E6%88%91%E8%AF%BB%E4%BA%86%E4%B8%89%E9%81%8D/</url>
      
        <content type="html"><![CDATA[<p>大家好，我是连边。</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一个月（2021-06-21～2021-07-29），把《Java8实战》这本书，看了三遍，也整理了三篇文章。</p><ol><li>x</li><li>xx</li><li>xxx</li></ol><p>对于一个多年程序员来说，这是一本很简单的书，可能就是讲的一些Java8语法方面的书，甚至会有的程序员会感慨，这本书，不是扫一眼就看完的书吗，怎么还会要看三遍。</p><h1 id="最开始的初衷"><a href="#最开始的初衷" class="headerlink" title="最开始的初衷"></a>最开始的初衷</h1><p>看这本书的最开始的起因是看到同事的一段代码，我觉得他那样子那段代码，写得非常的骚气，但是效率不高，想一探究竟，到底那样子写好不好。</p><p>同事的骚代码，各位看官可以看看（有什么想法咱留言区见，如果是你，你会怎么写）：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">GoodsListBo</span> item <span class="token operator">:</span> goodsListBos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  productGoodsCategoryList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>n<span class="token operator">-></span>n<span class="token punctuation">.</span><span class="token function">getCategoryOneId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getGoodsCategoryA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>data <span class="token operator">-></span><span class="token punctuation">&#123;</span>    item<span class="token punctuation">.</span><span class="token function">setGoodsCategoryA</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getCategoryOneName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最开始的初衷，是想全面了解Java8的语法与背后的逻辑，经多方（豆瓣、知乎）推荐，遂入手《Java8实战》。</p><h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><p>看目录，觉得这是一本没必要花太多精力去看的书，因为看着就是感觉他是一本Java8语法手册。</p><p>看这本书的第一遍，觉得看懂了。</p><p>收获也颇丰，这本书不仅仅讲了Java8的语法，也讲了背后设计的原理，更讲了有一些内容为什么Java需要更新迭代，比如说，处理时间的类，为什么反反复复的推出那么多个的类。</p><p>某一个晚上，想着把这本书的脑图知识脉络画一下，突然的发现，我是画不出来的，看着书的目录能够勉强画出来。</p><h2 id="萌生阅读第二遍的想法"><a href="#萌生阅读第二遍的想法" class="headerlink" title="萌生阅读第二遍的想法"></a>萌生阅读第二遍的想法</h2><p>产生一个想法，如果我把这本书，再看一遍，能够把知识脉络画出来吗？</p><p>这次的目的与最开始的初衷不一样，我这次的目的相对来说简单一些，就是把这本书的知识脉络整理出来，这次看的方式和第一遍看的方式有所不同，因为是整理脉络，所以碰到自己熟悉的章节段落，我选择直接跳过。历时6天（每天20:00-22:00），第二遍看完，基本能够把这本书的知识脉络脑图画出。</p><h2 id="为什么要阅读第三遍"><a href="#为什么要阅读第三遍" class="headerlink" title="为什么要阅读第三遍"></a>为什么要阅读第三遍</h2><p>小时候不懂一寸光阴一寸金的道理，年近三旬的我，突然的某一天，懂了，只恨这个突然来得比较晚。</p><p>因为看完第二遍的同时，我发现这本书的本身，不值得我花费这么多的时间，因为他无非就是讲我开头的三篇文章总结的内容，可能认真花费3-5小时的时间（1-2小时阅读总结的三篇文章，然后花2小时把Java8实战过一遍），再加上平常工作中的使用，就完全能够把他很好的掌握下来。</p><p>好奇心再起，想通过这本书，来掌握一种学习方式，想看看大佬们是怎么阅读这本书的。</p><p>来到b站大学，搜索有没有大佬阅读这本书的视频，直接贴链接（汪文君老师）。</p><p><a href="https://www.bilibili.com/video/BV1VW41127sh">https://www.bilibili.com/video/BV1VW41127sh</a> (文末点击「阅读原文」直接跳转)</p><p>视频正确观看方式：1.5倍数，遇到自己懂的地方，快进。</p><p>看这一遍的目的是想找到老师们阅读书的思维和我的思维有什么区别，老师能想到的知识点，我在阅读的时候是否也能想到。查漏补缺，找到一种适合自己的学习方式。</p><h1 id="学习的方式"><a href="#学习的方式" class="headerlink" title="学习的方式"></a>学习的方式</h1><p>阅读这本书三遍最重要的收获不是上边的三篇总结文章，而是我不断有意识的锻炼，找到了一些学习的窍门，希望对你也有帮助。</p><h2 id="甄别知识"><a href="#甄别知识" class="headerlink" title="甄别知识"></a>甄别知识</h2><ol><li>不要一上来，就开干（比如，拿着书就无目的的阅读）；</li><li>带着解决问题的目的阅读书籍是吸收最好的；</li><li>了解全貌，可以通过整理脑图，阅读书籍目录来了解；</li><li>这是一门深的知识，还是一门浅的知识，同时做好对应的心理准备；</li><li>找到你自己思维舒适区，不断打开边界（阅读有一点困难的书，不要太难，不要太容易的那种）；</li></ol><h2 id="树立观念"><a href="#树立观念" class="headerlink" title="树立观念"></a>树立观念</h2><p>树立正确的观念，学习从来就不是一件快乐的事情，很多晦涩的知识需要你重复的阅读与思考。</p><h2 id="做好计划"><a href="#做好计划" class="headerlink" title="做好计划"></a>做好计划</h2><ol><li>做好看书计划，这本书需要花费多少时间；</li><li>实际花费时间做对比（可以用手机的秒表记录实际时间，中间被其他的事情打断，按下暂停）；</li><li>总结与复盘自己的时间计划出入；</li></ol><blockquote><p> 年近三旬，发现原来一些看不上的方法与规则，现在越来越受用。</p><p>比如说那句大家耳熟能详的“年轻真好。”</p></blockquote><p>最后，祝进步。</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stream</title>
      <link href="/2021/07/28/%E5%90%8E%E7%AB%AF/java/%E5%9F%BA%E7%A1%80/stream/"/>
      <url>/2021/07/28/%E5%90%8E%E7%AB%AF/java/%E5%9F%BA%E7%A1%80/stream/</url>
      
        <content type="html"><![CDATA[<h1 id="Stream概述"><a href="#Stream概述" class="headerlink" title="Stream概述"></a>Stream概述</h1><p>Java 8 是一个非常成功的版本，这个版本新增的<code>Stream</code>，配合同版本出现的 <code>Lambda</code> ，给我们操作集合（Collection）提供了极大的便利。</p><p>那么什么是<code>Stream</code>？</p><p>Java 8 是一个非常成功的版本，这个版本新增的<code>Stream</code>，配合同版本出现的 <code>Lambda</code> ，给我们操作集合（Collection）提供了极大的便利。</p><blockquote><p><code>Stream</code>将要处理的元素集合看作一种流，在流的过程中，借助<code>Stream API</code>对流中的元素进行操作，比如：筛选、排序、聚合等。</p></blockquote><p><code>Stream</code>可以由数组或集合创建，对流的操作分为两种：</p><ol><li>中间操作，每次返回一个新的流，可以有多个。</li><li>终端操作，每个流只能进行一次终端操作，终端操作结束后流无法再次使用。终端操作会产生一个新的集合或值。</li></ol><p>另外，<code>Stream</code>有几个特性：</p><ol><li>stream不存储数据，而是按照特定的规则对数据进行计算，一般会输出结果。</li><li>stream不会改变数据源，通常情况下会产生一个新的集合或一个值。</li><li>stream具有延迟执行特性，只有调用终端操作时，中间操作才会执行。</li></ol><h1 id="Stream创建"><a href="#Stream创建" class="headerlink" title="Stream创建"></a>Stream创建</h1><ol><li>通过 <code>java.util.Collection.stream()</code> 方法用集合创建流</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建一个顺序流</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建一个并行流</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> parallelStream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>使用<code>java.util.Arrays.stream(T[] array)</code>方法用数组创建流</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">IntStream</span> stream <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>使用<code>Stream</code>的静态方法：<code>of()、iterate()、generate()</code></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream2 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-></span> x <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream2<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">></span></span> stream3 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token operator">::</span><span class="token function">random</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream3<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">0</span><span class="token number">3</span><span class="token number">6</span><span class="token number">9</span><span class="token number">0.34836584572188245</span><span class="token number">0.769259529683354</span><span class="token number">0.5509756336322659</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="stream和parallelStream的简单区分"><a href="#stream和parallelStream的简单区分" class="headerlink" title="stream和parallelStream的简单区分"></a>stream<code>和</code>parallelStream的简单区分</h2><p><code>stream</code>是顺序流，由主线程按顺序对流执行操作，而<code>parallelStream</code>是并行流，内部以多线程并行执行的方式对流进行操作，但前提是流中的数据处理没有顺序要求。</p><p>例如筛选集合中的奇数，两者的处理不同之处：</p><p><img src="http://mkstatic.lianbian.net/20201106164400889.png" alt="在这里插入图片描述"></p><p>如果流中的数据量足够大，并行流可以加快处速度。</p><p>除了直接创建并行流，还可以通过<code>parallel()</code>把顺序流转换成并行流：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> findFirst <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x<span class="token operator">-></span>x<span class="token operator">></span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Stream使用"><a href="#Stream使用" class="headerlink" title="Stream使用"></a>Stream使用</h1><p>在使用stream之前，先理解一个概念：<code>Optional</code> 。</p><blockquote><p><code>Optional</code>类是一个可以为<code>null</code>的容器对象。如果值存在则<code>isPresent()</code>方法会返回<code>true</code>，调用<code>get()</code>方法会返回该对象。<br>更详细说明可以看我的上一篇文章：</p></blockquote><p><strong>接下来，大批代码向你袭来！我将用20个案例将Stream的使用整得明明白白，只要跟着敲一遍代码，就能很好地掌握。</strong></p><h2 id="案例使用的员工类"><a href="#案例使用的员工类" class="headerlink" title="案例使用的员工类"></a>案例使用的员工类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> personList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">8900</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token number">7000</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">,</span> <span class="token string">"Washington"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Lily"</span><span class="token punctuation">,</span> <span class="token number">7800</span><span class="token punctuation">,</span> <span class="token string">"female"</span><span class="token punctuation">,</span> <span class="token string">"Washington"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Anni"</span><span class="token punctuation">,</span> <span class="token number">8200</span><span class="token punctuation">,</span> <span class="token string">"female"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Owen"</span><span class="token punctuation">,</span> <span class="token number">9500</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Alisa"</span><span class="token punctuation">,</span> <span class="token number">7900</span><span class="token punctuation">,</span> <span class="token string">"female"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>  <span class="token comment">// 姓名</span><span class="token keyword">private</span> <span class="token keyword">int</span> salary<span class="token punctuation">;</span> <span class="token comment">// 薪资</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token comment">// 年龄</span><span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span> <span class="token comment">//性别</span><span class="token keyword">private</span> <span class="token class-name">String</span> area<span class="token punctuation">;</span>  <span class="token comment">// 地区</span><span class="token comment">// 构造方法</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> salary<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span><span class="token class-name">String</span> sex<span class="token punctuation">,</span><span class="token class-name">String</span> area<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>area <span class="token operator">=</span> area<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 省略了get和set，请自行添加</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="遍历-匹配（foreach-find-match）"><a href="#遍历-匹配（foreach-find-match）" class="headerlink" title="遍历/匹配（foreach/find/match）"></a>遍历/匹配（foreach/find/match）</h2><p><code>Stream</code>也是支持类似集合的遍历和匹配元素的，只是<code>Stream</code>中的元素是以<code>Optional</code>类型存在的。<code>Stream</code>的遍历、匹配非常简单。</p><p><img src="http://mkstatic.lianbian.net/2020110914450139.png" alt="img"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// import已省略，请自行添加，后面代码亦是</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 遍历输出符合条件的元素</span>        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-></span> x <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 匹配第一个</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> findFirst <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-></span> x <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 匹配任意（适用于并行流）</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> findAny <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-></span> x <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 是否包含符合特定条件的元素</span>        <span class="token keyword">boolean</span> anyMatch <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>x <span class="token operator">-></span> x <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匹配第一个值："</span> <span class="token operator">+</span> findFirst<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匹配任意一个值："</span> <span class="token operator">+</span> findAny<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否存在大于6的值："</span> <span class="token operator">+</span> anyMatch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="筛选（filter）"><a href="#筛选（filter）" class="headerlink" title="筛选（filter）"></a>筛选（filter）</h2><p>筛选，是按照一定的规则校验流中的元素，将符合条件的元素提取到新的流中的操作。</p><p><img src="http://mkstatic.lianbian.net/20201109144706541.jpg" alt="img"></p><p><strong>案例一：筛选出<code>Integer</code>集合中大于7的元素，并打印出来</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-></span> x <span class="token operator">></span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><blockquote><p>8 9</p></blockquote><p><strong>案例二： 筛选员工中工资高于8000的人，并形成新的集合。</strong> 形成新集合依赖<code>collect</code>（收集），后文有详细介绍。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> personList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">8900</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token number">7000</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">,</span> <span class="token string">"Washington"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Lily"</span><span class="token punctuation">,</span> <span class="token number">7800</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">"female"</span><span class="token punctuation">,</span> <span class="token string">"Washington"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Anni"</span><span class="token punctuation">,</span> <span class="token number">8200</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">"female"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Owen"</span><span class="token punctuation">,</span> <span class="token number">9500</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Alisa"</span><span class="token punctuation">,</span> <span class="token number">7900</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token string">"female"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> fiterList <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-></span> x<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"高于8000的员工姓名："</span> <span class="token operator">+</span> fiterList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><blockquote><p>高于8000的员工姓名：[Tom, Anni, Owen]</p></blockquote><h2 id="聚合（max-min-count"><a href="#聚合（max-min-count" class="headerlink" title="聚合（max/min/count)"></a>聚合（max/min/count)</h2><p><code>max</code>、<code>min</code>、<code>count</code>这些字眼你一定不陌生，没错，在mysql中我们常用它们进行数据统计。Java stream中也引入了这些概念和用法，极大地方便了我们对集合、数组的数据统计工作。</p><p><img src="http://mkstatic.lianbian.net/20201109145217354.png" alt="img"></p><p><strong>案例一：获取<code>String</code>集合中最长的元素。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"adnm"</span><span class="token punctuation">,</span> <span class="token string">"admmt"</span><span class="token punctuation">,</span> <span class="token string">"pot"</span><span class="token punctuation">,</span> <span class="token string">"xbangd"</span><span class="token punctuation">,</span> <span class="token string">"weoujgsd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> max <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">length</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最长的字符串："</span> <span class="token operator">+</span> max<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><blockquote><p>最长的字符串：weoujgsd</p></blockquote><p><strong>案例二：获取<code>Integer</code>集合中的最大值。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 自然排序</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> max <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">compareTo</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 自定义排序</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> max2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"自然排序的最大值："</span> <span class="token operator">+</span> max<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"自定义排序的最大值："</span> <span class="token operator">+</span> max2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><blockquote><p>自然排序的最大值：11<br>自定义排序的最大值：11</p></blockquote><p><strong>案例三：获取员工工资最高的人。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> personList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">8900</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token number">7000</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">,</span> <span class="token string">"Washington"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Lily"</span><span class="token punctuation">,</span> <span class="token number">7800</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">"female"</span><span class="token punctuation">,</span> <span class="token string">"Washington"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Anni"</span><span class="token punctuation">,</span> <span class="token number">8200</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">"female"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Owen"</span><span class="token punctuation">,</span> <span class="token number">9500</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Alisa"</span><span class="token punctuation">,</span> <span class="token number">7900</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token string">"female"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> max <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"员工工资最大值："</span> <span class="token operator">+</span> max<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><blockquote><p>员工工资最大值：9500</p></blockquote><p><strong>案例四：计算<code>Integer</code>集合中大于6的元素的个数。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> count <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-></span> x <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"list中大于6的元素个数："</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><blockquote><p>list中大于6的元素个数：4</p></blockquote><h2 id="映射-map-flatMap"><a href="#映射-map-flatMap" class="headerlink" title="映射(map/flatMap)"></a>映射(map/flatMap)</h2><ul><li><code>map</code>：接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</li><li><code>flatMap</code>：接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。</li></ul><p><img src="http://mkstatic.lianbian.net/20201109145252340.jpg" alt="img"></p><p><img src="http://mkstatic.lianbian.net/2020110914550762.jpg" alt="img"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strArr <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"abcd"</span><span class="token punctuation">,</span> <span class="token string">"bcdd"</span><span class="token punctuation">,</span> <span class="token string">"defde"</span><span class="token punctuation">,</span> <span class="token string">"fTr"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> strList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>strArr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> intList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> intListNew <span class="token operator">=</span> intList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">-></span> x <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"每个元素大写："</span> <span class="token operator">+</span> strList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"每个元素+3："</span> <span class="token operator">+</span> intListNew<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><blockquote><p>每个元素大写：[ABCD, BCDD, DEFDE, FTR]<br>每个元素+3：[4, 6, 8, 10, 12, 14]</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> personList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">8900</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token number">7000</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">,</span> <span class="token string">"Washington"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Lily"</span><span class="token punctuation">,</span> <span class="token number">7800</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">"female"</span><span class="token punctuation">,</span> <span class="token string">"Washington"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Anni"</span><span class="token punctuation">,</span> <span class="token number">8200</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">"female"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Owen"</span><span class="token punctuation">,</span> <span class="token number">9500</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Alisa"</span><span class="token punctuation">,</span> <span class="token number">7900</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token string">"female"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 不改变原来员工集合的方式</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> personListNew <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>person <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token class-name">Person</span> personNew <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personNew<span class="token punctuation">.</span><span class="token function">setSalary</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> personNew<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一次改动前："</span> <span class="token operator">+</span> personList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-->"</span> <span class="token operator">+</span> personList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一次改动后："</span> <span class="token operator">+</span> personListNew<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-->"</span> <span class="token operator">+</span> personListNew<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 改变原来员工集合的方式</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> personListNew2 <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>person <span class="token operator">-></span> <span class="token punctuation">&#123;</span>person<span class="token punctuation">.</span><span class="token function">setSalary</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> person<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"二次改动前："</span> <span class="token operator">+</span> personList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-->"</span> <span class="token operator">+</span> personListNew<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"二次改动后："</span> <span class="token operator">+</span> personListNew2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-->"</span> <span class="token operator">+</span> personListNew<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><blockquote><p>一次改动前：Tom–&gt;8900<br>一次改动后：Tom–&gt;18900<br>二次改动前：Tom–&gt;18900<br>二次改动后：Tom–&gt;18900</p></blockquote><p><strong>案例三：将两个字符数组合并成一个新的字符数组。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"m,k,l,a"</span><span class="token punctuation">,</span> <span class="token string">"1,3,5,7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> listNew <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token comment">// 将每个元素转换成一个stream</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> s2 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>split<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> s2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"处理前的集合："</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"处理后的集合："</span> <span class="token operator">+</span> listNew<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><blockquote><p>处理前的集合：[m-k-l-a, 1-3-5]<br>处理后的集合：[m, k, l, a, 1, 3, 5]</p></blockquote><h2 id="归约-reduce"><a href="#归约-reduce" class="headerlink" title="归约(reduce)"></a>归约(reduce)</h2><p>归约，也称缩减，顾名思义，是把一个流缩减成一个值，能实现对集合求和、求乘积和求最值操作。</p><p><img src="http://mkstatic.lianbian.net/20201109145706497.png" alt="img"></p><p><strong>案例一：求<code>Integer</code>集合的元素之和、乘积和最大值。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 求和方式1</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> sum <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-></span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 求和方式2</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> sum2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 求和方式3</span><span class="token class-name">Integer</span> sum3 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 求乘积</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> product <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-></span> x <span class="token operator">*</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 求最大值方式1</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> max <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-></span> x <span class="token operator">></span> y <span class="token operator">?</span> x <span class="token operator">:</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 求最大值写法2</span><span class="token class-name">Integer</span> max2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">max</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"list求和："</span> <span class="token operator">+</span> sum<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> sum2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> sum3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"list求积："</span> <span class="token operator">+</span> product<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"list求和："</span> <span class="token operator">+</span> max<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> max2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><blockquote><p>list求和：29,29,29<br>list求积：2112<br>list求和：11,11</p></blockquote><p><strong>案例二：求所有员工的工资之和和最高工资。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> personList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">8900</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token number">7000</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">,</span> <span class="token string">"Washington"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Lily"</span><span class="token punctuation">,</span> <span class="token number">7800</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">"female"</span><span class="token punctuation">,</span> <span class="token string">"Washington"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Anni"</span><span class="token punctuation">,</span> <span class="token number">8200</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">"female"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Owen"</span><span class="token punctuation">,</span> <span class="token number">9500</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Alisa"</span><span class="token punctuation">,</span> <span class="token number">7900</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token string">"female"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 求工资之和方式1：</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> sumSalary <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 求工资之和方式2：</span><span class="token class-name">Integer</span> sumSalary2 <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>sum<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">-></span> sum <span class="token operator">+=</span> p<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>sum1<span class="token punctuation">,</span> sum2<span class="token punctuation">)</span> <span class="token operator">-></span> sum1 <span class="token operator">+</span> sum2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 求工资之和方式3：</span><span class="token class-name">Integer</span> sumSalary3 <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>sum<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">-></span> sum <span class="token operator">+=</span> p<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 求最高工资方式1：</span><span class="token class-name">Integer</span> maxSalary <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>max<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">-></span> max <span class="token operator">></span> p<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> max <span class="token operator">:</span> p<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">max</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 求最高工资方式2：</span><span class="token class-name">Integer</span> maxSalary2 <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>max<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">-></span> max <span class="token operator">></span> p<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> max <span class="token operator">:</span> p<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>max1<span class="token punctuation">,</span> max2<span class="token punctuation">)</span> <span class="token operator">-></span> max1 <span class="token operator">></span> max2 <span class="token operator">?</span> max1 <span class="token operator">:</span> max2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"工资之和："</span> <span class="token operator">+</span> sumSalary<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> sumSalary2 <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> sumSalary3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最高工资："</span> <span class="token operator">+</span> maxSalary <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> maxSalary2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><blockquote><p>工资之和：49300,49300,49300<br>最高工资：9500,9500</p></blockquote><h2 id="收集-collect"><a href="#收集-collect" class="headerlink" title="收集(collect)"></a>收集(collect)</h2><p><code>collect</code>，收集，可以说是内容最繁多、功能最丰富的部分了。从字面上去理解，就是把一个流收集起来，最终可以是收集成一个值也可以收集成一个新的集合。</p><blockquote><p><code>collect</code>主要依赖<code>java.util.stream.Collectors</code>类内置的静态方法。</p></blockquote><h3 id="归集-toList-toSet-toMap"><a href="#归集-toList-toSet-toMap" class="headerlink" title="归集(toList/toSet/toMap)"></a>归集(toList/toSet/toMap)</h3><p>因为流不存储数据，那么在流中的数据完成处理后，需要将流中的数据重新归集到新的集合里。<code>toList</code>、<code>toSet</code>和<code>toMap</code>比较常用，另外还有<code>toCollection</code>、<code>toConcurrentMap</code>等复杂一些的用法。</p><p>下面用一个案例演示<code>toList</code>、<code>toSet</code>和<code>toMap</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> listNew <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-></span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-></span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> personList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">8900</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token number">7000</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">,</span> <span class="token string">"Washington"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Lily"</span><span class="token punctuation">,</span> <span class="token number">7800</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">"female"</span><span class="token punctuation">,</span> <span class="token string">"Washington"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Anni"</span><span class="token punctuation">,</span> <span class="token number">8200</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">"female"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>p <span class="token operator">-></span> p<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> p <span class="token operator">-></span> p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toList:"</span> <span class="token operator">+</span> listNew<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toSet:"</span> <span class="token operator">+</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toMap:"</span> <span class="token operator">+</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><blockquote><p>toList：[6, 4, 6, 6, 20]<br>toSet：[4, 20, 6]<br>toMap：{Tom=mutest.Person@5fd0d5ae, Anni=mutest.Person@2d98a335}</p></blockquote><h3 id="统计-count-averaging"><a href="#统计-count-averaging" class="headerlink" title="统计(count/averaging)"></a>统计(count/averaging)</h3><p><code>Collectors</code>提供了一系列用于数据统计的静态方法：</p><ul><li>计数：<code>count</code></li><li>平均值：<code>averagingInt</code>、<code>averagingLong</code>、<code>averagingDouble</code></li><li>最值：<code>maxBy</code>、<code>minBy</code></li><li>求和：<code>summingInt</code>、<code>summingLong</code>、<code>summingDouble</code></li><li>统计以上所有：<code>summarizingInt</code>、<code>summarizingLong</code>、<code>summarizingDouble</code></li></ul><p><strong>案例：统计员工人数、平均工资、工资总额、最高工资。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> personList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">8900</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token number">7000</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">,</span> <span class="token string">"Washington"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Lily"</span><span class="token punctuation">,</span> <span class="token number">7800</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">"female"</span><span class="token punctuation">,</span> <span class="token string">"Washington"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 求总数</span><span class="token class-name">Long</span> count <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">counting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 求平均工资</span><span class="token class-name">Double</span> average <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">averagingDouble</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 求最高工资</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> max <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">maxBy</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">compare</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 求工资之和</span><span class="token class-name">Integer</span> sum <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">summingInt</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 一次性统计所有信息</span><span class="token class-name">DoubleSummaryStatistics</span> collect <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">summarizingDouble</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"员工总数："</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"员工平均工资："</span> <span class="token operator">+</span> average<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"员工工资总和："</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"员工工资所有统计："</span> <span class="token operator">+</span> collect<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><blockquote><p>员工总数：3<br>员工平均工资：7900.0<br>员工工资总和：23700<br>员工工资所有统计：DoubleSummaryStatistics{count=3, sum=23700.000000,min=7000.000000, average=7900.000000, max=8900.000000}</p></blockquote><h3 id="分组-partitioningBy-groupingBy"><a href="#分组-partitioningBy-groupingBy" class="headerlink" title="分组(partitioningBy/groupingBy)"></a>分组(partitioningBy/groupingBy)</h3><ul><li>分区：将<code>stream</code>按条件分为两个<code>Map</code>，比如员工按薪资是否高于8000分为两部分。</li><li>分组：将集合分为多个Map，比如员工按性别分组。有单级分组和多级分组。</li></ul><p><img src="http://mkstatic.lianbian.net/20201109145807450.png" alt="img"></p><p><strong>案例：将员工按薪资是否高于8000分为两部分；将员工按性别和地区分组</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> personList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">8900</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token number">7000</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">,</span> <span class="token string">"Washington"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Lily"</span><span class="token punctuation">,</span> <span class="token number">7800</span><span class="token punctuation">,</span> <span class="token string">"female"</span><span class="token punctuation">,</span> <span class="token string">"Washington"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Anni"</span><span class="token punctuation">,</span> <span class="token number">8200</span><span class="token punctuation">,</span> <span class="token string">"female"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Owen"</span><span class="token punctuation">,</span> <span class="token number">9500</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Alisa"</span><span class="token punctuation">,</span> <span class="token number">7900</span><span class="token punctuation">,</span> <span class="token string">"female"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将员工按薪资是否高于8000分组</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span><span class="token punctuation">></span></span> part <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">partitioningBy</span><span class="token punctuation">(</span>x <span class="token operator">-></span> x<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将员工按性别分组</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span><span class="token punctuation">></span></span> group <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getSex</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将员工先按性别分组，再按地区分组</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span><span class="token punctuation">></span><span class="token punctuation">></span></span> group2 <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getSex</span><span class="token punctuation">,</span> <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getArea</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"员工按薪资是否大于8000分组情况："</span> <span class="token operator">+</span> part<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"员工按性别分组情况："</span> <span class="token operator">+</span> group<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"员工按性别、地区："</span> <span class="token operator">+</span> group2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">员工按薪资是否大于<span class="token number">8000</span>分组情况：<span class="token punctuation">&#123;</span><span class="token boolean">false</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token class-name"><span class="token namespace">mutest<span class="token punctuation">.</span></span>Person</span><span class="token annotation punctuation">@2d98a335</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">mutest<span class="token punctuation">.</span></span>Person</span><span class="token annotation punctuation">@16b98e56</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">mutest<span class="token punctuation">.</span></span>Person</span><span class="token annotation punctuation">@7ef20235</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token class-name"><span class="token namespace">mutest<span class="token punctuation">.</span></span>Person</span><span class="token annotation punctuation">@27d6c5e0</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">mutest<span class="token punctuation">.</span></span>Person</span><span class="token annotation punctuation">@4f3f5b24</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">mutest<span class="token punctuation">.</span></span>Person</span><span class="token annotation punctuation">@15aeb7ab</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>员工按性别分组情况：<span class="token punctuation">&#123;</span>female<span class="token operator">=</span><span class="token punctuation">[</span><span class="token class-name"><span class="token namespace">mutest<span class="token punctuation">.</span></span>Person</span><span class="token annotation punctuation">@16b98e56</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">mutest<span class="token punctuation">.</span></span>Person</span><span class="token annotation punctuation">@4f3f5b24</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">mutest<span class="token punctuation">.</span></span>Person</span><span class="token annotation punctuation">@7ef20235</span><span class="token punctuation">]</span><span class="token punctuation">,</span> male<span class="token operator">=</span><span class="token punctuation">[</span><span class="token class-name"><span class="token namespace">mutest<span class="token punctuation">.</span></span>Person</span><span class="token annotation punctuation">@27d6c5e0</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">mutest<span class="token punctuation">.</span></span>Person</span><span class="token annotation punctuation">@2d98a335</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">mutest<span class="token punctuation">.</span></span>Person</span><span class="token annotation punctuation">@15aeb7ab</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>员工按性别、地区：<span class="token punctuation">&#123;</span>female<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token class-name">New</span> <span class="token class-name">York</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token class-name"><span class="token namespace">mutest<span class="token punctuation">.</span></span>Person</span><span class="token annotation punctuation">@4f3f5b24</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">mutest<span class="token punctuation">.</span></span>Person</span><span class="token annotation punctuation">@7ef20235</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">Washington</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token class-name"><span class="token namespace">mutest<span class="token punctuation">.</span></span>Person</span><span class="token annotation punctuation">@16b98e56</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> male<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token class-name">New</span> <span class="token class-name">York</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token class-name"><span class="token namespace">mutest<span class="token punctuation">.</span></span>Person</span><span class="token annotation punctuation">@27d6c5e0</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">mutest<span class="token punctuation">.</span></span>Person</span><span class="token annotation punctuation">@15aeb7ab</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">Washington</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token class-name"><span class="token namespace">mutest<span class="token punctuation">.</span></span>Person</span><span class="token annotation punctuation">@2d98a335</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="接合-joining"><a href="#接合-joining" class="headerlink" title="接合(joining)"></a>接合(joining)</h3><p><code>joining</code>可以将stream中的元素用特定的连接符（没有的话，则直接连接）连接成一个字符串。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> personList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">8900</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token number">7000</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">,</span> <span class="token string">"Washington"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Lily"</span><span class="token punctuation">,</span> <span class="token number">7800</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">"female"</span><span class="token punctuation">,</span> <span class="token string">"Washington"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> names <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>p <span class="token operator">-></span> p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有员工的姓名："</span> <span class="token operator">+</span> names<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> string <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拼接后的字符串："</span> <span class="token operator">+</span> string<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><blockquote><p>所有员工的姓名：Tom,Jack,Lily<br>拼接后的字符串：A-B-C</p></blockquote><h3 id="归约-reducing"><a href="#归约-reducing" class="headerlink" title="归约(reducing)"></a>归约(reducing)</h3><p><code>Collectors</code>类提供的<code>reducing</code>方法，相比于<code>stream</code>本身的<code>reduce</code>方法，增加了对自定义归约的支持。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> personList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">8900</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token number">7000</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">,</span> <span class="token string">"Washington"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Lily"</span><span class="token punctuation">,</span> <span class="token number">7800</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">"female"</span><span class="token punctuation">,</span> <span class="token string">"Washington"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 每个员工减去起征点后的薪资之和（这个例子并不严谨，但一时没想到好的例子）</span><span class="token class-name">Integer</span> sum <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">reducing</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">(</span>i <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"员工扣税薪资总和："</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// stream的reduce</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> sum2 <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"员工薪资总和："</span> <span class="token operator">+</span> sum2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><blockquote><p>员工扣税薪资总和：8700<br>员工薪资总和：23700</p></blockquote><h2 id="排序-sorted"><a href="#排序-sorted" class="headerlink" title="排序(sorted)"></a>排序(sorted)</h2><p>sorted，中间操作。有两种排序：</p><ul><li>sorted()：自然排序，流中元素需实现Comparable接口</li><li>sorted(Comparator com)：Comparator排序器自定义排序</li></ul><p><strong>案例：将员工按工资由高到低（工资一样则按年龄由大到小）排序</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> personList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Sherry"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">"female"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">8900</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">,</span> <span class="token string">"Washington"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">,</span> <span class="token string">"Washington"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Lily"</span><span class="token punctuation">,</span> <span class="token number">8800</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Alisa"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token string">"female"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 按工资升序排序（自然排序）</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> newList <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 按工资倒序排序</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> newList2 <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 先按工资再按年龄升序排序</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> newList3 <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenComparing</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 先按工资再按年龄自定义排序（降序）</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> newList4 <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> p2<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> p2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> p1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> p2<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> p1<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"按工资升序排序："</span> <span class="token operator">+</span> newList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"按工资降序排序："</span> <span class="token operator">+</span> newList2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"先按工资再按年龄升序排序："</span> <span class="token operator">+</span> newList3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"先按工资再按年龄自定义降序排序："</span> <span class="token operator">+</span> newList4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><blockquote><p>按工资升序排序：[Lily, Tom, Sherry, Jack, Alisa]<br>按工资降序排序：[Sherry, Jack, Alisa, Tom, Lily]<br>先按工资再按年龄升序排序：[Lily, Tom, Sherry, Jack, Alisa]<br>先按工资再按年龄自定义降序排序：[Alisa, Jack, Sherry, Tom, Lily]</p></blockquote><h2 id="提取-组合"><a href="#提取-组合" class="headerlink" title="提取/组合"></a>提取/组合</h2><p>流也可以进行合并、去重、限制、跳过等操作。</p><p><img src="http://mkstatic.lianbian.net/20201109150012790.jpg" alt="distinct"></p><p><img src="http://mkstatic.lianbian.net/20201109150001270.jpg" alt="skip"></p><p><img src="http://mkstatic.lianbian.net/20201109145946301.jpg" alt="limit"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"f"</span><span class="token punctuation">,</span> <span class="token string">"g"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream1 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream2 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// concat:合并两个流 distinct：去重</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> newList <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>stream1<span class="token punctuation">,</span> stream2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// limit：限制从流中获得前n个数据</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> collect <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> x <span class="token operator">-></span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// skip：跳过前n个数据</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> collect2 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> x <span class="token operator">-></span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"流合并："</span> <span class="token operator">+</span> newList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"limit："</span> <span class="token operator">+</span> collect<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"skip："</span> <span class="token operator">+</span> collect2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><blockquote><p>流合并：[a, b, c, d, e, f, g]<br>limit：[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]<br>skip：[3, 5, 7, 9, 11]</p></blockquote><h1 id="总结图"><a href="#总结图" class="headerlink" title="总结图"></a>总结图</h1><p><img src="http://mkstatic.lianbian.net/image-20210728190332521.png" alt="zongjie"></p><p>作者：云深i不知处</p><p>出处：<a href="https://blog.csdn.net/mu_wind/article/details/109516995">https://blog.csdn.net/mu_wind/article/details/109516995</a></p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Optional最佳实战</title>
      <link href="/2021/07/24/%E5%90%8E%E7%AB%AF/java/%E5%9F%BA%E7%A1%80/Optional%E6%9C%80%E4%BD%B3%E5%AE%9E%E6%88%98/"/>
      <url>/2021/07/24/%E5%90%8E%E7%AB%AF/java/%E5%9F%BA%E7%A1%80/Optional%E6%9C%80%E4%BD%B3%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h1><p>Java 从 1.8 之后引入了 optional API，用以一定程度地避免 NPE（<em>NullPointerException</em>）。然而可能很多人对这个精心设计的 API 还没那么熟练，甚至会有一些滥用。下面会详细讨论，然后给出我所认为的最佳实践。</p><h2 id="来自作者的说明"><a href="#来自作者的说明" class="headerlink" title="来自作者的说明"></a>来自作者的说明</h2><p>首先我们来看一下<code>Optional</code>的作者 Brian Goetz 对这个 API 的说明：</p><blockquote><p>Our intention was to provide a limited mechanism for library method return types where there needed to be a clear way to represent “no result”, and using <code>null</code> for such was overwhelmingly likely to cause errors.</p></blockquote><p>大意为，为了避免<code>null</code>带来的错误，我们提供了一个可以<strong>明确</strong>表示空值的有限的机制。</p><h2 id="基础理解"><a href="#基础理解" class="headerlink" title="基础理解"></a>基础理解</h2><p>首先，<code>Optional</code>是一个容器，用于放置可能为空的值，它可以合理而优雅的处理<code>null</code>。众所周知，<code>null</code>在编程历史上极具话题性，号称是<em>计算机历史上最严重的错误</em>，感兴趣可以读一下这篇文章：**<a href="https://www.lucidchart.com/techblog/2015/08/31/the-worst-mistake-of-computer-science/">THE WORST MISTAKE OF COMPUTER SCIENCE</a>**，这里暂且不做过多讨论。在 Java 1.8 之前的版本，没有可以用于表示<code>null</code>官方 API，如果你足够的谨慎，你可能需要常常在代码中做如下的判断：</p><pre class="line-numbers language-none"><code class="language-none">if (null !&#x3D; user) &#123;    &#x2F;&#x2F;doing something&#125;if (StringUtil.isEmpty(string)) &#123;    &#x2F;&#x2F;doing something&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>复制代码</p><p>确实，返回值是<code>null</code>的情况太多了，一不小心，就会产生 NPE，接踵而来的就是应用运行终止，产品抱怨，用户投诉。</p><p>1.8 之后，jdk 新增了<code>Optional</code>来表示空结果。其实本质上什么也没变，只是增加了一个表达方式。<code>Optional</code>表示空的静态方法为<code>Optional.empty()</code>，跟<code>null</code>有什么本质区别吗？其实没有。翻看它的实现，<code>Optional</code>中的 value 就是<code>null</code>，只不过包了一层<code>Optional</code>，所以说它其实是个容器。用之后的代码可能长这样：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 1Optional&lt;User&gt; optionalUser &#x3D; RemoteService.getUser();if (!optionalUser.isPresent()) &#123;   &#x2F;&#x2F;doing something &#125;User user &#x3D; optionalUser.get();&#x2F;&#x2F; 2User user &#x3D; optionalUser.get().orElse(new User());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>复制代码</p><p>看起来，好像比之前好了一些，至少看起来没那么笨。但如果采用写法 1，好像更啰嗦了。</p><p>如果你对 kotlin 稍有了解，kotlin 的非空类型是他们大肆宣传的”卖点”之一，通过<code>var param!!</code>在使用它的地方做强制的空检查，否则无法通过编译，最大程度上减少了 NPE。其实在我看来，<code>Optional</code>的方式更加优雅和灵活。同时，<code>Optional</code>也可能会带来一些误解。</p><p>下面先说一些在我看来的不合适的使用：</p><h2 id="Bad-Practice"><a href="#Bad-Practice" class="headerlink" title="Bad Practice"></a>Bad Practice</h2><h4 id="1-直接使用-isPresent-进行-if-检查"><a href="#1-直接使用-isPresent-进行-if-检查" class="headerlink" title="1. 直接使用 isPresent()进行 if 检查"></a>1. 直接使用 isPresent()进行 if 检查</h4><p>这个直接参考上面的例子，用<code>if</code>判断和 1.8 之前的写法并没有什么区别，反而返回值包了一层<code>Optional</code>，增加了代码的复杂性，没有带来任何实质的收益。其实<code>isPresent()</code>一般用于流处理的结尾，用于判断是否符合条件。</p><pre class="line-numbers language-none"><code class="language-none">list.stream()    .filer(x -&gt; Objects.equals(x,param))    .findFirst()    .isPresent()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>复制代码</p><h4 id="2-在方法参数中使用-Optional"><a href="#2-在方法参数中使用-Optional" class="headerlink" title="2. 在方法参数中使用 Optional"></a>2. 在方法参数中使用 Optional</h4><p>我们用一个东西之前得想明白，这东西是为解决什么问题而诞生的。<code>Optional</code>直白一点说就是为了表达可空性，如果方法参数可以为空，为何不重载呢？包括使用构造函数也一样。重载的业务表达更加清晰直观。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;don&#39;t write method like thispublic void getUser(long uid,Optional&lt;Type&gt; userType);&#x2F;&#x2F;use Overloadpublic void getUser(long uid) &#123;    getUser(uid,null);&#125;public void getUser(long uid,UserType userType) &#123;    &#x2F;&#x2F;doing something&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>复制代码</p><h4 id="3-直接使用-Optional-get"><a href="#3-直接使用-Optional-get" class="headerlink" title="3. 直接使用 Optional.get"></a>3. 直接使用 Optional.get</h4><p><code>Optional</code>不会帮你做任何的空判断或者异常处理，如果直接在代码中使用<code>Optional.get()</code>和不做任何空判断一样，十分危险。这种可能会出现在那种所谓的着急上线，着急交付，对<code>Optional</code>也不是很熟悉，直接就用了。这里多说一句，可能有人会反问了：甲方/业务着急，需求又多，哪有时间给他去做优化啊？因为我在现实工作中遇到过，但这两者并不矛盾，因为代码行数上差别并不大，只要自己平时保持学习，都是信手拈来的东西。</p><h4 id="4-使用在-POJO-中"><a href="#4-使用在-POJO-中" class="headerlink" title="4. 使用在 POJO 中"></a>4. 使用在 POJO 中</h4><p>估计很少有人这么用：</p><pre class="line-numbers language-none"><code class="language-none">public class User &#123;    private int age;    private String name;    private Optional&lt;String&gt; address;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>复制代码</p><p>这样的写法将会给序列化带来麻烦，<code>Optional</code>本身并没有实现序列化，现有的 JSON 序列化框架也没有对此提供支持的。</p><h4 id="5-使用在注入的属性中"><a href="#5-使用在注入的属性中" class="headerlink" title="5. 使用在注入的属性中"></a>5. 使用在注入的属性中</h4><p>这种写法估计用的人会更少，但不排除有脑洞的。</p><pre class="line-numbers language-none"><code class="language-none">public class CommonService &#123;    private Optional&lt;UserService&gt; userService;        public User getUser(String name) &#123;        return userService.ifPresent(u -&gt; u.findByName(name));    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>复制代码</p><p>首先依赖注入大多在 spring 的框架之下，直接使用<code>@Autowired</code>很方便。但如果使用以上的写法，如果<code>userService</code> set 失败了，程序就应该终止并报异常，并不是无声无息，让其看起来什么问题都没有。</p><h2 id="Best-and-Pragmatic-Practice"><a href="#Best-and-Pragmatic-Practice" class="headerlink" title="Best and Pragmatic Practice"></a>Best and Pragmatic Practice</h2><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>在说最佳实践前，让我们来看一下<code>Optional</code>都提供了哪些常用 API。</p><h4 id="1-empty"><a href="#1-empty" class="headerlink" title="1. empty()"></a>1. <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html#empty--">empty</a>()</h4><p>返回一个<code>Optional</code>容器对象，而不是 null。<strong>建议常用⭐⭐⭐⭐</strong></p><h4 id="2-of-T-value"><a href="#2-of-T-value" class="headerlink" title="2. of(T value)"></a>2. <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html#of-T-">of</a>(T value)</h4><p>创建一个<code>Optional</code>对象，如果 value 是 null，则抛出 NPE。<strong>不建议用⭐⭐</strong></p><h4 id="3-ofNullable-T-value"><a href="#3-ofNullable-T-value" class="headerlink" title="3. ofNullable(T value)"></a>3. <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html#ofNullable-T-">ofNullable</a>(T value)</h4><p>同上，创建一个<code>Optional</code>对象，但 value 为空时返回<code>Optional.empty()</code>。<strong>推荐使用⭐⭐⭐⭐⭐</strong></p><h4 id="4-get"><a href="#4-get" class="headerlink" title="4. get()"></a>4. <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html#get--">get()</a></h4><p>返回<code>Optional</code>中包装的值，在判空之前，千万不要直接使用！<strong>尽量别用！⭐</strong></p><h4 id="5-orElse-T-other"><a href="#5-orElse-T-other" class="headerlink" title="5. orElse(T other)"></a>5. <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html#orElse-T-">orElse</a>(<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html">T</a> other)</h4><p>同样是返回<code>Optional</code>中包装的值，但不同的是当取不到值时，返回你指定的 default。<strong>看似很好，但不建议用⭐⭐</strong></p><h4 id="6-orElseGet-Supplier-lt-extends-T-gt-other"><a href="#6-orElseGet-Supplier-lt-extends-T-gt-other" class="headerlink" title="6. orElseGet(Supplier&lt;? extends T&gt; other)"></a>6. <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html#orElseGet-java.util.function.Supplier-">orElseGet</a>(<a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Supplier.html">Supplier</a>&lt;? extends <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html">T</a>&gt; other)</h4><p>同样是返回<code>Optional</code>中包装的值，取不到值时，返回你指定的 default。<strong>看似和 5 一样，但推荐使用⭐⭐⭐⭐⭐</strong></p><h4 id="7-orElseThrow-Supplier-lt-extends-X-gt-exceptionSupplier"><a href="#7-orElseThrow-Supplier-lt-extends-X-gt-exceptionSupplier" class="headerlink" title="7. orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier)"></a>7. <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html#orElseThrow-java.util.function.Supplier-">orElseThrow</a>(<a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Supplier.html">Supplier</a>&lt;? extends X&gt; exceptionSupplier)</h4><p>返回<code>Optional</code>中包装的值，取不到值时抛出指定的异常。<strong>阻塞性业务场景推荐使用⭐⭐⭐⭐</strong></p><h4 id="8-isPresent"><a href="#8-isPresent" class="headerlink" title="8. isPresent()"></a>8. <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html#isPresent--">isPresent</a>()</h4><p>判断<code>Optional</code>中是否有值，返回 boolean，某些情况下很有用，但尽量不要用在 if 判断体中。<strong>可以用⭐⭐⭐</strong></p><h4 id="9-ifPresent-Consumer-lt-super-T-gt-consumer"><a href="#9-ifPresent-Consumer-lt-super-T-gt-consumer" class="headerlink" title="9. ifPresent(Consumer&lt;? super T&gt; consumer)"></a>9. <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html#ifPresent-java.util.function.Consumer-">ifPresent</a>(<a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Consumer.html">Consumer</a>&lt;? super <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html">T</a>&gt; consumer)</h4><p>判断<code>Optional</code>中是否有值，有值则执行 consumer，否则什么都不干。<strong>日常情况下请使用这个⭐⭐⭐⭐</strong></p><h3 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h3><p>首先是一些基本原则：</p><ul><li>不要声明任何<code>Optional</code>实例属性</li><li>不要在任何 setter 或者构造方法中使用<code>Optional</code></li><li><code>Optional</code>属于返回类型，在业务返回值或者远程调用中使用</li></ul><h4 id="1-业务上需要空值时，不要直接返回-null，使用-Optional-empty"><a href="#1-业务上需要空值时，不要直接返回-null，使用-Optional-empty" class="headerlink" title="1. 业务上需要空值时，不要直接返回 null，使用**Optional.empty()**"></a>1. 业务上需要空值时，不要直接返回 null，使用<code>**Optional.empty()**</code></h4><pre class="line-numbers language-none"><code class="language-none">public Optional&lt;User&gt; getUser(String name) &#123;    if (StringUtil.isNotEmpty(name)) &#123;        return RemoteService.getUser(name);    &#125;     return Optional.empty();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>复制代码</p><h4 id="2-使用-orElseGet"><a href="#2-使用-orElseGet" class="headerlink" title="2. 使用 orElseGet()"></a>2. 使用 orElseGet()</h4><p>获取 value 有三种方式：<code>get()</code> <code>orElse()</code> <code>orElseGet()</code>。这里推荐在需要用到的地方只用 <code>orElseGet()</code>。</p><p>首先，<code>get()</code>不能直接使用，需要结合判空使用。这和<code>!=null</code>其实没多大区别，只是在表达和抽象上有所改善。</p><p>其次，为什么不推荐<code>orElse()</code>呢？因为<code>orElse()</code>无论如何都会执行括号中的内容， <code>orElseGet()</code>只在主体 value 是空时执行，下面看个例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"method called"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">String</span> name1 <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"String"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//output: method calledString name2 = Optional.of("String").orElseGet(() -> getName()); //output:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>复制代码</p><p>如果上面的例子<code>getName()</code>方法是一个远程调用，或者涉及大量的文件 IO，代价可想而知。</p><p>但 <code>orElse()</code>就一无是处吗？并不是。<code>orElseGet()</code>需要构建一个<code>Supplier</code>，如果只是简单的返回一个静态资源、字符串等等，直接返回<strong>静态</strong>资源即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> USER_STATUS <span class="token operator">=</span> <span class="token string">"UNKNOWN"</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">findUserStatus</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> status <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span> <span class="token comment">//     return status.orElse(USER_STATUS);&#125;</span><span class="token comment">//不要这么写public String findUserStatus(long id) &#123;    Optional&lt;String> status = ... ; //     return status.orElse("UNKNOWN");//这样每次都会新建一个String对象&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>复制代码</p><h4 id="3-使用-orElseThrow"><a href="#3-使用-orElseThrow" class="headerlink" title="3. 使用 orElseThrow()"></a>3. 使用 orElseThrow()</h4><p>这个针对阻塞性的业务场景比较合适，例如没有从上游获取到用户信息，下面的所有操作都无法进行，那此时就应该抛出异常。正常的写法是先判空，再手动 throw 异常，现在可以集成为一行：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">findUser</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> user <span class="token operator">=</span> remoteService<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token class-name">IllegalStateException</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>复制代码</p><h4 id="4-不为空则执行时，使用-ifPresent"><a href="#4-不为空则执行时，使用-ifPresent" class="headerlink" title="4. 不为空则执行时，使用 ifPresent()"></a>4. 不为空则执行时，使用 ifPresent()</h4><p>这点没有性能上的优势，但可以使代码更简洁：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//之前是这样的if (status.isPresent()) &#123;    System.out.println("Status: " + status.get());&#125;</span><span class="token comment">//现在status.ifPresent(System.out::println);</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>复制代码</p><h4 id="5-不要滥用"><a href="#5-不要滥用" class="headerlink" title="5. 不要滥用"></a>5. 不要滥用</h4><p>有些简单明了的方法，完全没必要增加<code>Optional</code>来增加复杂性。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">fetchStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> status <span class="token operator">=</span> <span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">"PENDING"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//判断一个简单的状态而已public String fetchStatus() &#123;    String status = ... ;    return status == null ? "PENDING" : status;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>复制代码</p><p>首先，null 可以作为集合的元素之一，它并不是非法的；其次，集合类型本身已经具备了完整的空表达，再去包装一层<code>Optional</code>也是徒增复杂，收益甚微。例如，map 已经有了<code>getOrDefault()</code>这样的类似<code>orElse()</code>的 API 了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>Optional</code>的出现使 Java 对 null 的表达能力更近了一步，好马配好鞍，合理使用可以避免大量的 NPE，节省大量的人力物力。以上内容也是本人查询了很多资料，边学边写的产出，如有错漏之处，还请不吝指教。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lambda表达式</title>
      <link href="/2021/07/08/%E5%90%8E%E7%AB%AF/java/%E5%9F%BA%E7%A1%80/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2021/07/08/%E5%90%8E%E7%AB%AF/java/%E5%9F%BA%E7%A1%80/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="文章概述"><a href="#文章概述" class="headerlink" title="文章概述"></a>文章概述</h1><p>这篇文章会循序渐进的讲解为什么我们需要lambda，包括两个方面：</p><ol><li>案例：从农场主苹果过滤案例循序渐进的引入概念；</li><li>lambda实战；</li></ol><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="农场主苹果过滤案例"><a href="#农场主苹果过滤案例" class="headerlink" title="农场主苹果过滤案例"></a>农场主苹果过滤案例</h2><p>Apple 实体类（包括颜色和重量两个属性）：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Apple</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token keyword">int</span> weight<span class="token punctuation">,</span> <span class="token class-name">String</span> color<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> color<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> weight<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>苹果列表集合</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> apples <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>  <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 定义：重量大于100克的绿色苹果</span>  <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 定义：重量大于110克的红色苹果</span>  <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">)</span> <span class="token comment">// 定义：重量大于111克的绿色苹果</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="需求1：筛选过滤出绿色的苹果"><a href="#需求1：筛选过滤出绿色的苹果" class="headerlink" title="需求1：筛选过滤出绿色的苹果"></a>需求1：筛选过滤出绿色的苹果</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 接口定义</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> <span class="token function">filterGreenApples</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> apples<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 代码实现</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> <span class="token function">filterGreenApples</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> apples<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> greenApples <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Apple</span> apple<span class="token operator">:</span>apples<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>apple<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      greenApples<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>apple<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> greenApples<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 打印测试</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> greenApples <span class="token operator">=</span> <span class="token function">filterGreenApples</span><span class="token punctuation">(</span>apples<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>greenApples<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="需求2：筛选过滤出红色的苹果"><a href="#需求2：筛选过滤出红色的苹果" class="headerlink" title="需求2：筛选过滤出红色的苹果"></a>需求2：筛选过滤出红色的苹果</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 接口定义</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> <span class="token function">filterRedApples</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> apples<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 方法实现</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> <span class="token function">filterRedApples</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> apples<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> redApples <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Apple</span> apple<span class="token operator">:</span>apples<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>apple<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      redApples<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>apple<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> redApples<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 打印测试</span>redApples <span class="token operator">=</span> <span class="token function">filterRedApples</span><span class="token punctuation">(</span>apples<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>redApples<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="需求3：筛选过滤出重量大于100克的苹果"><a href="#需求3：筛选过滤出重量大于100克的苹果" class="headerlink" title="需求3：筛选过滤出重量大于100克的苹果"></a>需求3：筛选过滤出重量大于100克的苹果</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 接口定义</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> <span class="token function">filterGt100Apples</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> apples<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 代码实现</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> <span class="token function">filterGt100Apples</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> apples<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> gt100Apples <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Apple</span> apple<span class="token operator">:</span>apples<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>apple<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      gt100Apples<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>apple<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> gt100Apples<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 打印测试</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> gt100Apples <span class="token operator">=</span> <span class="token function">filterGt100Apples</span><span class="token punctuation">(</span>apples<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gt100Apples<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="需求4：筛选过滤出绿色并且重量大于100克的苹果"><a href="#需求4：筛选过滤出绿色并且重量大于100克的苹果" class="headerlink" title="需求4：筛选过滤出绿色并且重量大于100克的苹果"></a>需求4：筛选过滤出绿色并且重量大于100克的苹果</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 接口定义</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> <span class="token function">filterGreenAndGt100Apples</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> apples<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 方法实现</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> <span class="token function">filterGreenAndGt100Apples</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> apples<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> greenAndGt100Apples <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Apple</span> apple<span class="token operator">:</span>apples<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>apple<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"green"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> apple<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      greenAndGt100Apples<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>apple<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> greenAndGt100Apples<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 打印测试</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> greenAndGt100Apples <span class="token operator">=</span> <span class="token function">filterGreenAndGt100Apples</span><span class="token punctuation">(</span>apples<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>greenAndGt100Apples<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>逻辑简单；</li><li>如果需求固定，这种实现方式未尝不可；</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>重复的代码多；</li><li>不方便维护与扩展；</li><li>从人的思维的角度，代码的阅读性不高；</li><li>… 自行补充</li></ol><h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><h4 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h4><p>“给予执行方法一本说明书，而不是具体的执行的一系列参数。”</p><p>改进的本质：让方法的参数具有行为能力。</p><h4 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 一、定义策略的抽象接口</span><span class="token comment">// 释义：你给我一个苹果（苹果实例），这个是否符合我的规定（判断函数），我来告诉你（返回值）。</span><span class="token keyword">interface</span> <span class="token class-name">ApplePredicate</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Apple</span> apple<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 二、定义具体的策略</span><span class="token comment">// 绿色苹果策略</span><span class="token keyword">class</span> greenApplePredicate <span class="token keyword">implements</span> <span class="token class-name">ApplePredicate</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Apple</span> apple<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> apple<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">150</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 红色苹果策略</span><span class="token keyword">class</span> redApplePredicate <span class="token keyword">implements</span> <span class="token class-name">ApplePredicate</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Apple</span> apple<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> apple<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">150</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 找出大于100克的苹果（省略）</span><span class="token comment">// 找出绿色的大于100克的苹果（省略）</span><span class="token comment">// 三、利用策略来过滤</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> <span class="token function">filterApples</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> inventory<span class="token punctuation">,</span> <span class="token class-name">ApplePredicate</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Apple</span> apple <span class="token operator">:</span> inventory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>apple<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>apple<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 打印测试</span><span class="token comment">// 通过策略的方式，筛选出绿色苹果</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> greenApples <span class="token operator">=</span> <span class="token function">filterApples</span><span class="token punctuation">(</span>apples<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token function">greenApplePredicate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>greenApples<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过策略的方式，筛选出红色苹果</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> redApples <span class="token operator">=</span> <span class="token function">filterApples</span><span class="token punctuation">(</span>apples<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token function">redApplePredicate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>redApples<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 一、定义策略的抽象接口</span><span class="token comment">// 释义：你给我一个苹果（苹果实例），这个是否符合我的规定（判断函数），我来告诉你（返回值）。</span><span class="token keyword">interface</span> <span class="token class-name">ApplePredicate</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Apple</span> apple<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ApplePredicate</span> applePredicate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApplePredicate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Apple</span> apple<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 执行具体的业务</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>applePredicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>apple<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 筛选绿色苹果</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> greenApples <span class="token operator">=</span> apples<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>apple <span class="token operator">-></span> apple<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 筛选出红色苹果</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> redApples <span class="token operator">=</span> apples<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>apple <span class="token operator">-></span> apple<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="讨论：各种方式实现的优缺点"><a href="#讨论：各种方式实现的优缺点" class="headerlink" title="讨论：各种方式实现的优缺点"></a>讨论：各种方式实现的优缺点</h3><ol><li>策略模式：方便扩展，灵活应对需求的变化；</li><li>结构清晰，思维语意化；</li><li>适应改变（自己就是方法的本体，不需要刻意的去封装单独的函数）；</li><li>lambda：更从人的思维点出发，看着代码基本能了解这个代码是实现什么目标；</li><li>lambda：节省内存空间（java7 和 java8 内存分配实战，内部类和lambda字节码更节省内存空间）；</li><li>… </li></ol><h1 id="lambda实战"><a href="#lambda实战" class="headerlink" title="lambda实战"></a>lambda实战</h1><h2 id="lambda的语法"><a href="#lambda的语法" class="headerlink" title="lambda的语法"></a>lambda的语法</h2><table><thead><tr><th>参数</th><th>符号</th><th>表达式</th></tr></thead><tbody><tr><td>parameter list</td><td>arrow</td><td>lambda body</td></tr><tr><td>(apple1, apple2)</td><td>-&gt;</td><td>apple1.getColor().compareTo(apple2.getColor());</td></tr></tbody></table><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><h3 id="什么是函数式接口"><a href="#什么是函数式接口" class="headerlink" title="什么是函数式接口"></a>什么是函数式接口</h3><ol><li>接口有且只有一个抽象方法；</li><li>允许定义静态的非抽象方法；</li><li>允许定义默认defalut非抽象方法；</li><li>允许定义java.lang.Object中的public方法；</li><li>@FunctionalInterface注解不是必须的；（在编译期间，会执行是否是函数式接口检查）</li></ol><h3 id="常见一些函数式接口"><a href="#常见一些函数式接口" class="headerlink" title="常见一些函数式接口"></a>常见一些函数式接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 判断，如上文的策略模式</span><span class="token class-name">Predicate</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 无返回值</span><span class="token class-name">Consumer</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输入、输出、返回值</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token class-name">R</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个对象</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内置的函数式接口"><a href="#内置的函数式接口" class="headerlink" title="内置的函数式接口"></a>内置的函数式接口</h2><h3 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> apples<span class="token punctuation">,</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> predicate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Apple</span> a<span class="token operator">:</span>apples<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>          result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// LongPredicate</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> <span class="token function">filterByWeight</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> apples<span class="token punctuation">,</span> <span class="token class-name">LongPredicate</span> predicate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Apple</span> a <span class="token operator">:</span> apples<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">filterByWeight</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> w <span class="token operator">-></span> w <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// BiPredicate 两个参数的输入</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> <span class="token function">filterByWeightandColor</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> apples<span class="token punctuation">,</span> <span class="token class-name">BiPredicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> predicate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Apple</span> a <span class="token operator">:</span> apples<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> <span class="token function">filterByWeightandColor</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> w<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"green"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> w<span class="token operator">></span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="consumer"><a href="#consumer" class="headerlink" title="consumer"></a>consumer</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Consumer</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> <span class="token function">simpleConsumer</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> apples<span class="token punctuation">,</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> consumer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Apple</span> a <span class="token operator">:</span> apples<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">simpleConsumer</span><span class="token punctuation">(</span>apples<span class="token punctuation">,</span> a <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">prinln</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// BiConsumer</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> <span class="token function">simpleBiConsumer</span><span class="token punctuation">(</span><span class="token class-name">String</span> c<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> apples<span class="token punctuation">,</span> <span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> consumer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Apple</span> a <span class="token operator">:</span> apples<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">simpleBiConsumer</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">,</span> apples<span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">prinln</span><span class="token punctuation">(</span>s <span class="token operator">+</span> a<span class="token punctuation">.</span><span class="token function">getC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="function"><a href="#function" class="headerlink" title="function"></a>function</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Function</span><span class="token class-name">Apple</span> <span class="token function">testFun</span><span class="token punctuation">(</span><span class="token class-name">Apple</span> apple<span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> fun<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> apple<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>apple<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">String</span> result3 <span class="token operator">=</span> <span class="token function">testFun</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token string">"yellow"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-></span> a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">prinln</span><span class="token punctuation">(</span>result3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// BiFunction</span><span class="token comment">// 自定义Function</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="supplier"><a href="#supplier" class="headerlink" title="supplier"></a>supplier</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Supplier</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span> <span class="token comment">// method inference</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="方法推导-Method-references"><a href="#方法推导-Method-references" class="headerlink" title="方法推导 Method references"></a>方法推导 Method references</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> consumer <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">useConsumer</span><span class="token punctuation">(</span>consumer<span class="token punctuation">,</span> <span class="token string">"Hello Alex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">useConsumer</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> consumer<span class="token punctuation">,</span> <span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>  consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 方法推导，更加简单的实现</span><span class="token function">useConsumer</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Hello Alex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">useConsumer</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">,</span> <span class="token string">"Hello Alex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 什么情况下可以进行方法推导</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Interger</span><span class="token punctuation">></span></span> f <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">parseInt</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> result <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> string <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Character</span><span class="token punctuation">></span></span> f3 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token operator">::</span><span class="token function">charAt</span><span class="token punctuation">;</span><span class="token class-name">Character</span> c2 <span class="token operator">=</span> f3<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《java实战》阅读计划</title>
      <link href="/2021/06/28/%E5%90%8E%E7%AB%AF/java/%E5%9F%BA%E7%A1%80/%E3%80%8Ajava%E5%AE%9E%E6%88%98%E3%80%8B%E9%98%85%E8%AF%BB%E8%AE%A1%E5%88%92/"/>
      <url>/2021/06/28/%E5%90%8E%E7%AB%AF/java/%E5%9F%BA%E7%A1%80/%E3%80%8Ajava%E5%AE%9E%E6%88%98%E3%80%8B%E9%98%85%E8%AF%BB%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ol><li>理解背后这样设计的原因</li><li>能够优雅的写出Java8的风格代码</li></ol><h1 id="阅读计划"><a href="#阅读计划" class="headerlink" title="阅读计划"></a>阅读计划</h1><ol><li>第一部分<ol><li>外部迭代、外部迭代</li><li>顺序处理、并行处理</li><li>行为参数化 值参数化、类、匿名类、lambda</li><li>Lambda表达式<ol><li>表达式风格、块风格</li><li>方法引用</li></ol></li></ol></li><li>第二部分<ol><li>集合和流</li><li>中间操作和终端操作</li><li>数值流</li><li>Math.sqrt</li><li>函数式编程 和 指令式编程</li><li>Collection/Coector/collect区别</li><li>reducing 工厂方法提供的更广义归约收集器的特殊情况</li><li>第六章（reset）</li><li>Java7 分支/合并的框架</li><li>parallel原理</li><li>选择适当的数据结构往往比并行化算法更重要</li><li>避免共享可变状态</li><li>Spliterator</li><li>分区 + 自定义收集器</li></ol></li><li>第三部分<ol><li>java8重构与设计模式</li><li>lambda 测试、调试</li></ol></li><li>第四部分<ol><li>Optional</li><li>time时间模块</li><li>默认方法</li></ol></li><li>第五部分（跳过）</li><li>第六部分<ol><li>函数式的思考</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通用学习方式</title>
      <link href="/2021/06/25/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/%E9%80%9A%E7%94%A8%E5%AD%A6%E4%B9%A0%E6%96%B9%E5%BC%8F/"/>
      <url>/2021/06/25/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/%E9%80%9A%E7%94%A8%E5%AD%A6%E4%B9%A0%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="通用学习方式"><a href="#通用学习方式" class="headerlink" title="通用学习方式"></a>通用学习方式</h2><ol><li>全局；</li><li>知识地图；</li><li>学习计划；</li><li>todolist；</li><li>1-2小时沉侵式学习；</li><li>预习，听课，动手，整理成博客，讲清楚；</li></ol><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li>知识，技术点只能是先储备，才能发现用途；</li><li>大龄程序员；<ol><li>能力的增长没有跟上技术的增长；</li></ol></li><li>非科班出生需要把大学课程学一遍吗；<ol><li>技术书单</li><li>计算机操作原理</li><li>经典书籍</li></ol></li><li>看技术书籍方式的速度<ol><li>技术书籍介于小说和工具书（字典）中间</li><li>和工作相关先抓</li><li>看书在于收获而不是速度</li></ol></li><li>康奈尔笔记法</li><li>英文原文（什么不行学什么）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程思想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>架构师之路（持续更新）</title>
      <link href="/2021/06/23/%E6%9E%B6%E6%9E%84/%E6%9E%B6%E6%9E%84%E5%B8%88%E4%B9%8B%E8%B7%AF%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
      <url>/2021/06/23/%E6%9E%B6%E6%9E%84/%E6%9E%B6%E6%9E%84%E5%B8%88%E4%B9%8B%E8%B7%AF%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="当前计划（2021-08-16）"><a href="#当前计划（2021-08-16）" class="headerlink" title="当前计划（2021-08-16）"></a>当前计划（2021-08-16）</h1><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><h2 id="p9课程"><a href="#p9课程" class="headerlink" title="p9课程"></a>p9课程</h2><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><ol><li>《Spring5框架最新教程》尚硅谷视频</li><li>《雷丰阳2021版SpringBoot2零基础入门springboot全套完整版》B站视频</li></ol><h2 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h2><ol><li>Java并发编程</li></ol><h2 id="多线程编程"><a href="#多线程编程" class="headerlink" title="多线程编程"></a>多线程编程</h2><ol><li>资料待找</li></ol><h2 id="jvm"><a href="#jvm" class="headerlink" title="jvm"></a>jvm</h2><ol><li>《宋红康详解java虚拟机》B站视频</li><li>《深入理解Java虚拟机》书籍</li><li>《深入理解Java虚拟机》专栏</li></ol><h2 id="巩固"><a href="#巩固" class="headerlink" title="巩固"></a>巩固</h2><ol start="3"><li>java进阶训练营</li><li>p7训练营</li></ol><h1 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h1><ol><li>数据结构与算法<ol><li>《算法4》</li><li>《数据结构与算法之美》极客时间专栏</li><li>《数据结构与算法之美》书籍</li><li>B站视频</li><li>剑指offer里边的各种练习题巩固</li></ol></li><li>操作系统</li><li>网络协议</li><li>书单（黑皮书）<ol><li>计算机组成与设计</li><li>编译原理</li><li>Linux内核设计与实现</li><li>现代操作系统</li><li>计算机网络：自顶向下方法</li><li>算法导论</li><li>深入理解计算机系统</li></ol></li></ol><h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><ol><li>nacos</li><li>netty</li><li>…</li></ol><h1 id="架构理论与实战"><a href="#架构理论与实战" class="headerlink" title="架构理论与实战"></a>架构理论与实战</h1><ol><li>分布式数据库</li></ol>]]></content>
      
      
      <categories>
          
          <category> 职业发展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机栈</title>
      <link href="/2021/06/17/%E5%90%8E%E7%AB%AF/java/jvm/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/"/>
      <url>/2021/06/17/%E5%90%8E%E7%AB%AF/java/jvm/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h2 id="虚拟机栈概述"><a href="#虚拟机栈概述" class="headerlink" title="虚拟机栈概述"></a>虚拟机栈概述</h2><p>由于跨平台性的设计，Java的指令都是根据栈来设计的，不同平台CPU架构会不同，所以不能设计为基于寄存器的。<strong>优点是跨平台，指令集小，编译器容易实现，缺点是性能下降，实现同样的功能需要更多的指令。</strong></p><h3 id="内存中的栈和堆"><a href="#内存中的栈和堆" class="headerlink" title="内存中的栈和堆"></a>内存中的栈和堆</h3><p>栈是运行时的单位，而堆事存储的单位。</p><p>即：栈解决程序的运行问题，即程序如何执行，或者说如何处理数据；堆解决的事数据存储的问题呢，即数据怎么放、放在哪儿。</p><h3 id="虚拟机栈基本内容"><a href="#虚拟机栈基本内容" class="headerlink" title="虚拟机栈基本内容"></a>虚拟机栈基本内容</h3><h4 id="Java虚拟机栈是什么？"><a href="#Java虚拟机栈是什么？" class="headerlink" title="Java虚拟机栈是什么？"></a>Java虚拟机栈是什么？</h4><ol><li><p>Java虚拟机栈（Java Virtual Machine Stack），早期也叫做Java栈。每个线程在创建时都会创建一个虚拟机栈，其内部保存一个个的栈帧（Stack Frame），对应着一次次的Java方法调用；</p></li><li><p>是线程私有的；</p></li></ol><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>生命周期和线程一致</p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>主管Java程序的运行，它保存方法的局部变量（8种基本数据类型、对象的引用地址）、部分结果，并参与方法的调用和返回。</p><ol><li>局部变量 vs 成员变量（或属性）</li><li>基本数据变量 vs 引用类型变量（类、数组、接口）</li></ol><h3 id="栈不存在垃圾回收问题"><a href="#栈不存在垃圾回收问题" class="headerlink" title="栈不存在垃圾回收问题"></a>栈不存在垃圾回收问题</h3><h4 id="栈的特点（优点）"><a href="#栈的特点（优点）" class="headerlink" title="栈的特点（优点）"></a>栈的特点（优点）</h4><ol><li>栈是一种快速有效的分配存储方式，访问速度仅次于程序计数器</li><li>JVM直接对Java栈的操作只有两个：<ol><li>每个方法执行，伴随着进栈（入栈、压栈）</li><li>执行结束后的出栈工作</li></ol></li><li>对于栈来说，不存在垃圾回收问题</li></ol><h3 id="面试题："><a href="#面试题：" class="headerlink" title="面试题："></a>面试题：</h3><h4 id="栈中可能出现的异常"><a href="#栈中可能出现的异常" class="headerlink" title="栈中可能出现的异常"></a>栈中可能出现的异常</h4><p>Java虚拟机规范允许<strong>Java栈的大小是动态的或者是固定不变的。</strong></p><ol><li>如果采用固定大小的Java虚拟机栈，那每一个线程的Java虚拟机栈容量可以在线程创建的时候独立选定。如果线程请求分配的栈容量超过Java虚拟机栈允许的最大容量，Java虚拟机将会抛出一个<strong>StackOverflowError</strong>异常；</li><li>如果Java虚拟机栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的虚拟机栈，那Java虚拟机将会抛出一个<strong>OutOfMemoryError</strong>异常；</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** Exception in thread "main" java.lang.StackOverflowError* @param args*/</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="参数-Xss-线程的最大栈空间"><a href="#参数-Xss-线程的最大栈空间" class="headerlink" title="参数 -Xss 线程的最大栈空间"></a>参数 -Xss 线程的最大栈空间</h4><p>设置栈内存大小，我们可以使用参数-Xss选项来设置线程的最大栈空间，栈的大小直接决定了函数调用的最大可达深度。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">recursion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token function">recursion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token function">recursion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"deep of calling = "</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="栈的存储单位"><a href="#栈的存储单位" class="headerlink" title="栈的存储单位"></a>栈的存储单位</h2><h3 id="栈帧-Stack-Frame"><a href="#栈帧-Stack-Frame" class="headerlink" title="栈帧 Stack Frame"></a>栈帧 Stack Frame</h3><h4 id="栈帧存储什么？"><a href="#栈帧存储什么？" class="headerlink" title="栈帧存储什么？"></a>栈帧存储什么？</h4><ol><li>每个线程都有自己的栈，栈中的数据都是以栈帧（Stack Frame）的格式存在的；</li><li>在这个线程上正在执行的每个方法都各自对应一个栈帧（Stack Frame）</li><li>栈帧时一个内存区块，是一个数据集，维系着方法执行过程中的各种数据信息；</li></ol><h4 id="栈运行原理"><a href="#栈运行原理" class="headerlink" title="栈运行原理"></a>栈运行原理</h4><ol><li>JVM直接对Java栈的操作只有两个，就是对栈帧的压栈和出栈，遵循“先进后出”/“后进先出”原则；</li><li>在一条活动的线程中，一个时间点上，只会有一个活动的栈帧。即只有当前正在执行的方法的栈帧（栈顶栈帧）是有效的，这个栈帧被称为当前栈帧（Current Frame），与当前栈帧相对应的方法就是当前方法（CurrEnt Method），定义这个方法的类就是当前类（Current Class）；</li><li>执行引擎运行的所有字节码指令只针对当前栈帧进行操作；</li><li>如果在该方法中调用了其他方法，对应的新的栈帧会被创建出来，放在栈的顶端，成为新的当前栈帧（Current Frame）；</li></ol><p><img src="http://mkstatic.lianbian.net/%E7%AC%AC05%E7%AB%A0_%E6%96%B9%E6%B3%95%E4%B8%8E%E6%A0%88%E6%A1%A2.jpg" alt="第05章_方法与栈桢"></p><ol start="5"><li>不同线程中所包含的栈帧是不允许存在相互引用的，即不可能在一个栈帧之中引用另外一个线程的栈帧；</li><li>如果当前方法调用了其他方法，在方法返回之际，当前栈帧会传回此方法的执行结果给前一个栈帧，接着，虚拟机会丢弃当前栈帧，使得前一个栈帧重新成为当前栈帧；</li><li>Java方法有两种返回函数的方式<ol><li>一种是正常的函数返回，使用return指令；</li><li>另外一种是抛出异常，不管使用哪种方式，都会导致栈帧被弹出；</li></ol></li></ol><h4 id="栈帧的内部结构"><a href="#栈帧的内部结构" class="headerlink" title="栈帧的内部结构"></a>栈帧的内部结构</h4><ol><li>局部变量表（Local Variables）</li><li>操作数栈（Operand Stack）（或表达式栈）</li><li>动态链接（Dynamic Linking）（或指向运行时常量池的方法引用）</li><li>方法返回地址（Return Address）（或方法正常退出或者异常退出的定义）</li><li>一些附加信息</li></ol><p><img src="http://mkstatic.lianbian.net/%E7%AC%AC05%E7%AB%A0_%E6%A0%88%E6%A1%A2%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84.jpg" alt="第05章_栈桢内部结构"></p><p><img src="http://mkstatic.lianbian.net/image-20210320155148269.png" alt="image-20210320155148269"></p><h2 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>局部变量表也被称之为局部变量数组或者本地变量表；</li><li>定义为一个数字数组，主要用于存储方法参数和定义在方法体内的局部变量，这些数据类型包括各类基本数据类型、对象引用（reference），以及returnAddress类型；</li><li>由于局部变量表是建立在线程的栈上，是线程的私有数据，因此不存在数据安全问题；</li><li>局部变量表所需的容量大小是在编译期确定下来的，并保存在方法的Code属性的maximum local variables数据项中。在方法运行期间是不会改变局部变量表的大小的；</li><li>方法嵌套调用的次数由栈大小决定。一般来说，栈越大，方法嵌套调用次数越多。对一个函数而言，它的参数和局部变量越多，使得局部变量表膨胀，它的栈帧就越大，以满足方法调用所需传递的信息增大的需求。进而函数调用就会占用更多的栈空间，导致其嵌套调用次数就会越少；</li><li>局部变量表中的变量只在当前方法调用中有效。在方法执行时，虚拟机通过使用局部变量表完成参数值到参数变量列表的传递过程。当方法调用结束后，随着方法栈帧的销毁，局部变量表也会随之销毁；</li></ol><h3 id="变量槽-Slot"><a href="#变量槽-Slot" class="headerlink" title="变量槽 Slot"></a>变量槽 Slot</h3><h3 id="关于slot的理解"><a href="#关于slot的理解" class="headerlink" title="关于slot的理解"></a>关于slot的理解</h3><ol><li><p>参数值的存放总是在局部变量表数组的index0开始，到数组长度-1的索引结束；</p></li><li><p>局部变量表，最基本的存储单元是slot（变量槽）；</p></li><li><p>局部变量表中存放编译期可知的各种基本数据类型（8种），对象引用类型（reference），returnAddress类型；</p></li><li><p>在局部变量表里，32位以内的类型只占用一个solt（包括returnAddress类型），64位的类型（long和double）占用两个solt;</p><ol><li>byte short char 在存储前被转换为int，boolean 也被转换为int, 0 表示false, 非0 表示true;</li><li>long和double则占据两个slot;</li></ol></li><li><p>JVM会为局部变量表中的每一个slot都分配一个访问索引，通过这个索引即可成功访问到局部变量表中指定的局部变量值；</p></li><li><p>当一个实例方法调用的时候，它的方法参数和方法体内部定义的局部变量将会按照顺序被复制到局部变量表中的每一个slot上；</p></li><li><p>如果需要访问局部变量表中的一个64bit的局部变量值时，只需要使用前一个索引即可。（比如：访问long或double类型变量）；</p></li><li><p>如果当前帧是由构造方法或者实例方法创建的，那么该对象引用this将会存放在index为0的solt处，其余的参数按照参数顺序继续排列；</p><p><img src="http://mkstatic.lianbian.net/image-20210320161827782-20210320162404430.png" alt="image-20210320161827782"></p></li></ol><h3 id="Slot的重复利用"><a href="#Slot的重复利用" class="headerlink" title="Slot的重复利用"></a>Slot的重复利用</h3><p>栈帧中的局部变量表中的槽位是可以重用的，如果一个局部变量过了其作用域，那么在其作用域之后申明的新的局部变量就很有可能会复用过期局部变量的槽位，从而达到节省资源的目的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">localVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 此时的b就会复用a的槽位</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="局部变量必须先赋值后使用的原因"><a href="#局部变量必须先赋值后使用的原因" class="headerlink" title="局部变量必须先赋值后使用的原因"></a>局部变量必须先赋值后使用的原因</h3><h4 id="举例：静态变量与局部变量的对比"><a href="#举例：静态变量与局部变量的对比" class="headerlink" title="举例：静态变量与局部变量的对比"></a>举例：静态变量与局部变量的对比</h4><ol><li>参数表分配完毕之后，再根据方法体内定义的变量的顺序和作用域分配；</li><li>我们知道类变量表有两次初始化的机会，第一次是在“准备阶段”，执行系统初始化，对象变量设置零值，另外一次则是“初始化”阶段，赋予程序员在代码中定义的初始值；</li><li>和类变量初始化不同的是，局部变量表不存在系统初始化的过程，这意味着一旦定义了局部变量则必须人为的初始化，否则无法使用；</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token comment">// 这样的代码是错误的，没有赋值不能够使用</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>补充说明：</p><ol><li>在栈帧中，与性能调用关系最为密切的部分就是前面提到的局部变量表，在方法执行时，虚拟机使用局部变量表完成方法的传递；</li><li><strong>局部变量表中的变量也是重要的垃圾回收根节点，只有被局部变量表中直接或间接引用的对象都不会被回收</strong>；</li></ol><h2 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ol><li><p>每一个独立的栈帧中除了包含局部变量表以外，还包含一个后进先出的操作数栈，也可以称之为表达式栈；</p></li><li><p>操作数栈，在方法执行的过程中，根据字符码指令，往栈中写入数据或提取数据，即入栈/出栈；</p><ol><li>某些字节码指令将值压入操作数栈，其余的字节码指令将操作数取出栈，使用它们后再把结果压入栈；</li><li>比如：执行复制、交换、求和等操作；</li></ol><p><img src="http://mkstatic.lianbian.net/image-20210320164200568.png" alt="image-20210320164200568"></p></li><li><p>代码举例</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAddOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">byte</span> i <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://mkstatic.lianbian.net/image-20210320164656978.png" alt="image-20210320164656978"></p><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><ol><li>操作数栈，主要用于保存计算过程中的中间结果，同时作为计算过程中变量临时的存储空间；</li><li>操作数栈就是JVM执行引擎的一个工作区，当一个方法刚开始执行的时候，一个新的栈帧也会随之被创建出来，这个方法的操作数栈是空的；</li><li>每个操作数栈都会拥有一个明确的栈深度用于存储数值，其所需的最大深度在编译器就定义好了，保存在方法的Code属性中，为max_stack的值；</li><li>栈中任何一个元素都是可以任意的Java数据类型<ol><li>32bit的类型占用一个栈单位深度；</li><li>64bit的类型占用两个栈单位深度；</li></ol></li><li>操作数栈并非采用访问索引的方式来进行数据访问的，而是只能通过标准的入栈和出栈操作来完成一次数据访问；</li><li>如果被调用的方法带有返回值的话，其返回值将会被压入当前栈的操作数栈中，并更新PC寄存器中下一条需要执行的字节码指令；</li><li>操作数栈中元素的数据类型必须与字节码指令的序列严重匹配，这由编译器在编译器期间进行验证，同时在类加载过程中的类检验阶段的数据流分析阶段要再次验证；</li><li>另外，我们说的Java虚拟机的解释引擎是基于栈的执行引擎，其中的栈指的就是操作数栈；</li></ol><h2 id="代码追踪"><a href="#代码追踪" class="headerlink" title="代码追踪"></a>代码追踪</h2><p>无</p><h3 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h3><ol><li>常见的 i++ 和 ++i 的区别</li></ol><h2 id="栈顶缓存技术"><a href="#栈顶缓存技术" class="headerlink" title="栈顶缓存技术"></a>栈顶缓存技术</h2><p>前面提过，基于栈式架构的虚拟机使用的零地址指令更加紧凑，但完成一项操作的时候必然需要使用更多的入栈和出栈指令，这同时也就意味着将需要更多的指令分派次数和内存读/写次数；</p><p>由于操作数是存储在内存中的，因此频繁的执行内存读/写操作必然会影响执行速度，为了解决这个问题，HotSpot JVM的设计者们提出了栈顶缓存技术（ToS，Top-of-Stack Cashing），<strong>将栈顶元素全部缓存在物理CPU的寄存器中，以此降低对内存的读写次数，提升执行引擎的执行效率。</strong></p><h2 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><ol><li>每一个栈帧内部都包含一个指向运行时常量池中该栈帧所属方法的引用。包含这个引用的目的就是为了支持当前方法的代码能够实现动态链接。比如：invokedynamic指令；</li><li>在Java源文件被编译到字节码文件中时，所有的变量和方法引用都作为符号引用保存在class文件的常量池里。比如：描述一个方法调用了另外其他方法时，就是通过常量池中指向方法的符号引用来表示的，那么<strong>动态链接的作用就是为了将这些符号引用转换为调用方法的直接引用</strong>；</li></ol><p>帧数据区 = 动态链接 + 方法返回地址 + 一些附加信息</p><p> <img src="http://mkstatic.lianbian.net/%E7%AC%AC09%E7%AB%A0_%E6%96%B9%E6%B3%95%E5%8C%BA%E4%B8%8E%E6%A0%88%E7%9A%84%E5%85%B3%E8%81%94%E7%BB%93%E6%9E%84.jpg" alt="第09章_方法区与栈的关联结构"></p><h3 id="为什么需要常量池呢？"><a href="#为什么需要常量池呢？" class="headerlink" title="为什么需要常量池呢？"></a>为什么需要常量池呢？</h3><ol><li>常量池的作用，就是为了提供一些符号和常量，便于指令的识别；</li><li>因为重复的操作太多，节约文件大小；</li><li>共享与复用；</li></ol><h2 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h2><h3 id="静态链接与动态链接"><a href="#静态链接与动态链接" class="headerlink" title="静态链接与动态链接"></a>静态链接与动态链接</h3><p>在JVM中，将符号引用转换为调用方法的直接引用与方法的绑定机制相关；</p><ol><li>静态链接<ol><li>当一个字节码文件被装载进JVM内部时，如果被调用的目标方法在编译期可知，且运行期保持不变时，这种情况下将调用方法的符号引用转换为直接引用的过程称之为静态链接；</li></ol></li><li>动态链接<ol><li>如果被调用的方法在编译期无法被确定下来，也就是说，只能够在程序运行期将调用方法的符号引用转换为直接引用，由于这种引用转换过程具备动态性，因此也被称之为动态链接；</li></ol></li></ol><h3 id="早期绑定与晚期绑定"><a href="#早期绑定与晚期绑定" class="headerlink" title="早期绑定与晚期绑定"></a>早期绑定与晚期绑定</h3><p>对应的方法的绑定机制为：早期绑定（Early binding）和晚期绑定（Late Binding）。绑定是一个字段、方法或者类在符号引用被替换为直接引用的过程，这仅仅发生一次；</p><ol><li>早期绑定<ol><li>早期绑定就是指被调用的目标方法如果在编译期可知，且运行期保持不变时，即可将这个方法与所属的类型进行绑定，这样一来，由于明确了呗调用的目标方法究竟是哪一个，因此也就可以使用静态链接的方式将符号引用转换为直接引用；</li></ol></li><li>晚期绑定<ol><li>如果被调用的方法在编译期无法被确定下来，只能够在程序运行期根据实际的类型绑定相关的方法，这种绑定方式也就被称之为晚期绑定。</li></ol></li></ol><p>随着高级语言的横空出世，类似于Java一样的基于面向对象的编程语言如今越来越多，尽管这类编程语言在语法风格上存在一定的差别，但是它们彼此之间始终保持着一个共性，那就是都支持封装、继承、多态等面向对象特性，既然这一类编程语言具备多态的特性，那么自然也就具备早期绑定和晚期绑定两种绑定方式。</p><p>Java中任何一个普通的方法其实都具备虚函数的特征，如果在Java程序中不希望某个方法拥有虚函数的特征时，则可以使用关键字final来标记这个方法（不允许重写）。</p><h3 id="虚方法与非虚方法"><a href="#虚方法与非虚方法" class="headerlink" title="虚方法与非虚方法"></a>虚方法与非虚方法</h3><ol><li>非虚方法<strong>（子类不能重写）</strong><ol><li>如果方法在编译期就确定了具体的调用版本，这个版本在运行时是不可变的。这样的方法成为<strong>非虚方法</strong>；</li><li>静态方法、私有方法、final方法、实例构造器、父类方法都是非虚方法；</li></ol></li><li>其他方法成为虚方法</li><li>子类对象的多态性使用前提：<ol><li>类的继承关系</li><li>方法的重写 </li></ol></li></ol><p>虚拟机中提供了以下几条方法调用指令：</p><ol><li>普通调用指令<ol><li>invokestatic：调用静态方法，解析阶段确定唯一方法版本</li><li>invokespecial：调用&lt;init&gt;方法、私有及父类方法，解析阶段确定唯一方法版本</li><li>invokevirtual：调用所有虚方法</li><li>invokeinterface：调用接口方法</li></ol></li><li>动态调用指令<ol><li>invokedynamic：动态解析出需要调用的方法，然后执行</li></ol></li></ol><p>前四条指令固化在虚拟机内部，方法的调用执行不可人为干预，而invokedynamic指令则支持由用户确定方法版本。其中invokestatic指令和invokespecial指令调用的方法成为非虚方法，其余的（final修饰的除外）称为虚方法。</p><h3 id="关于invokedynamic指令"><a href="#关于invokedynamic指令" class="headerlink" title="关于invokedynamic指令"></a>关于invokedynamic指令</h3><ol><li>JVM字节码指令集一直比较稳定，一直到Java7中才增加了一个invokedynamic指令，这是Java为了实现「动态类型语言」支持而做的一种改进；</li><li>但是在Java7中并没有剔除直接生成invikedynamic指令的方法，需要借助ASM这种底层字节码工具来产生invokedynamic指令。直到Java8的Lambda表达式的出现，invokedynamic指令的生成，在Java中才有了直接的生成方式；</li><li>Java7中增加的动态语言类型支持的本质就是对Java虚拟机规范的修改，而不是对Java语言规则的修改，这一块相对来讲比较复杂，增加了虚拟机中的方法调用，最直接的受益者就是运行在Java平台的动态语言编译器。</li></ol><h4 id="动态语言类型和静态语言类型"><a href="#动态语言类型和静态语言类型" class="headerlink" title="动态语言类型和静态语言类型"></a>动态语言类型和静态语言类型</h4><p>动态类型语言和静态类型语言两者的区别就在于对类型的检查是在编译期还是在运行期，满足前者就是静态类语言，反之时动态类型语言。</p><p>说的再直白一点就是，静态类型语言是判断变量自身的类型信息；动态类型语言是判断变量值的类型信息，变量没有类型信息，变量值才有类型信息，这是动态语言的一个重要特征。</p><h3 id="方法重写的本质"><a href="#方法重写的本质" class="headerlink" title="方法重写的本质"></a>方法重写的本质</h3><ol><li>找到操作数栈顶的第一个元素所执行的对象的实际类型，记作 C；</li><li>如果在类型C中找到与常量中的描述相符合简单名称都相符的方法，则进行访问权限校验，如果通过则返回这个方法的直接引用，查找过程结束；如果不通过，则返回java.lang.IllegalAccessError异常；</li><li>否则，按照继承关系从下往上依次对C的各个父类进行第2步的搜索和验证过程；</li><li>如果始终没有找到合适的方法，则抛出java.lang.AbstractMethodError异常；</li></ol><h3 id="虚方法表（待补充）"><a href="#虚方法表（待补充）" class="headerlink" title="虚方法表（待补充）"></a>虚方法表（待补充）</h3><ol><li>在面向对象的编程中，会很频繁的使用动态分派，如果每次动态分派的过程中都要重新在类型的方法无数据中搜索合适的目标的话就可能影响到执行效率。因此，为了提高性能，JVM采用在类的方法区建立一个虚方法表（virtual method table）(非虚方法不会出现在表中)来实现。使用索引表来代替查找；</li><li><strong>每个类中都有一个虚方法表</strong>，表中存放着各个方法的实际入口；</li><li>那么虚方法表什么时候被创建？<ol><li>虚方法表会在类加载的链接阶段被创建并开始初始化，类的变量初始化准备完成之后，JVM会把该类的方法表也初始化完毕。</li></ol></li></ol><p><img src="http://mkstatic.lianbian.net/image-20210321004008844.png" alt="image-20210321004008844"></p><h2 id="方法返回地址"><a href="#方法返回地址" class="headerlink" title="方法返回地址"></a>方法返回地址</h2><ol><li>存放调用该方法的pc寄存器的值；</li><li>一个方法的结束，有两种方式：<ol><li>正常的执行完成；</li><li>出现未处理异常，非正常退出；</li></ol></li><li>无论通过哪种方式退出，在方法退出后都返回到该方法被调用的位置。方法正常退出时，调用者的pc计数器的值作为返回地址，即调用该方法的指令的下一条指令的地址。而通过异常退出的，返回地址是要通过异常表来确定，栈帧中一般不会保存这部分信息。</li></ol><h3 id="正常返回地址"><a href="#正常返回地址" class="headerlink" title="正常返回地址"></a>正常返回地址</h3><p>当一个方法开始执行后，只有两种方式可以退出这个方法；</p><ol><li>执行引擎遇到任意一个方法返回的字节码指令（return），会有返回值传递给上层的方法调用者，简称<strong>正常完成出口</strong><ol><li>一个方法在正常调用完成之后究竟需要使用哪一个返回指令还需要根据方法返回值的实际数据类型而定；</li><li>在字节码指令中，返回指令包括ireturn（当返回值是boolean、byte、char、short、int类型时使用）、lreturn、freturn、dreturn以及areturn，另外还有一个return指令供声明为void的方法、实例化方法、类和接口的初始化方法使用；</li></ol></li></ol><h3 id="异常返回地址"><a href="#异常返回地址" class="headerlink" title="异常返回地址"></a>异常返回地址</h3><p>在方法执行的过程中遇到了异常，并且这个异常没有在方法内部进行处理，也就是只在<strong>本方法的异常表</strong>中没有搜索到匹配的异常处理器，就会导致方法退出，简称<strong>异常完成出口</strong>；</p><p>方法执行的过程中抛出异常时的异常处理，存储在一个异常处理表，方便在发生异常的时候找到处理异常的代码。</p><h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><p>本质上，方法的退出就是当前栈帧出栈的过程，此时，需要恢复上层的方法的局部变量表、操作数栈、将返回值压入调用者栈帧的操作数栈、设置PC寄存器等，让调用者方法继续执行下去；</p><p>正常完成出口和异常完成出口的区别在于：<strong>通过异常完成出口退出的不会给他的上层调用者产生任何返回值。</strong></p><h2 id="栈的相关面试题"><a href="#栈的相关面试题" class="headerlink" title="栈的相关面试题"></a>栈的相关面试题</h2><h3 id="举例栈溢出的情况"><a href="#举例栈溢出的情况" class="headerlink" title="举例栈溢出的情况"></a>举例栈溢出的情况</h3><p>StackOverflowError</p><ol><li>通过 -Xss设置栈的大小</li><li>可以自动扩容，空间不足，出现OOM</li></ol><h3 id="调整栈大小，就能保证不出现溢出吗？"><a href="#调整栈大小，就能保证不出现溢出吗？" class="headerlink" title="调整栈大小，就能保证不出现溢出吗？"></a>调整栈大小，就能保证不出现溢出吗？</h3><p>不能，无限递归溢出。能让StackOverflowError出现得晚一些</p><h3 id="分配的栈内存越大越好吗？"><a href="#分配的栈内存越大越好吗？" class="headerlink" title="分配的栈内存越大越好吗？"></a>分配的栈内存越大越好吗？</h3><p>不是的，因为会抢占其他分配资源，线程数会变少</p><h3 id="垃圾回收是否涉及到虚拟机栈？"><a href="#垃圾回收是否涉及到虚拟机栈？" class="headerlink" title="垃圾回收是否涉及到虚拟机栈？"></a>垃圾回收是否涉及到虚拟机栈？</h3><p>不涉及。只有进栈/出栈</p><h3 id="方法中定义的局部变量是否线程安全？"><a href="#方法中定义的局部变量是否线程安全？" class="headerlink" title="方法中定义的局部变量是否线程安全？"></a>方法中定义的局部变量是否线程安全？</h3><p>具体问题，具体分析。</p><p>是否牵扯到公用资源。</p><p>内部声明，内部消亡，则安全；</p><p>逃逸分析</p><p>不返回出去，不传递进来。</p>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>当谈论面向对象的时候，我们到底在谈论什么</title>
      <link href="/2021/06/10/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/%E5%BD%93%E8%B0%88%E8%AE%BA%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E6%88%91%E4%BB%AC%E5%88%B0%E5%BA%95%E5%9C%A8%E8%B0%88%E8%AE%BA%E4%BB%80%E4%B9%88/"/>
      <url>/2021/06/10/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/%E5%BD%93%E8%B0%88%E8%AE%BA%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E6%88%91%E4%BB%AC%E5%88%B0%E5%BA%95%E5%9C%A8%E8%B0%88%E8%AE%BA%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<h2 id="英文翻译"><a href="#英文翻译" class="headerlink" title="英文翻译"></a>英文翻译</h2><p>OOP Object Oriented Programming</p><p>OOPL</p><p>OOA Object Oriented Analysis</p><p>OOD Object Oriented Design</p><p>UML Unified Model Language</p><h2 id="什么语言才算是面向对象编程语言呢？"><a href="#什么语言才算是面向对象编程语言呢？" class="headerlink" title="什么语言才算是面向对象编程语言呢？"></a>什么语言才算是面向对象编程语言呢？</h2><ol><li> 面向对象编程是一种编程范式或编程风格。它以类或对象作为组织代码的基本单元，并将封装、抽象、继承、多态四个特性，作为代码设计和实现的基石。</li><li>面向对象编程语言是支持类或对象的语法机制，并有现成的语法机制，能方便地实现面向对象四大特性的编程语言。</li></ol><h2 id="封装、抽象、继承、多态分别可以解决哪些编程问题？"><a href="#封装、抽象、继承、多态分别可以解决哪些编程问题？" class="headerlink" title="封装、抽象、继承、多态分别可以解决哪些编程问题？"></a>封装、抽象、继承、多态分别可以解决哪些编程问题？</h2><ol><li>封装的意义是什么，它解决什么编程问题？<ol><li>对属性作出修改的限制；</li><li>类仅仅通过有限的方法暴露必要的操作，也能提高易用性。如果我们把类属性都暴露给调用者，调用者要正确操作这些 属性，就势必要对业务细节有足够的了解，相反，如果我们将属性封装起来，暴露少许的几个必要的方法给调用者使用，调用者就不需要了解太多背后的业务细节，用错的概率减少；</li></ol></li><li>抽象的意义是什么，它能解决什么编程问题？<ol><li>抽象和封装都是人类处理复杂性的有效手段；在面对复杂系统的时候，承受的信息复杂度是有限的，所以我们必须忽略掉一些非关键性的实现细节；</li><li>函数命名之抽象思维：比如 getAliyunPictureUrl() 就不是一个具有抽象思维的命名，因为某一天如果我们不再把图片存储在阿里云上，而是存储在私有云上，那这个命名也要随之被修改。相反，如果我们定义一个比较抽象的函数，比如叫作 getPictureUrl()，那即便内部存储方式修改了，我们也不需要修改命名</li></ol></li><li>继承存在的意义是什么，它能解决什么编程问题？<ol><li>代码复用（不是继承独有的，也可以通过组合关系）</li></ol></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> OOP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git暂存操作</title>
      <link href="/2021/06/08/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/git/git%E6%9A%82%E5%AD%98%E6%93%8D%E4%BD%9C/"/>
      <url>/2021/06/08/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/git/git%E6%9A%82%E5%AD%98%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>在正常的业务开发过程中，突然有一个线上紧急bug需要修复，这个时候需要切换分支去修复bug，当前的代码由于是一个半成品，所以不能进行代码的add commit push</p><h2 id="git暂存"><a href="#git暂存" class="headerlink" title="git暂存"></a>git暂存</h2><pre class="line-numbers language-git" data-language="git"><code class="language-git">git add . 指定文件<span class="token comment"># git stash 暂存（存储在本地，并将项目本次操作还原）</span>git stash save <span class="token string">"注释"</span>git stash -a 或 git stash save -a <span class="token string">"注释"</span>  有新文件的时候，使用 -a 参数git stash pop 使用上一次暂存，并将这个暂存删除（使用该命令后，如果有冲突，终端会显示，如果有冲突，先解决冲突）git stash apply stash@&#123;id&#125; stash@&#123;id&#125;里面的id默认从0开始，最近的暂存为0git stash list 查看所有的暂存git stash clear 清空所有的暂存git stash drop [-q|--quiet] [&lt;stash>] 删除某一个暂存，在中括号里边放置需要删除的暂存IDgit stash apply 使用某个暂存，但是不会删除这个暂存<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="暂存不小心清空，结果里面有需要的代码，找回方法"><a href="#暂存不小心清空，结果里面有需要的代码，找回方法" class="headerlink" title="暂存不小心清空，结果里面有需要的代码，找回方法"></a>暂存不小心清空，结果里面有需要的代码，找回方法</h2><pre class="line-numbers language-git" data-language="git"><code class="language-git">git fsck --lost-foundgit showgit merge<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 查看记录</span>git fsck --lost-found<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="http://mkstatic.lianbian.net/image-20210608193841918.png" alt="image-20210608193841918"></p><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 查看对比</span>git show d1991029610a6a48e2782f91798aec2f22bd39aa<span class="token comment"># 合并</span>git merge d1991029610a6a48e2782f91798aec2f22bd39aa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>执行引擎</title>
      <link href="/2021/03/25/%E5%90%8E%E7%AB%AF/java/jvm/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/"/>
      <url>/2021/03/25/%E5%90%8E%E7%AB%AF/java/jvm/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<p>JIT有了，为什么还要解释器</p><p>JIT（Just In Time）编译器</p><p>解释器 和 即时编译器 使用标准</p><p>Spring循环依赖的问题</p><p>GC Roots</p>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆</title>
      <link href="/2021/03/22/%E5%90%8E%E7%AB%AF/java/jvm/%E5%A0%86/"/>
      <url>/2021/03/22/%E5%90%8E%E7%AB%AF/java/jvm/%E5%A0%86/</url>
      
        <content type="html"><![CDATA[<p>堆的核心概述</p><h2 id="核心概述"><a href="#核心概述" class="headerlink" title="核心概述"></a>核心概述</h2><ol><li>一个JVM实例只存在一个堆内存，堆也是Java内存管理的核心区域；</li><li>Java堆区在JVM启动的时候即被创建，其空间大小也就确定了，是JVM管理的最大一块内存空间<ol><li>堆内存的大小是可以调节的</li></ol></li><li>《Java虚拟机规范》规定，堆可以处于物理上不连续的内存空间中，但在逻辑上它应该被视为连续的。</li><li>所有的线程共享Java堆，在这里还可以划分线程私有的缓冲区（Thread Local Allocation Buffer, TLAB）</li><li>《Java虚拟机规范》中对Java堆的描述是：所有的对象实例以及数组都应当在运行时分配在堆上。（The heap is the run-time data area from which memory for all class instances and arrays is allocated）<ol><li>我要说的是：“几乎”所有的对象实例都在这里分配内存。 - 从实际使用的角度看的</li></ol></li><li>数组和对象可能永远不会存储在栈上，因为栈帧中保存引用，这个引用指向对象或者数组在堆中的位置；</li><li>在方法结束后，堆中的对象不会马上被移除，仅仅在垃圾收集的时候才会被移除；</li><li>堆，是GC（Garbage Collection，垃圾收集器）执行垃圾回收的重点区域；</li></ol><h3 id="内存细分"><a href="#内存细分" class="headerlink" title="内存细分"></a>内存细分</h3><p>现代垃圾收集器大部分都基于分代收集理论设计，堆空间细分为：</p><ol><li><p>Java7及以前堆内存逻辑上分为三部分：新生区 + 养老区 + 永久区</p><ol><li>Young Generation Space 新生区 Young/New<ol><li>又被划分为Eden区和Survivor区</li></ol></li><li>Tenure generation space 养老区 Old/Tenure</li><li>Permanent Space 永久区 Perm</li></ol></li><li><p>Java8及之后堆内存逻辑上分为三部分：新生区 + 养老区 + 元空间</p><ol><li>Young Generation Space 新生区 Young/New<ol><li>又被划分为Eden区和Survivor区</li></ol></li><li>Tenure generation space 养老区 Old/Tenure<ol><li>Meta Space    元空间 Meta</li></ol></li></ol><p><strong>约定：</strong></p><p><strong>新生区 - 新生代 - 年轻代</strong></p><p><strong>养老区 - 老年区 - 老年代</strong></p><p><strong>永久区 - 永久代</strong></p></li></ol><h2 id="堆空间内部结构（JDK7）"><a href="#堆空间内部结构（JDK7）" class="headerlink" title="堆空间内部结构（JDK7）"></a>堆空间内部结构（JDK7）</h2><p><img src="http://mkstatic.lianbian.net/%E7%AC%AC08%E7%AB%A0_%E5%A0%86%E7%A9%BA%E9%97%B4-java7.jpg" alt="第08章_堆空间-java7"></p><h2 id="堆空间内部结构（JDK8）"><a href="#堆空间内部结构（JDK8）" class="headerlink" title="堆空间内部结构（JDK8）"></a>堆空间内部结构（JDK8）</h2><p><img src="http://mkstatic.lianbian.net/%E7%AC%AC08%E7%AB%A0_%E5%A0%86%E7%A9%BA%E9%97%B4-java8.jpg" alt="第08章_堆空间-java8"></p><p><img src="http://mkstatic.lianbian.net/image-20210321213619404.png" alt="image-20210321213619404"></p><h1 id="设置堆内存大小与OOM"><a href="#设置堆内存大小与OOM" class="headerlink" title="设置堆内存大小与OOM"></a>设置堆内存大小与OOM</h1><h2 id="堆空间大小的设置"><a href="#堆空间大小的设置" class="headerlink" title="堆空间大小的设置"></a>堆空间大小的设置</h2><ol><li>Java堆区用于存储Java对象实例，那么堆的大小在JVM启动时就已经设定好了，大家可以通过选项 ‘-Xmx’ 和 ‘-Xms’ 来进行设置；<ol><li>-Xms 用户表示堆区的起始内存，等价于-XX:InitialHeapSize</li><li>-Xmx 则用于表示堆区的最大内存，等价于 -XX:MaxHeapSize</li></ol></li><li>一旦堆区中的内存大小超过 -Xmx 所指定的最大内存时，将会抛出 OutOfMemoryError 异常；</li><li>通常会将 -Xms 和 -Xmx两个参数配置相同的值，其目的是为了能够在Java垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小，从而提高性能。</li><li>默认情况下，<ol><li>初始化内存大小：物理电脑内存大小 / 64</li><li>最大内存大小：物理电脑内存大小 / 4</li></ol></li></ol><h1 id="年轻代和老年代"><a href="#年轻代和老年代" class="headerlink" title="年轻代和老年代"></a>年轻代和老年代</h1><h2 id="XX-NewRatio"><a href="#XX-NewRatio" class="headerlink" title="-XX:NewRatio"></a>-XX:NewRatio</h2><p>配置新生代与老年代在堆结构的占比。</p><ol><li>默认 -XX:NewRatio=2，表示新生代占1，老年代占2，新生代占整个堆的1/3；可以修改 -XX:NewRatio=4，表示新生代占1，老年代占4，新生代占整个堆的1/5；</li></ol><h2 id="XX-SurvivorRatio"><a href="#XX-SurvivorRatio" class="headerlink" title="-XX:SurvivorRatio"></a>-XX:SurvivorRatio</h2><ol><li>在HotSpot中，Eden空间和另外两个Survivor空间缺省（默认）所占的比例是8:1:1</li><li>当然开发人员可以通过选项 -XX:SurvivorRatio 调整这个空间比例。比如 -XX:SurvivorRatio=8</li><li>几乎所有的Java对象都是在Eden区被new出来的；</li><li>绝大部分的Java对象的销毁都在新生代进行了<ol><li>IBM公司的专门研究表明，新生代中80%的对象都是“朝生夕死”的；</li></ol></li><li>可以使用选项 -Xmn 设置新生代最大内存大小<ol><li>这个参数一般使用默认值就可以了</li></ol></li></ol><p><img src="http://mkstatic.lianbian.net/image-20210321215348302.png" alt="image-20210321215348302"></p><h1 id="图解对象分配过程"><a href="#图解对象分配过程" class="headerlink" title="图解对象分配过程"></a>图解对象分配过程</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>为新对象分配的内存是一种非常严谨和复杂的任务，JVM的设计者们不仅需要考虑内存如何分配，在哪里分配的问题，并且由于内存分配算法与内存回收算法密切相关，所以还需要考虑GC执行完成内存回收后是否会在内存空间中产生内存碎片。</p><ol><li>new的对象先放在Eden区，此区有带下限制；</li><li>当Eden区的空间填满时，程序又需要创建对象，JVM的垃圾回收器将对Eden进行垃圾回收（Minor GC），将Eden区中的不再被其他对象所引用的对象进行销毁。再加载新的对象放到Eden区；</li><li>然后将Eden中的剩余对象移动到幸存者0区；</li><li>如果再次触发垃圾回收，此时上次幸存下来的放到幸存者0区的，如果没有回收，就会放到幸存者1区；</li><li>如果再次经历垃圾回收，此时会重新放回幸存者0区，接着再去幸存者1区；</li><li>啥时候能去养老区呢？可以设置次数，默认是15次。<ol><li>可以设置参数：-XX：MaxTenuringThreshold=&lt;N&gt;进行设置</li></ol></li><li>在养老区，相对悠闲。当养老区内存不足时，再次触发GC:Major GC，进行养老区的内存清理；</li><li>若养老区执行了Major GC之后发现依然无法进行对象的保存，就会产生OOM异常；</li></ol><p><img src="http://mkstatic.lianbian.net/%E7%AC%AC08%E7%AB%A0_%E6%96%B0%E7%94%9F%E4%BB%A3%E5%AF%B9%E8%B1%A1%E5%88%86%E9%85%8D%E4%B8%8E%E5%9B%9E%E6%94%B6%E8%BF%87%E7%A8%8B.jpg" alt="第08章_新生代对象分配与回收过程"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>针对幸存者s0,s1区总结：复制之后有交换，谁空谁是to；</li><li>关于垃圾回收：频繁在新生区收集，很少在养老区收集，几乎不再永久区/元空间收集；</li></ol><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img src="http://mkstatic.lianbian.net/image-20210321221325759.png" alt="image-20210321221325759"></p><h1 id="Minor-GC、Major-GC、Full-GC"><a href="#Minor-GC、Major-GC、Full-GC" class="headerlink" title="Minor GC、Major GC、Full GC"></a>Minor GC、Major GC、Full GC</h1><p>JVM在进行GC时，并非每次都对上面三个内存区域一起回收的，大部分时候回收的都是指新生代。</p><p>针对HotSpot VM的实现，它里面的GC按照回收区域又分为两大种类型：一种是部分收集（Partial GC），一种是整堆收集（Full GC）</p><ol><li>部分收集：不是完整收集整个Java堆的垃圾收集。其中又分为：<ol><li>新生代收集（Minor GC/Young GC）：只是新生代的垃圾收集</li><li>老年代收集（Major GC / Old GC）：只是老年代的垃圾收集<ol><li>目前，只有CMS GC会有单独收集老年代的行为；</li><li>注意：很多时候Major GC会和Full GC混淆使用，需要具体分辨是老年代回收还是整堆回收；</li></ol></li><li>混合收集（Mixed GC）：收集整个新生代以及部分老年代的垃圾收集。<ol><li>目前，只有G1 GC会有这种行为；</li></ol></li></ol></li><li>整堆收集（Full GC）：收集整个java堆和方法区的垃圾收集；</li></ol><h2 id="最简单的分布式GC策略的触发条件"><a href="#最简单的分布式GC策略的触发条件" class="headerlink" title="最简单的分布式GC策略的触发条件"></a>最简单的分布式GC策略的触发条件</h2><h3 id="年轻代GC（Minor-GC）触发机制："><a href="#年轻代GC（Minor-GC）触发机制：" class="headerlink" title="年轻代GC（Minor GC）触发机制："></a>年轻代GC（Minor GC）触发机制：</h3><ol><li>当年轻代空间不足时，就会触发Minor GC，这里的年轻代满指的是Eden代满，Survivor满不会引起GC。（每次Minor GC会清理年轻代的内存。）</li><li>因为 Java对象大多都具备朝生夕灭的特性，所以 Minor GC 非常频繁，一般回收速度也比较快，这一定义既清晰又易于理解。</li><li>Minor GC会引发STW，暂停其他用户的线程，等垃圾回收结束，用户线程才恢复运行；</li></ol><p><img src="http://mkstatic.lianbian.net/image-20210321222553936.png" alt="image-20210321222553936"></p><h3 id="老年代GC（Major-GC-Full-GC）触发机制："><a href="#老年代GC（Major-GC-Full-GC）触发机制：" class="headerlink" title="老年代GC（Major GC/Full GC）触发机制："></a>老年代GC（Major GC/Full GC）触发机制：</h3><ol><li>指发生在老年代的GC，对象从过年老年代消失时，我们说“Major GC”或“Full GC” 发生了；</li><li>出现了 Major GC，经常会伴随至少一次的Minor GC；<ol><li>也就是老年代空间不足时，会先尝试触发Minor GC。如果之后空间还是不足，则触发Major GC</li></ol></li><li>Major GC的速度一般会比Minor GC慢10倍以上，STW的时间更长；</li><li>如果Major GC后，内存还不足，就报OOM了；</li></ol><h3 id="Full-GC触发机制："><a href="#Full-GC触发机制：" class="headerlink" title="Full GC触发机制："></a>Full GC触发机制：</h3><ol><li>调用system.gc()时，系统建议执行Full GC，但是不必然执行</li><li>老年代空间不足</li><li>方法区空间不足</li><li>通过Minor GC后进入老年代的平均大小大于老年代的可用内存；</li><li>由Eden区、survivor space0（from space） 区向survivor space1(to space)区复制时，对象大小小于 to space可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小</li></ol><p>说明：full gc是开发或调优中尽量要避免的，这种暂时时间会短一些 - STW stop the world。</p><h1 id="堆空间分代思想"><a href="#堆空间分代思想" class="headerlink" title="堆空间分代思想"></a>堆空间分代思想</h1><p>为什么需要把Java堆分代？不分代就不能正常工作了吗？</p><p>经研究，不同对象的生命周期不同，70%-99%的对象是临时对象</p><ol><li>新生代：有Eden、两块大小相同的Survivor(又称为from/to s0/s1)构成，to总为空；</li><li>老年代：存放新生代中经历多次GC仍然存活的对象；</li></ol><p>其实不分代完全可以，分代的唯一理由就是优化GC性能。如果没有分代，那所有的对象都在一块，就如同把一个学校的人都关在一个教室。GC的时候要找到哪些对象没用，这样就会对堆所有区域进行扫描。而很多对象都是朝生夕死的，如果没有分代的话，把新创建的对象放到某一地方，当GC的时候先把这块存储“朝生夕死”对象的区域进行回收，这样就会腾出很大的空间来。</p><p><img src="http://mkstatic.lianbian.net/image-20210321224448871.png" alt="image-20210321224448871"></p><h1 id="内存分配策略（对象提升规则）"><a href="#内存分配策略（对象提升规则）" class="headerlink" title="内存分配策略（对象提升规则）"></a>内存分配策略（对象提升规则）</h1><p>如果对象在Ede出生并经过第一次MinorGC后仍然存活，并且能被Survivor容纳的话，将被移动到Survivor空间中，并将对象年龄设为1。对象在Survivor区中每熬过一次MinorGC，年龄就增加1岁，当它的年龄增加到一定的程度（默认为15岁，其实每个JVM、每个GC都有所不同）时，就会被晋升到老年代中。</p><p>对象晋升老年代的年龄阈值，可以通过选项 -XX:MaxTenuringThreshold来设置；</p><p>针对不同年龄段的对象分配原则如下所示：</p><ol><li>优先分配到Eden</li><li>大对象直接分配到老年代<ol><li>尽量避免程序中出现过多的大对象</li></ol></li><li>长期存活的对象分配到老年代</li><li>动态对象年龄判断<ol><li>如果survivor区中相同年龄的所有对象大小的总和大于survivor空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代，无须等到MaxTenuringThreshold中要求的年龄；</li></ol></li><li>空间分配担保<ol><li>-XX：HandlePromotionFailure</li></ol></li></ol><h1 id="为对象分配内存：TLAB"><a href="#为对象分配内存：TLAB" class="headerlink" title="为对象分配内存：TLAB"></a>为对象分配内存：TLAB</h1><h2 id="为什么有TLAB（Thread-Local-Allocation-Buffer）"><a href="#为什么有TLAB（Thread-Local-Allocation-Buffer）" class="headerlink" title="为什么有TLAB（Thread Local Allocation Buffer）?"></a>为什么有TLAB（Thread Local Allocation Buffer）?</h2><ol><li>堆区的线程共享区域，任何线程都可以访问到堆区中的共享数据</li><li>由于对象实例的创建在JVM中非常频繁，因此在并发环境下从堆区中划分内存空间是线程不安全的；</li><li>为避免多个线程操作同一个地址，需要使用加锁，进而影响分配速度；</li><li>从内存模型而不是垃圾收集的角度，对Eden区域继续进行划分，JVM为每个线程分配了一个私有缓存区域，它包含在Eden空间内；</li><li>多线程同时分配内存时，使用TLAB可以避免一系列的非线程安全问题，同时还能够提升内存分配的吞吐量，因此我们可以将这种内存分配方式称之为<strong>快速分配策略</strong>；</li><li>据我所知所有的OpenJDK衍生出来的JVM都提供了TLAB的设计；</li></ol><p><img src="http://mkstatic.lianbian.net/%E7%AC%AC08%E7%AB%A0_TLAB.jpg" alt="第08章_TLAB"></p><h2 id="TLAB的再说明"><a href="#TLAB的再说明" class="headerlink" title="TLAB的再说明"></a>TLAB的再说明</h2><ol><li>尽管不是所有的实例对象都能够哎TLAB中成功分配内存，但JVM确实是将TLAB作为分配内存的首选；</li><li>在程序中，开发人员可以通过 -XX:UseTLAB 设置是否开启TLAB空间；</li><li>默认情况下，TLAB空间的内存非常小，仅占有整个Eden空间的1%，可以通过选项 -XX:TLABWasteTargetPercent 设置TLAB空间所占用Eden空间的百分比大小；</li><li>一旦对象在TLAB空间分配内存失败时，JVM就会尝试着通过使用加锁机制确保数据操作的原子性，从而直接在Eden空间中分配内存；</li></ol><p><img src="http://mkstatic.lianbian.net/image-20210322061754700.png" alt="image-20210322061754700"></p><h1 id="小结堆空间的参数设置"><a href="#小结堆空间的参数设置" class="headerlink" title="小结堆空间的参数设置"></a>小结堆空间的参数设置</h1><ol><li>-XX:SurvivorRation</li><li>-XX:MaxTenuringThreshold</li><li>-XX:+PringGCDetails</li><li>-XX:HandlePromotionFailure</li></ol><p>在发生Minor GC之前，虚拟机会检查老年代最大可用的连续空间是否大于新生代所有对象的总空间。</p><ol><li>如果大于，则此次Minor GC是安全的；</li><li>如果小于，则虚拟机会查看 HandlePromotionFailure=ture，那么会继续检查老年代最大可用连续空间是否大于历次晋升到老年代的对象的平均大小；<ol><li>如果大于，则尝试进行一次Minor GC,但这次Minor GC依然是有风险的；</li><li>如果小于，则改完进行一次Full GC;</li></ol></li><li>如果HandlePromotionFailure = false,则改为进行一次Full GC;</li></ol><p><img src="http://mkstatic.lianbian.net/image-20210322062403142.png" alt="image-20210322062403142"></p><h1 id="堆是分配对象的唯一选择吗"><a href="#堆是分配对象的唯一选择吗" class="headerlink" title="堆是分配对象的唯一选择吗"></a>堆是分配对象的唯一选择吗</h1><h2 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h2><ol><li>栈上分配</li><li>同步省略/锁清除</li><li>标量替换</li></ol>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地方法接口</title>
      <link href="/2021/03/21/%E5%90%8E%E7%AB%AF/java/jvm/%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/"/>
      <url>/2021/03/21/%E5%90%8E%E7%AB%AF/java/jvm/%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是本地方法"><a href="#什么是本地方法" class="headerlink" title="什么是本地方法"></a>什么是本地方法</h2><p>一个Native Method就是一个Java调用非Java代码的接口</p><h2 id="为什么要使用-Native-Method"><a href="#为什么要使用-Native-Method" class="headerlink" title="为什么要使用 Native Method"></a>为什么要使用 Native Method</h2><p>Java使用起来非常方便，然而有些层次的任务用java实现起来不容易，或者我们对程序的效率很在意时，问题就来了。</p><h3 id="与Java环境外外交互"><a href="#与Java环境外外交互" class="headerlink" title="与Java环境外外交互"></a>与Java环境外外交互</h3><p>有时java应用需要与Java外面的环境交互，这是本地方法存在的主要原因。你可以想想Java需要与一些底层系统，如操作系统或者某些硬件条件交换信息时的情况。本地方法正是这样一种交流机制：它为我们提供了一个非常简洁的接口，而且我们无需去了解Java应用之外的繁琐的细节。</p><h3 id="与操作系统交互"><a href="#与操作系统交互" class="headerlink" title="与操作系统交互"></a>与操作系统交互</h3><p>JVM支持着java语言本身和运行时库，它是Java程序赖以生存的平台，它由一个解释器（解释字节码，和一些连接到本地代码的库组成。然后不管怎样，它毕竟不是一个完整的系统，它经常依赖于一些底层系统的支持。这些底层系统常常是强大的操作系统。通过使用本地方法，我们得以用Java实现了jre的底层依赖交互，甚至JVM的一些部分就是用C写的。还有，如果我们要使用一些Java语言本身没有提供封装的操作系统的特性时，我们也需要使用本地方法。）</p><h3 id="Sum-s-Java"><a href="#Sum-s-Java" class="headerlink" title="Sum,s Java"></a>Sum,s Java</h3><p>Sun的解释器时用C实现的，这使得它能像一些普通的C一样与外部交互，jre大部门是用Java实现的，它也通过一些本地方法与外界交互。例如：类java.lang.Thread的setPriority()方法是用Java实现的，但是它实现调用的是该类的本地方法setPriority0()。这个本地方法是用C实现的，并被植入jvm内部，在windows 95的平台上，这个本地方法的具体实现由Jvm直接提供，更多的情况是本地方法由外部的动态链接库(external dynamic link library)提供，然后被JVM调用。</p><h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><p>目前该方法是用的越来越少了，除非与硬件有关的应用，比如通过Java程序驱动打印机或者Java系统管理生产设备，在企业级应用中已经比较少见。因为现在的异构领域间的通信很发达，比如可以使用Socket通信，也可以使用Web Service等等</p>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序计数器</title>
      <link href="/2021/03/16/%E5%90%8E%E7%AB%AF/java/jvm/%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/"/>
      <url>/2021/03/16/%E5%90%8E%E7%AB%AF/java/jvm/%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="程序计数器（PC寄存器）"><a href="#程序计数器（PC寄存器）" class="headerlink" title="程序计数器（PC寄存器）"></a>程序计数器（PC寄存器）</h1><h2 id="PC-Register介绍"><a href="#PC-Register介绍" class="headerlink" title="PC Register介绍"></a>PC Register介绍</h2><p>JVM中的程序计数寄存器（Program Counter Register）中，Register 的命名源于CPU的寄存器，寄存器存储指令相关的现场信息。CPU只有把数据装载到寄存器才能运行。</p><p>这里，并发是广义上所指的物理寄存器（cpu寄存器），或许将其翻译成PC计数器（或指令计数器）会更加贴切（也称为程序钩子），并且也不容易引起一些不必要的误会。</p><p><font style="color:red"><strong>JVM中的PC寄存器是对物理PC寄存器的一种抽象模拟。</strong></font></p><ol><li>它是一块很小的内存空间，几乎可以忽略不计，也是运行速度最快的存储区域；</li><li>在JVM规范中，每个线程都有自己的程序计数器，是线程私有的，生命周期与线程的生命周期保持一致；</li><li>任何时间一个线程都只有一个方法在执行，也就是所谓的<strong>当前方法</strong>。程序计数器会存储当前线程正在执行的Java方法的JVM指令地址；或者，如果是在执行native方法（本地方法），则是未指定值（undefind）；</li><li>它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个程序计数器来完成；</li><li>字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令；</li><li>它是唯一一个在Java虚拟机规范中没有规定任何 OOM 情况的区域；</li></ol><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>PC寄存器用来存储指向下一条指令的地址，也即将要执行的指令代码。由执行引擎读取下一条指令。</p><p><img src="http://mkstatic.lianbian.net/image-20210316230022399.png" alt="image-20210316230022399"></p><h2 id="两个常见问题"><a href="#两个常见问题" class="headerlink" title="两个常见问题"></a>两个常见问题</h2><h3 id="使用PC寄存器存储字节码指令地址有什么用呢？为什么使用PC寄存器记录当前线程的执行地址呢？"><a href="#使用PC寄存器存储字节码指令地址有什么用呢？为什么使用PC寄存器记录当前线程的执行地址呢？" class="headerlink" title="使用PC寄存器存储字节码指令地址有什么用呢？为什么使用PC寄存器记录当前线程的执行地址呢？"></a>使用PC寄存器存储字节码指令地址有什么用呢？为什么使用PC寄存器记录当前线程的执行地址呢？</h3><p>因为CPU需要不停的切换各个线程，这时候切换回来以后，就得知道接着从哪开始继续执行；</p><p>JVM的字节码解释器就需要通过改变PC寄存器的值来明确下一条应该执行什么样的字节码指令。</p><h3 id="PC寄存器为什么会被设定为线程私有？"><a href="#PC寄存器为什么会被设定为线程私有？" class="headerlink" title="PC寄存器为什么会被设定为线程私有？"></a>PC寄存器为什么会被设定为线程私有？</h3><p>我们都知道所谓的多线程在一个特定的时间段内只会执行其中某一个线程的方法，CPU会不停地做任务切换，这样必然导致经常中断和恢复，如何保证分毫不差呢？</p><p><font style="color:red">为了能够准确的记录各个线程正在执行的当前字节码指令地址，最好的办法自然是为每个线程都分配一个PC寄存器。</font>这样一来各个线程之间便可以进行独立计算，从而<strong>不会出现相互干扰</strong>的情况；每个线程在创建后，都会产生自己的程序计算器和栈帧，程序计数器在<strong>各个线程之间互不影响</strong>。</p><p>由于CPU时间片轮限制，众多线程在并发执行的过程中，任何一个确定的时刻，一个处理器或者多核处理器中的一个内核，只会执行某个线程中的一条指令。</p><h2 id="CPU时间片"><a href="#CPU时间片" class="headerlink" title="CPU时间片"></a>CPU时间片</h2><p>CPU时间片即CPU分配给各个程序的时间，每个线程被分配一个时间段，称作为它的时间片；</p><p>在宏观上：我们可以同时打开多个应用程序，每个程序并行不悖，同时运行；</p><p>在微观上：由于只有一个CPU，一次只能处理程序要求的一部分，如何处理公平，一种方法就是引入时间片，每个程序轮流执行。</p>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运行时数据区概述及线程</title>
      <link href="/2021/03/16/%E5%90%8E%E7%AB%AF/java/jvm/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2021/03/16/%E5%90%8E%E7%AB%AF/java/jvm/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="运行时数据区（Runtime-Data-Area）"><a href="#运行时数据区（Runtime-Data-Area）" class="headerlink" title="运行时数据区（Runtime Data Area）"></a>运行时数据区（Runtime Data Area）</h1><h2 id="位置描述"><a href="#位置描述" class="headerlink" title="位置描述"></a>位置描述</h2><p><img src="http://mkstatic.lianbian.net/image-20210316220349337.png" alt="image-20210316220349337"></p><p><img src="http://mkstatic.lianbian.net/image-20210316220425209.png" alt="image-20210316220425209"></p><h2 id="包含模块"><a href="#包含模块" class="headerlink" title="包含模块"></a>包含模块</h2><p><img src="http://mkstatic.lianbian.net/image-20210316220703086.png" alt="image-20210316220703086"></p><p>​    Java虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。另外一些则是与线程一一对应的，这些与线程对应的数据区域会随着线程开始和结束而创建和销毁。</p><p><img src="http://mkstatic.lianbian.net/%E7%AC%AC03%E7%AB%A0_%E7%BA%BF%E7%A8%8B%E5%85%B1%E4%BA%AB%E5%92%8C%E7%A7%81%E6%9C%89%E7%9A%84%E7%BB%93%E6%9E%84.jpg" alt="第03章_线程共享和私有的结构"></p><p>上图：灰色的为单独线程私有的，红色的为多个线程共享的。即：</p><ul><li><p>每个线程：独立包含程序计数器、栈、本地栈；</p></li><li><p>线程间共享：堆、堆外内存（永久代或元空间、代码缓存）</p></li></ul><h2 id="关于线程间共享的说明"><a href="#关于线程间共享的说明" class="headerlink" title="关于线程间共享的说明"></a>关于线程间共享的说明</h2><p>运行时对象类 Class Runtime</p><p>每个JVM只有一个Runtime实例。</p><p>即为运行时环境，相当于内存结构的中间的那个框框：运行时环境。</p><p><img src="http://mkstatic.lianbian.net/image-20210316222527180.png" alt="image-20210316222527180"></p><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ol><li>线程是一个程序里的运行单元，JVM允许一个应用有多个线程并行的执行；</li><li>在Hotspot JVM里，每个线程都与操作系统的本地线程直接映射；<ol><li>当一个Java线程准备好执行后，此时一个操作系统的本地线程也同时创建，Java线程执行终止后，本地线程也会回收。</li></ol></li><li>操作系统负责所有线程的安排调度到任何一个可用的CPU上。一旦本地线程初始化成功，它就会调用Java线程中的run()方法；</li></ol><h2 id="JVM系统线程"><a href="#JVM系统线程" class="headerlink" title="JVM系统线程"></a>JVM系统线程</h2><p>使用jconsole或者任何一款调试工具，都能看到在后台有许多线程在运行；</p><p>这些后台线程不包括调用<code>public static void main(String[])</code> 的main线程以及所有这个main线程自己创建的线程；</p><p>在Hotspot JVM里主要是以下几个：</p><ol><li><strong>虚拟机线程：</strong>这种线程的操作是需要JVM达到<font style="color:red">安全点</font>才回出现。这些操作必须在不同的线程中发生的原因是他们都需要JVM达到安全点，这样堆才不会变化。这种线程的执行包括”stop-the-world”的垃圾手机，线程栈手机，线程挂起以及偏向锁撤销；</li><li><strong>周期任务线程：</strong>这种线程是时间周期事件的体现（比如中断），他们一般用于周期性操作的调度执行；</li><li><strong>GC线程：</strong>这种线程对在JVM里不同种类的垃圾收集行为提供了支持；</li><li><strong>编译线程：</strong>这种线程在运行时会将字节码编译成本地代码；</li><li><strong>信号调度线程：</strong>这种线程接收信号并发送给JVM，在它内部通过调用适合的方法进行处理；</li></ol>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运行时数据区笔记</title>
      <link href="/2021/03/16/%E5%90%8E%E7%AB%AF/java/jvm/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/03/16/%E5%90%8E%E7%AB%AF/java/jvm/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h2 id="Java线程和操作系统线程一对一映射"><a href="#Java线程和操作系统线程一对一映射" class="headerlink" title="Java线程和操作系统线程一对一映射"></a>Java线程和操作系统线程一对一映射</h2><h2 id="程序计数器（PC计数器）"><a href="#程序计数器（PC计数器）" class="headerlink" title="程序计数器（PC计数器）"></a>程序计数器（PC计数器）</h2><p><img src="http://mkstatic.lianbian.net/image-20210314063117625.png" alt="image-20210314063117625"></p><h3 id="PC寄存器为什么要线程私有？"><a href="#PC寄存器为什么要线程私有？" class="headerlink" title="PC寄存器为什么要线程私有？"></a>PC寄存器为什么要线程私有？</h3><p><img src="http://mkstatic.lianbian.net/image-20210314063725568.png" alt="image-20210314063725568"></p><h3 id="并行、并发"><a href="#并行、并发" class="headerlink" title="并行、并发"></a>并行、并发</h3><h2 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h2><p>java栈的基础单位是栈帧</p><p>一个栈帧对应一个java方法</p><p><img src="http://mkstatic.lianbian.net/image-20210314065719850.png" alt="image-20210314065719850"></p><p>FILO、LIFO</p><h2 id="栈中可能出现的异常"><a href="#栈中可能出现的异常" class="headerlink" title="栈中可能出现的异常"></a>栈中可能出现的异常</h2><p><img src="http://mkstatic.lianbian.net/image-20210314070315666.png" alt="image-20210314070315666"></p><p>-Xss 设置固定的栈大小</p><h2 id="栈的储存单位"><a href="#栈的储存单位" class="headerlink" title="栈的储存单位"></a>栈的储存单位</h2><p>栈帧：一个方法一个栈帧</p><h3 id="方法的结束方式分为两种："><a href="#方法的结束方式分为两种：" class="headerlink" title="方法的结束方式分为两种："></a>方法的结束方式分为两种：</h3><ol><li>正常结束</li><li>出现未捕获的异常</li></ol><h2 id="栈帧的内部结构"><a href="#栈帧的内部结构" class="headerlink" title="栈帧的内部结构"></a>栈帧的内部结构</h2><p>每个栈帧储存着：</p><ol><li><strong>局部变量表</strong></li><li><strong>操作数栈</strong></li><li>动态链接</li><li>方法返回地址</li><li>一些附加信息</li></ol><h3 id="局部变量表（local-variables）"><a href="#局部变量表（local-variables）" class="headerlink" title="局部变量表（local variables）"></a>局部变量表（local variables）</h3><ol><li>数字数组，用于储存局部变量的</li><li>无数据安全问题，是建立在线程的栈上，是线程的私有数据</li><li>容量在编译期确定下来，就不会更改</li></ol><h3 id="Solt-局部变量表最基本的储存单元"><a href="#Solt-局部变量表最基本的储存单元" class="headerlink" title="Solt 局部变量表最基本的储存单元"></a>Solt 局部变量表最基本的储存单元</h3><p>非静态变量：this 放在solt = 0 的位置上</p><p><img src="http://mkstatic.lianbian.net/image-20210315003340370.png" alt="image-20210315003340370"></p><h2 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h2><h2 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h2><h2 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h2><h3 id="静态链接、早期绑定"><a href="#静态链接、早期绑定" class="headerlink" title="静态链接、早期绑定"></a>静态链接、早期绑定</h3><h3 id="动态链接、晚期绑定（虚方法，在编译期间，类型无法确定下来的）"><a href="#动态链接、晚期绑定（虚方法，在编译期间，类型无法确定下来的）" class="headerlink" title="动态链接、晚期绑定（虚方法，在编译期间，类型无法确定下来的）"></a>动态链接、晚期绑定（虚方法，在编译期间，类型无法确定下来的）</h3><h2 id="虚方法表"><a href="#虚方法表" class="headerlink" title="虚方法表"></a>虚方法表</h2>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类加载器子系统</title>
      <link href="/2021/03/13/%E5%90%8E%E7%AB%AF/java/jvm/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
      <url>/2021/03/13/%E5%90%8E%E7%AB%AF/java/jvm/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%AD%90%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="内存结构概述"><a href="#内存结构概述" class="headerlink" title="内存结构概述"></a>内存结构概述</h1><h2 id="简图"><a href="#简图" class="headerlink" title="简图"></a>简图</h2><p><img src="http://mkstatic.lianbian.net/image-20210312070222889.png" alt="image-20210312070222889"></p><h2 id="详细图"><a href="#详细图" class="headerlink" title="详细图"></a>详细图</h2><p> <img src="http://mkstatic.lianbian.net/image-20210312070636431.png" alt="image-20210312070636431"></p><h1 id="类加载器与类的加载过程"><a href="#类加载器与类的加载过程" class="headerlink" title="类加载器与类的加载过程"></a>类加载器与类的加载过程</h1><h2 id="类加载子系统的作用"><a href="#类加载子系统的作用" class="headerlink" title="类加载子系统的作用"></a>类加载子系统的作用</h2><ol><li>类加载器子系统负责从文件系统或者网络中加载class文件，class文件在文件开头有特定的文件标识；</li><li>ClassLoader只负责class文件的加载，至于它是否可以运行，则由ExecutionEngine决定；</li><li>加载的类信息存放于一块称为方法区的内存空间。除了类的信息外，方法区中还会存放运行时常亮池信息，可能还包括字符串字面量和数字常量（这部分常量信息是class文件中常量池部分的内存映射）</li></ol><h2 id="类加载器ClassLoader角色"><a href="#类加载器ClassLoader角色" class="headerlink" title="类加载器ClassLoader角色"></a>类加载器ClassLoader角色</h2><ol><li>class file 存在于本地硬盘上，可以理解为设计师在纸上的模版，而最终这个模版在执行的时候是要加载到JVM当中来，根据这个文件实例化n个一摸一样的实例；</li><li>class file 加载到JVM中，被称为DNA元数据模版，放在方法区；</li><li>在.class文件 -&gt; JVM -&gt; 元数据模版，此过程中就要一个运输工具（类加载器 Class Loader）扮演一个快递员角色；</li></ol><h2 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h2><p><img src="http://mkstatic.lianbian.net/image-20210313092021604.png" alt="image-20210313092021604"></p><ol><li><p>加载(Loading) </p><ol><li>通过一个类的全限定名获取定义此类的二进制字节流；</li><li>将这个字节流所代表的静态储存结构转化为方法区的运行时数据结构；</li><li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各个数据的访问入口；</li><li>补充：加载.class文件的方式<ol><li>在本地系统中直接加载；</li><li>通过网络获取，典型场景：web applet；</li><li>从zip压缩包中读取，成为日后jar/war格式的基础；</li><li>运行时计算生成，使用最多的是：动态代理技术；</li><li>由其他文件生成，典型场景：jsp应用；</li><li>从专门的数据库中提取.class文件；</li><li>从加密文件中获取，典型的防class文件被反编译的保护措施；</li></ol></li></ol></li><li><p>链接（Linking）</p><ol><li><p>验证（Verify）</p><ol><li>确保class文件的字节流包含信息符合当前虚拟机要求，保证被夹在类的正确性，不会危害虚拟机的自生安全；</li><li>主要包括四种验证：文件格式验证，元数据验证，字节码验证，符号引用验证；</li></ol></li><li><p>准备（Prepare）</p><ol><li>为类变量分配内存并且设置该类变量的默认初始值，即零值；这里不包含用final修饰的类变量（static），因为final在编译的时候就会分配，准备阶段会显示初始化；</li><li>不会为实例变量分配初始化，类变量会分配在方法区中，而实例变量是会随着对象一起分配到Java堆中；</li></ol></li><li><p>解析（Resolve）</p><ol><li><p>将常量池内的<strong>符号引用</strong>（符号引用就是一组符号来描述所引用的目标，符号引用的字面量形式明确定义在《java虚拟机规范》的class文件格式中，直接引用就是直接指向目标指针，相对偏移量或一个间接定位到目标的句柄。）转换为直接引用的过程；</p></li><li><p>事实上，解析操作往往会伴随着JVM在执行完初始化之后再执行；</p></li><li><p>解析动作主要针对类或者接口、字段、类方法、接口方法、方法类型等。</p><p><img src="http://mkstatic.lianbian.net/image-20210313095010582.png" alt="image-20210313095010582"></p></li></ol></li></ol></li><li><p>初始化(initialization)</p><ol><li>初始化阶段就是执行类构**造器方法&lt;clinit&gt;()**的过程</li><li>此方法不需要定义，javac编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来；</li><li>构造器方法中的指令按照语句在源文件中出现的顺序执行；</li><li>**&lt;clinit&gt;()**不同于类的构造器。（关联：构造器是虚拟机视角下的&lt;init&gt;()）</li><li>若该类具有父类，JVM会保证子类的**&lt;clinit&gt;()<strong>执行前，父类的</strong>&lt;clinit&gt;()**已经执行完毕；</li><li>虚拟机必须保证一个类的**&lt;clinit&gt;()**方法在多线程下被同步加锁；</li></ol></li></ol><h2 id="类加载器分类"><a href="#类加载器分类" class="headerlink" title="类加载器分类"></a>类加载器分类</h2><ol><li>启动类加载器<ol><li>这个类加载使用c/c++语言实现的，嵌套在JVM内部；</li><li>它用来加载Java核心库（JAVA_HOME/jre/lib/rt.jar/resoureces.jar/sun.boot.class.path路径下的内容），用于提供JVM自身需要的类；</li><li>并不继承java.lang.ClassLoader，没有父加载器；</li><li>加载扩展类、应用程序类加载器，并且是他们的<strong>父类加载器</strong>；</li><li>出于安全考虑，Bootstrap启动类加载器只加载包名为java、javax、sun等开头的类；</li></ol></li><li>扩展类加载器<ol><li>Java语言编写，由sun.misc.Launcher$ExtClassLoader实现；</li><li>派生于ClassLoader类；</li><li>父类加载器为启动类加载器；</li><li>从java.ext.dirs系统属性所指定的目录中加载类库，或从JDK的安装目录的jre/lib/ext子目录（扩展目录）下加载类库。如果用户创建的JAR放在此目录下，也会自动由扩展类目录加载器加载；</li></ol></li><li>应用类加载器（系统类加载器）<ol><li>Java语言编写，由sun.misc.Launcher$AppClassLoader实现</li><li>派生于ClassLoader类；</li><li>父类加载器为扩展类加载器；</li><li>它负责加载环境变量classpath或系统属性java.class.path指定路径下的类库；</li><li>该类加载是程序中默认的类加载器，一般来说，Java应用的类都是由它来完成加载；</li><li>通过ClassLoader#getSystemClassLoader()方法可以获取到该类加载器；</li></ol></li><li>用户自定义类加载器<ol><li>在Java的日常应用程序开发中，类的加载几乎由上述3种类加载器相互配合执行的，在必要时，我们还可以自定义类加载器，来定制类的加载方式。</li><li>为什么要自定义类加载器？<ol><li>隔离加载类；</li><li>修改类的加载方式；</li><li>扩展加载源；</li><li>防止源码泄漏；</li></ol></li><li>用户自定义类加载器实现步骤：<ol><li>开发人员可以通过继承抽象类java.lang.ClassLoader类的方式，实现自己的类加载器，以满足一些特殊的需求；</li><li>在编写自定义类加载器时，如果没有太过于复杂的需求，可以直接继承URLClassLoader类，这样就可以避免自己去编写findClass()方法及其获取字节码流的方式，使自定义类加载器编写更加简洁；</li></ol></li></ol></li></ol><h2 id="ClassLoader的使用说明"><a href="#ClassLoader的使用说明" class="headerlink" title="ClassLoader的使用说明"></a>ClassLoader的使用说明</h2><p>ClassLoader类，是一个抽象类，其后所有的类加载器都继承自ClassLoader（不包括启动类加载器，<font style="color:red"><strong>扩展类、应用类加载器都继承ClassLoader类，扩展类加载器是应用加载器的父加载器，但是不是父类。</strong></font>）</p><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>getParent()</td><td>返回该类加载器的超类加载器</td></tr><tr><td>loadClasss(String name)</td><td>加载名称为name的类，返回结果为java.lang.Class的实例</td></tr><tr><td>findClass(String name)</td><td>查找名称为name的类，返回结果为java.lang.Class的实例</td></tr><tr><td>findLoadedClass(String name)</td><td>查找名称为name的已经被加载过的类，返回结果为java.lang.Class类的实例</td></tr><tr><td>defineClass(String name, byte[] b, int off, int len)</td><td>把字节数组b中的内容转换为一个Java类，返回结果为java.lang.Class类的实例</td></tr><tr><td>resolveClass(Class&lt;?&gt; c)</td><td>链接指定的一个Java类</td></tr></tbody></table><p>sun.misc.Launcher它是一个java虚拟机的入口应用</p><p><img src="http://mkstatic.lianbian.net/image-20210313154121634.png" alt="image-20210313154121634"></p><h2 id="获取ClassLoader的途径"><a href="#获取ClassLoader的途径" class="headerlink" title="获取ClassLoader的途径"></a>获取ClassLoader的途径</h2><table><thead><tr><th>方式一：获取当前类的ClassLoader</th></tr></thead><tbody><tr><td>clazz.getClassLoader()</td></tr><tr><td><strong>方式二：获取当前线程上下文的Classloader</strong></td></tr><tr><td>Thread.currentthread().getContextClassLoader()</td></tr><tr><td><strong>方式三：获取系统的ClassLoader</strong></td></tr><tr><td>ClassLoader.getSystemClassLoader()</td></tr><tr><td><strong>方式四：获取调用者的ClassLoader</strong></td></tr><tr><td>DriverManager.getClallerClassLoader()</td></tr></tbody></table><h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><p>Java虚拟机对class文件采用的是<strong>按需加载</strong>的方式，也就是说当需要使用该类时才会将它的class文件加载到内存生成class对象。而且加载某个类的class文件时，Java虚拟机采用的是<strong>双亲委派模式</strong>，即把请求交由父类处理，它是一种任务委派模式。怎么看都是一个<strong>单亲委派模型</strong>（Parent-Delegation Model），但是没有办法，大家都这样子叫了，所谓双亲委派，这个<strong>亲</strong>就是指ClassLoader里的全局变量parent，也就是<strong>父加载器</strong>。</p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ol><li><p>如果一个类加载器收到了类加载的请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行；</p></li><li><p>如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器；</p></li><li><p>如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式；</p><p><img src="http://mkstatic.lianbian.net/image-20210313155518260.png" alt="image-20210313155518260"></p></li></ol><p><strong>依次往上查找类加载器，判断规则，然后进行加载。</strong></p><ol><li>避免类的重复加载</li><li>保护程序安全，防止核心api被随意篡改<ol><li>自定义类：java.lang.String</li><li>自定义类：java.lang.lianbian</li></ol></li></ol><h3 id="通俗易懂-启动类加载器、扩展类加载器、应用类加载器"><a href="#通俗易懂-启动类加载器、扩展类加载器、应用类加载器" class="headerlink" title="通俗易懂 启动类加载器、扩展类加载器、应用类加载器"></a><a href="https://zhuanlan.zhihu.com/p/73359363">通俗易懂 启动类加载器、扩展类加载器、应用类加载器</a></h3>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jvm与java体系结构</title>
      <link href="/2021/03/13/%E5%90%8E%E7%AB%AF/java/jvm/JVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
      <url>/2021/03/13/%E5%90%8E%E7%AB%AF/java/jvm/JVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h1><ol><li>Java字节码，指的是用Java语言编译成的字节码，准确的说任何能在JVM平台上执行的字节码格式都是一样的。所以应该统称为：JVM字节码；</li><li>不同的编译器，可以编译出相同的字节码文件，字节码文件也可以在不同的JVM上运行；</li><li>JVM与Java语言并没有必然的联系，它只与特定的二进制文件格式（.class）所关联，.class文件包含了Java虚拟机指令集（或者称为字节码、Bytecodes）和符号表，还有一些其他辅助信息。</li></ol><h1 id="JVM（程序虚拟机）在系统中的位置"><a href="#JVM（程序虚拟机）在系统中的位置" class="headerlink" title="JVM（程序虚拟机）在系统中的位置"></a>JVM（程序虚拟机）在系统中的位置</h1><p><img src="http://mkstatic.lianbian.net/image-20210313062458529.png" alt="image-20210313062458529"></p><p>​                                                    运行在操作系统之上的，它与硬件没有直接的交互</p><h1 id="JDK构成"><a href="#JDK构成" class="headerlink" title="JDK构成"></a>JDK构成</h1><ol><li><p>编译成.class文件（javac 前端编译器）</p></li><li><p>API</p></li><li><p>JVM</p><p><img src="http://mkstatic.lianbian.net/image-20210313063102634.png" alt="image-20210313063102634"></p></li></ol><h1 id="JVM整体结构"><a href="#JVM整体结构" class="headerlink" title="JVM整体结构"></a>JVM整体结构</h1><ol><li><p>HotSpot VM是目前市面上高性能虚拟机的代表作之一；</p></li><li><p>采用解释器和即时编译器并存的架构；</p><p><img src="http://mkstatic.lianbian.net/%E7%AC%AC02%E7%AB%A0_JVM%E6%9E%B6%E6%9E%84-%E7%AE%80%E5%9B%BE.jpg" alt="JVM架构-简图"></p></li></ol><h1 id="Java代码执行流程"><a href="#Java代码执行流程" class="headerlink" title="Java代码执行流程"></a>Java代码执行流程</h1><ol><li><p>Java编译器编译的过程中，任何一个节点执行失败就会造成编译失败；</p></li><li><p>各个平台JVM内部的实现细节不尽相同，但是它们共同执行的字节码内容是一样的；</p></li><li><p>JVM的主要任务就是负责将字节码装载到其内部，解释/编译为对应平台上的机器指令（即：汇编语言）执行；</p></li><li><p>Java虚拟机使用类加载器（Class Loader）装载 class 文件；</p></li><li><p>类加载完成之后，会进行字节码校验，字节码校验通过之后 JVM 解释器会把字节码翻译成机器吗（即：汇编语言）交由操作系统执行；</p></li><li><p>但不是所有的代码都是解释执行的，JVM对此做了优化，Hotspot虚拟机提供了JIT；</p></li></ol><p><img src="http://mkstatic.lianbian.net/image-20210313063821581.png" alt="image-20210313063821581"></p><h1 id="栈式架构和寄存器架构"><a href="#栈式架构和寄存器架构" class="headerlink" title="栈式架构和寄存器架构"></a>栈式架构和寄存器架构</h1><h2 id="基于栈式架构的特点"><a href="#基于栈式架构的特点" class="headerlink" title="基于栈式架构的特点"></a>基于栈式架构的特点</h2><ol><li>设计和实现更简单，适用于资源受限的系统；</li><li>避开了寄存器的分配难题（使用零地址方式分配）；</li><li>指令留中的指令大部分是零地址指令，其执行过程依赖于栈。指令集更小，编译器容易实现；</li><li>不需要硬件支持，可移植性更好，更好实现跨平台；</li></ol><h2 id="基于寄存器架构的特点"><a href="#基于寄存器架构的特点" class="headerlink" title="基于寄存器架构的特点"></a>基于寄存器架构的特点</h2><ol><li>典型的应用是x86的二进制指令集：比如传统的PC以及Android的Davlik虚拟机；</li><li>指令集架构则完全依赖硬件，可移植性差；</li><li>性能优秀和执行更高效；</li><li>花费更少的指令去完成一项操作；</li><li>在大部分情况下，基于寄存器架构的指令往往都以一地址指令、二地址指令和三地址指令为主，而基于栈式架构的指令集却是以零指令为主；</li></ol><h1 id="JVM的架构模型"><a href="#JVM的架构模型" class="headerlink" title="JVM的架构模型"></a>JVM的架构模型</h1><p>由于跨平台性的设计，Java的指令都是根据栈来设计的；</p><p>不同平台的CPU架构不同，所以不能设计为基于寄存器的；</p><p>**优点是跨平台，指令集小，编译器容易实现； **</p><p>缺点是性能下降，实现同样的功能需要更多的指令；</p><h1 id="JVM的生命周期"><a href="#JVM的生命周期" class="headerlink" title="JVM的生命周期"></a>JVM的生命周期</h1><h2 id="JVM的启动"><a href="#JVM的启动" class="headerlink" title="JVM的启动"></a>JVM的启动</h2><p>JVM的启动是通过引导类加载器（bootstarp class loader）创建一个初始类（initial class）来完成的，这个类是由虚拟机具体的实现指定的；</p><h2 id="JVM的执行"><a href="#JVM的执行" class="headerlink" title="JVM的执行"></a>JVM的执行</h2><ol><li>一个运行中的JVM有着一个清晰的任务：执行Java程序；</li><li>程序开始执行它才运行，程序结束时他就停止；</li><li>执行一个所谓的Java程序的时候，真真正正在执行的是一个叫做Java虚拟机的进程；</li></ol><h2 id="JVM的退出"><a href="#JVM的退出" class="headerlink" title="JVM的退出"></a>JVM的退出</h2><ol><li>正常执行结束；</li><li>程序在执行过程中遇到了异常或者错误而异常终止；</li><li>由于操作系统出现错误而导致Java虚拟机进程终止；</li><li>Runtime类 或者 System类的exit方法、Runtime类 halt 方法；</li><li>JNI（Java Native Interface）规范描述了用JNI Invocation API来加载或者卸载 Java虚拟机时，Java虚拟机的退出情况；</li></ol>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
